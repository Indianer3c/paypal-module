<?php

/**
 * Copyright Â© OXID eSales AG. All rights reserved.
 * See LICENSE file for license details.
 */

namespace OxidSolutionCatalysts\PayPal\Core;

use OxidEsales\Eshop\Core\DatabaseProvider;
use OxidSolutionCatalysts\PayPal\Service\ModuleSettings;

class LegacyOeppModuleDetails extends LegacyModulesCommonDetails
{
    /** @var string ID as found in metadata.php */
    protected $legacyModuleId = 'oepaypal';

    public const LEGACY_PAYMENT_ID = 'oxidpaypal';

    /**
     * @var string[] Array of the legacy settings with their corresponding settings in this module.
     */
    protected $transferrableSettings = [
        // old name => new name
        'oePayPalBannersHideAll'                    => 'oscPayPalBannersShowAll', // invert this value!
        'oePayPalBannersStartPage'                  => 'oscPayPalBannersStartPage',
        'oePayPalBannersStartPageSelector'          => 'oscPayPalBannersStartPageSelector',
        'oePayPalBannersCategoryPage'               => 'oscPayPalBannersCategoryPage',
        'oePayPalBannersCategoryPageSelector'       => 'oscPayPalBannersCategoryPageSelector',
        'oePayPalBannersSearchResultsPage'          => 'oscPayPalBannersSearchResultsPage',
        'oePayPalBannersSearchResultsPageSelector'  => 'oscPayPalBannersSearchResultsPageSelector',
        'oePayPalBannersProductDetailsPage'         => 'oscPayPalBannersProductDetailsPage',
        'oePayPalBannersProductDetailsPageSelector' => 'oscPayPalBannersProductDetailsPageSelector',
        'oePayPalBannersCheckoutPage'               => 'oscPayPalBannersCheckoutPage',
        'oePayPalBannersCartPageSelector'           => 'oscPayPalBannersCartPageSelector',
        'oePayPalBannersPaymentPageSelector'        => 'oscPayPalBannersPaymentPageSelector',
        'oePayPalBannersColorScheme'                => 'oscPayPalBannersColorScheme',
    ];

    /**
     * @return string[] Array of settings that can be moved from the old module to the new one
     */
    public function getTransferrableSettings(): array
    {
        return $this->transferrableSettings;
    }

    /**
     * Checks whether oepaypal and its transaction data tables are present and the transfer hasn't been executed yet.
     * @return bool
     */
    public function showTransferTransactiondataButton(): bool
    {
        if (!$this->isLegacyModuleActive()) {
            return false;
        }

        if ($this->getServiceFromContainer(ModuleSettings::class)->getLegacyOeppTransactionsTransferStatus())
        {
            return false;
        }

        $db = DatabaseProvider::getDb(DatabaseProvider::FETCH_MODE_ASSOC);
        $out = $db->getAll(
            "SELECT COUNT(*) as c FROM information_schema.tables WHERE table_schema = DATABASE() AND table_name = ?;",
            ['oepaypal_order']
        );

        return $out[0]['c'];
    }

    /**
     * Queries data generated by transactions with the oepaypal module and returns the results
     * @return array
     * @throws \OxidEsales\Eshop\Core\Exception\DatabaseConnectionException
     * @throws \OxidEsales\Eshop\Core\Exception\DatabaseErrorException
     */
    public function getOeppTransactionRecords()
    {
        $db = DatabaseProvider::getDb(DatabaseProvider::FETCH_MODE_ASSOC);

        $query = <<<'SQL'
SELECT
o.OEPAYPAL_ORDERID as 'recordid', q.OXSHOPID as 'shopid',
o.OEPAYPAL_ORDERID as 'orderid', p.OEPAYPAL_TRANSACTIONID as 'transactionid',
p.OEPAYPAL_STATUS as 'status', o.OEPAYPAL_PAYMENTSTATUS as 'paymentstatus',
q.OXPAYMENTTYPE as 'paymenttype'
FROM oepaypal_order o
LEFT JOIN oepaypal_orderpayments p ON o.OEPAYPAL_ORDERID = p.OEPAYPAL_ORDERID
LEFT JOIN oxorder q ON o.OEPAYPAL_ORDERID = q.OXID;
SQL;

        return $db->getAll($query);
    }

    /**
     * @var string[] Array of query results performed by getOeppTransactionRecords(), translated for osc_paypal
     */
    protected $transferrableTransactionData = [
        // query keys   =>  oscpaypal_order
        'recordid'      =>  'OXID',
        'shopid'        =>  'OXSHOPID',
        'orderid'       =>  'OXORDERID',
        'transactionid' =>  'OXPAYPALORDERID',
        'status'        =>  'OSCPAYPALSTATUS',
        // 'paymentstatus' =>  null,
        'paymenttype'   =>  'OSCPAYMENTMETHODID',
    ];

    /**
     * Update usages of old payment keys
     * @return void
     * @throws \OxidEsales\Eshop\Core\Exception\DatabaseConnectionException
     * @throws \OxidEsales\Eshop\Core\Exception\DatabaseErrorException
     */
    protected function updatePaymentKeys()
    {
        $db = DatabaseProvider::getDb(DatabaseProvider::FETCH_MODE_ASSOC);

        $db->execute(
            "UPDATE `oxorder` SET `OXPAYMENTTYPE` = ? WHERE `OXPAYMENTTYPE` = ?;",
            [
                PayPalDefinitions::STANDARD_PAYPAL_PAYMENT_ID,
                self::LEGACY_PAYMENT_ID
            ]
        );
        $db->execute(
            "UPDATE `oxuserpayments` SET `OXPAYMENTSID` = ? WHERE `OXPAYMENTSID` = ?;",
            [
                PayPalDefinitions::STANDARD_PAYPAL_PAYMENT_ID,
                self::LEGACY_PAYMENT_ID
            ]
        );
    }
}
