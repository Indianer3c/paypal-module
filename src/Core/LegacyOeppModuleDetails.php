<?php

/**
 * Copyright Â© OXID eSales AG. All rights reserved.
 * See LICENSE file for license details.
 */

namespace OxidSolutionCatalysts\PayPal\Core;

use OxidEsales\Eshop\Core\DatabaseProvider;
use OxidEsales\Eshop\Core\Registry;
use OxidSolutionCatalysts\PayPal\Model\PayPalOrder;
use OxidSolutionCatalysts\PayPal\Service\ModuleSettings;
use OxidSolutionCatalysts\PayPal\Traits\ServiceContainer;
use OxidEsales\Eshop\Core\Registry;
use OxidEsales\EshopCommunity\Internal\Container\ContainerFactory;
use OxidEsales\EshopCommunity\Internal\Framework\Module\Setup\Bridge\ModuleActivationBridgeInterface;

class LegacyOeppModuleDetails
{
    use ServiceContainer;

    public const LEGACY_MODULE_ID = 'oepaypal';
    public const LEGACY_PAYMENT_ID = 'oxidpaypal';

    /**
     * Determines whether the legacy PayPal module "oepaypal" is enabled
     * @return bool
     */
    public function isLegacyModulePresent(): bool
    {
        $container = ContainerFactory::getInstance()->getContainer();
        $moduleActivationBridge = $container
            ->get(ModuleActivationBridgeInterface::class);

        return $moduleActivationBridge->isActive(
            self::LEGACY_MODULE_ID,
            Registry::getConfig()->getShopId()
        );
    }

    /**
     * @var string[] Array of the legacy settings with their corresponding settings in this module.
     */
    protected $transferrableSettings = [
        // old name => new name
        'oePayPalBannersHideAll'                    => 'oscPayPalBannersShowAll', // invert this value!
        'oePayPalBannersStartPage'                  => 'oscPayPalBannersStartPage',
        'oePayPalBannersStartPageSelector'          => 'oscPayPalBannersStartPageSelector',
        'oePayPalBannersCategoryPage'               => 'oscPayPalBannersCategoryPage',
        'oePayPalBannersCategoryPageSelector'       => 'oscPayPalBannersCategoryPageSelector',
        'oePayPalBannersSearchResultsPage'          => 'oscPayPalBannersSearchResultsPage',
        'oePayPalBannersSearchResultsPageSelector'  => 'oscPayPalBannersSearchResultsPageSelector',
        'oePayPalBannersProductDetailsPage'         => 'oscPayPalBannersProductDetailsPage',
        'oePayPalBannersProductDetailsPageSelector' => 'oscPayPalBannersProductDetailsPageSelector',
        'oePayPalBannersCheckoutPage'               => 'oscPayPalBannersCheckoutPage',
        'oePayPalBannersCartPageSelector'           => 'oscPayPalBannersCartPageSelector',
        'oePayPalBannersPaymentPageSelector'        => 'oscPayPalBannersPaymentPageSelector',
        'oePayPalBannersColorScheme'                => 'oscPayPalBannersColorScheme',
    ];

    /**
     * @return string[] Array of settings that can be moved from the old module to the new one
     */
    public function getTransferrableSettings(): array
    {
        return $this->transferrableSettings;
    }

    /**
     * Checks whether oepaypal and its transaction data tables are present and the transfer hasn't been executed yet.
     * @return bool
     */
    public function showTransferTransactiondataButton(): bool
    {
        if (!$this->isLegacyModulePresent()) {
            return false;
        }

        if ($this->getServiceFromContainer(ModuleSettings::class)->getLegacyOeppTransactionsTransferStatus())
        {
            return false;
        }

        $db = DatabaseProvider::getDb(DatabaseProvider::FETCH_MODE_ASSOC);
        $out = $db->getAll(
            "SELECT COUNT(*) as c FROM information_schema.tables WHERE table_schema = DATABASE() AND table_name = ?;",
            ['oepaypal_order']
        );

        return $out[0]['c'];
    }

    /**
     * Queries data generated by transactions with the oepaypal module and returns the results
     * @return array
     * @throws \OxidEsales\Eshop\Core\Exception\DatabaseConnectionException
     * @throws \OxidEsales\Eshop\Core\Exception\DatabaseErrorException
     */
    public function getOeppTransactionRecords()
    {
        $db = DatabaseProvider::getDb(DatabaseProvider::FETCH_MODE_ASSOC);

        $query = <<<'SQL'
SELECT
o.OEPAYPAL_ORDERID as 'recordid', q.OXSHOPID as 'shopid',
o.OEPAYPAL_ORDERID as 'orderid', p.OEPAYPAL_TRANSACTIONID as 'transactionid',
p.OEPAYPAL_STATUS as 'status', o.OEPAYPAL_PAYMENTSTATUS as 'paymentstatus',
q.OXPAYMENTTYPE as 'paymenttype'
FROM oepaypal_order o
LEFT JOIN oepaypal_orderpayments p ON o.OEPAYPAL_ORDERID = p.OEPAYPAL_ORDERID
LEFT JOIN oxorder q ON o.OEPAYPAL_ORDERID = q.OXID;
SQL;

        return $db->getAll($query);
    }

    /**
     * @var string[] Array of query results performed by getOeppTransactionRecords(), translated for osc_paypal
     */
    protected $transferrableTransactionData = [
        // query keys   =>  oscpaypal_order
        'recordid'      =>  'OXID',
        'shopid'        =>  'OXSHOPID',
        'orderid'       =>  'OXORDERID',
        'transactionid' =>  'OXPAYPALORDERID',
        'status'        =>  'OSCPAYPALSTATUS',
        // 'paymentstatus' =>  null,
        'paymenttype'   =>  'OSCPAYMENTMETHODID',
    ];

    /**
     * @return string[] Getter for $this->transferrableTransactionData
     */
    protected function getTransferrableTransactionData(): array
    {
        return $this->transferrableTransactionData;
    }

    /**
     * @return void
     * @throws \OxidEsales\Eshop\Core\Exception\DatabaseConnectionException
     * @throws \OxidEsales\Eshop\Core\Exception\DatabaseErrorException
     */
    public function transferTransactionData()
    {
        $this->updatePaymentKeys();

        $OrderModel = Registry::get(PayPalOrder::class);
        $db = DatabaseProvider::getDb(DatabaseProvider::FETCH_MODE_ASSOC);

        $oldRecords = $this->getOeppTransactionRecords();
        $transactionDataFieldMapping = $this->getTransferrableTransactionData();
        $allowedKeys = array_keys($transactionDataFieldMapping);

        $amountOfRecords = 0;

        foreach ($oldRecords as $record) {
            $query = "INSERT IGNORE INTO `".$OrderModel->getCoreTableName()."` SET ";

            $last = count($record);
            $i = 0;
            foreach ($record as $key => $value)
            {
                if (in_array($key, $allowedKeys))
                {
                    if ($key == 'status')
                    {
                        $value = strtoupper($value);
                    }

                    $query .= "`".$transactionDataFieldMapping[$key]."` = '".$value."'";
                    if ($i < $last - 1)
                    {
                        $query .= ", ";
                    }
                }
                $i++;
            }

            $query .= ";";
            $result = $db->execute($query);

            if (is_numeric($result))
            {
                $amountOfRecords++;
            }
        }

        if ($amountOfRecords)
        {
            Registry::getUtilsView()->addErrorToDisplay(
                Registry::getLang()->translateString('OSC_PAYPAL_TRANSFERLEGACY_OEPP_SUCCESS')." ".$amountOfRecords,
                false,
                true
            );
        }
    }

    /**
     * Update usages of old payment keys
     * @return void
     * @throws \OxidEsales\Eshop\Core\Exception\DatabaseConnectionException
     * @throws \OxidEsales\Eshop\Core\Exception\DatabaseErrorException
     */
    protected function updatePaymentKeys()
    {
        $db = DatabaseProvider::getDb(DatabaseProvider::FETCH_MODE_ASSOC);

        $db->execute(
            "UPDATE `oxorder` SET `OXPAYMENTTYPE` = ? WHERE `OXPAYMENTTYPE` = ?;",
            [
                PayPalDefinitions::STANDARD_PAYPAL_PAYMENT_ID,
                self::LEGACY_PAYMENT_ID
            ]
        );
        $db->execute(
            "UPDATE `oxuserpayments` SET `OXPAYMENTSID` = ? WHERE `OXPAYMENTSID` = ?;",
            [
                PayPalDefinitions::STANDARD_PAYPAL_PAYMENT_ID,
                self::LEGACY_PAYMENT_ID
            ]
        );
    }
}
