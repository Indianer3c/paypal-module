{
  "swagger": "2.0",
  "info": {
    "title": "Disputes",
    "x-serviceName": "disputeapiserv",
    "x-publicDocsPath": "customer-disputes",
    "description": "Occasionally, something goes wrong with a customer's order. To dispute a charge, a customer can create a dispute with PayPal. PayPal merchants, partners, and external developers can use the PayPal Disputes API to manage customer disputes.<blockquote><strong>Note:</strong> In the live environment, merchants cannot create disputes but can only respond to customer-created disputes. However, merchants can create disputes in the sandbox environment.</blockquote>A customer can also ask his or her bank or credit card company to dispute and reverse a charge, which is known as a <i>chargeback</i>. For more information, see <a href=\"https://www.paypal.com/us/brc/article/customer-disputes-claims-chargebacks-bank-reversals\">Disputes, claims, chargebacks, and bank reversals</a>.<br/><br/>When a customer disputes a charge, you can use this API to provide evidence that the charge is legitimate. To provide evidence or appeal a dispute, you submit a proof of delivery or proof of refund document or notes, which can include logs.<br/><br/>Normally, an agent at PayPal creates a dispute, updates the dispute status, and settles disputes, but now you can run test cases in the sandbox that complete these operations.<br/><br/><blockquote><strong>Important:</strong> The create, cancel, compute metrics, change reason, and validate eligibility methods are available as a limited-release solution at this time. For more information, reach out to your PayPal account manager.</blockquote><br/>For details, see <a href=\"/docs/integration/direct/customer-disputes/\">Disputes Overview</a> documentation.",
    "version": "1.6"
  },
  "host": "api.paypal.com",
  "basePath": "/v1/customer",
  "schemes": [
    "https"
  ],
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json",
    "multipart/related",
    "multipart/form-data",
    "multipart/mixed"
  ],
  "securityDefinitions": {
    "Oauth2": {
      "type": "oauth2",
      "description": "Oauth 2.0 authentication",
      "flow": "application",
      "scopes": {
        "https://uri.paypal.com/services/disputes/read-seller": "This privilege allows client to read and search a disputes of a merchant but gets only a limited and allowed set of fields back .",
        "https://uri.paypal.com/services/disputes/read-buyer": "This privilege allows client to read and search disputes but returns a limited and allowed set of fields back.",
        "https://uri.paypal.com/services/disputes/read-ebay": "This privilege allows client to read and search a disputes of an user but gets only a limited and allowed set of fields back to ebay.",
        "https://uri.paypal.com/services/disputes/read": "This privilege allows client to read and search a dispute of an user with all fields.",
        "https://uri.paypal.com/services/disputes/webhooks": "This privilege allows webhook platform to read a dispute event",
        "https://uri.paypal.com/services/disputes/create": "This privilege allows client to validate eligibility and create a dispute on his transaction(s).",
        "https://uri.paypal.com/services/disputes/update-seller": "This privilege allows client to update a dispute (Merchant actions).",
        "https://uri.paypal.com/services/disputes/update-buyer": "This privilege allows client to update a dispute (customer actions).",
        "https://uri.paypal.com/services/referred-disputes/readwrite": "This privilege allows client to read and update a referred dispute.",
        "https://uri.paypal.com/services/disputes/read-partner": "This privilege allows client to read and search disputes but returns a limited and allowed set of fields back.",
        "https://uri.paypal.com/services/disputes/update-partner": "This privilege allows client to update a dispute (Partner actions)."
      },
      "tokenUrl": "https://api.paypal.com/v1/oauth2/token"
    }
  },
  "paths": {
    "/referred-disputes/{dispute_id}/process-adjudication-event": {
      "post": {
        "summary": "Notify PayPal about referred dispute adjudication updates",
        "description": "Notifies PayPal about adjudication updates for a referred dispute, by ID.",
        "operationId": "referred-disputes.process-adjudication-event",
        "responses": {
          "200": {
            "description": "A successful request returns the HTTP `200 OK` status code and a JSON response body that includes a link to the dispute.",
            "schema": {
              "$ref": "#/definitions/referred-subsequent_action.json"
            }
          },
          "400": {
            "description": "The request failed due to a validation error. The request returns the HTTP `400 Bad Request` status code.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          },
          "422": {
            "description": "The requested action could not be completed. The request returns the HTTP `422 Unprocessable Entity` status code.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          },
          "500": {
            "description": "An internal server error occurred. The request returns the HTTP `500 Internal Server Error` status code.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          },
          "default": {
            "description": "The error response.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          }
        },
        "parameters": [
          {
            "name": "dispute_id",
            "in": "path",
            "description": "The ID of the dispute to settle.",
            "required": true,
            "type": "string"
          },
          {
            "name": "adjudication_info",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/referred-adjudication_info.json",
              "example": {
                "dispute_amount": {
                  "currency_code": "EUR",
                  "value": "100"
                },
                "items": [
                  {
                    "id": "183058047704"
                  }
                ],
                "outcome": {
                  "faulty_party": "BUYER",
                  "adjudication_reason": "NO_FAULT_GIFT",
                  "resolution_date": "2018-03-13T23:47:57.000-07:00"
                },
                "evidences": [
                  {
                    "evidence_info": {
                      "tracking_info": [
                        {
                          "tracking_number": "11007FC341F",
                          "carrier_name": "10",
                          "tracking_status": "NO_TRACKING"
                        }
                      ]
                    }
                  }
                ],
                "closure_reason": "Claim Closed by Buyer",
                "messages": [
                  {
                    "posted_by": "BUYER",
                    "posted_time": "2018-03-12T23:40:57.000-07:00",
                    "content": " Hi, the items have arrived but, I am not happy with them"
                  },
                  {
                    "posted_by": "SELLER",
                    "posted_time": "2018-03-12T23:40:57.000-07:00",
                    "content": " Ok. Not problem. If you think my item's is nothing I am happy to refund. All my customer is always happy. Just request refund. And send me items."
                  }
                ]
              }
            }
          }
        ],
        "security": [
          {
            "Oauth2": [
              "https://uri.paypal.com/services/referred-disputes/readwrite"
            ]
          }
        ],
        "tags": [
          "referred-disputes-actions"
        ],
        "x-slo": {
          "response_time_95th_percentile": 5000,
          "error_rate": 0.1
        },
        "x-visibility": {
          "extent": "LIMITED_RELEASE"
        }
      }
    },
    "/disputes/{dispute_id}/require-evidence": {
      "post": {
        "summary": "Update dispute status",
        "description": "<blockquote><strong>Important:</strong> This method is for sandbox use only.</blockquote> Updates the status of a dispute, by ID, from <code>UNDER_REVIEW</code> to either:<ul><li><code>WAITING_FOR_BUYER_RESPONSE</code></li><li><code>WAITING_FOR_SELLER_RESPONSE</code></li></ul>This status change enables either the customer or merchant to submit evidence for the dispute. To make this call, the dispute <code>status</code> must be <code>UNDER_REVIEW</code>. Specify an <code>action</code> value in the JSON request body to indicate whether the status change enables the customer or merchant to submit evidence:<table><thead><tr align=\"left\"><th>If <code>action</code> is</th><th>The <code>status</code> updates to</th></tr></thead><tbody><tr><td><code>BUYER_EVIDENCE</code></td><td> <code>WAITING_FOR_BUYER_RESPONSE</code></td></tr><tr><td><code>SELLER_EVIDENCE</code></td><td> <code>WAITING_FOR_SELLER_RESPONSE</code></td></tr></tbody></table>",
        "operationId": "disputes.require-evidence",
        "responses": {
          "200": {
            "description": "A successful request returns the HTTP `200 OK` status code and a JSON response body that includes a link to the dispute.",
            "schema": {
              "$ref": "#/definitions/response-subsequent_action.json"
            }
          },
          "400": {
            "description": "The request failed due to a validation error. The request returns the HTTP `400 Bad Request` status code.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          },
          "422": {
            "description": "The requested action could not be completed. The request returns the HTTP `422 Unprocessable Entity` status code.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          },
          "500": {
            "description": "An internal server error occurred. The request returns the HTTP `500 Internal Server Error` status code.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          },
          "default": {
            "description": "The error response.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          }
        },
        "parameters": [
          {
            "name": "dispute_id",
            "in": "path",
            "description": "The ID of the dispute that requires evidence.",
            "required": true,
            "type": "string"
          },
          {
            "name": "require_evidence_request",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/request-require_evidence.json",
              "example": {
                "action": "BUYER_EVIDENCE"
              }
            },
            "required": true
          }
        ],
        "security": [
          {
            "Oauth2": [
              "https://uri.paypal.com/services/disputes/update-seller"
            ]
          },
          {
            "Oauth2": [
              "https://uri.paypal.com/services/disputes/update-buyer"
            ]
          }
        ],
        "tags": [
          "disputes-actions"
        ],
        "x-slo": {
          "response_time_95th_percentile": 1000,
          "error_rate": 0.1
        },
        "x-visibility": {
          "extent": "EXTERNAL"
        }
      }
    },
    "/referred-disputes/{dispute_id}/process-refund-event": {
      "post": {
        "summary": "Notify PayPal about refund for referred dispute",
        "description": "Notifies PayPal about a refund for a referred dispute, by ID.",
        "operationId": "referred-disputes.process-refund-event",
        "responses": {
          "200": {
            "description": "A successful request returns the HTTP `200 OK` status code and a JSON response body that includes a link to the referred dispute.",
            "schema": {
              "$ref": "#/definitions/referred-subsequent_action.json"
            }
          },
          "400": {
            "description": "The request failed due to a validation error. The request returns the HTTP `400 Bad Request` status code.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          },
          "422": {
            "description": "The requested action could not be completed. The request returns the HTTP `422 Unprocessable Entity` status code.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          },
          "500": {
            "description": "An internal server error occurred. The request returns the HTTP `500 Internal Server Error` status code.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          },
          "default": {
            "description": "The error response.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          }
        },
        "parameters": [
          {
            "name": "dispute_id",
            "in": "path",
            "description": "The ID of the dispute to settle.",
            "required": true,
            "type": "string"
          },
          {
            "name": "refund_info",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/referred-refund_info.json",
              "example": {
                "recipient": "BUYER",
                "amount": {
                  "currency_code": "USD",
                  "value": "45.0"
                },
                "create_time": "2017-01-24T10:41:35.000Z",
                "transaction_id": "ANS816683327652AB",
                "payout_type": "REVERSAL",
                "seller_protection_eligible": true,
                "transaction_source": "PAYPAL"
              }
            }
          }
        ],
        "security": [
          {
            "Oauth2": [
              "https://uri.paypal.com/services/referred-disputes/readwrite"
            ]
          }
        ],
        "tags": [
          "referred-disputes-actions"
        ],
        "x-slo": {
          "response_time_95th_percentile": 5000,
          "error_rate": 0.1
        },
        "x-visibility": {
          "extent": "LIMITED_RELEASE"
        }
      }
    },
    "/disputes/validate-eligibility": {
      "post": {
        "summary": "Determine dispute eligibility",
        "description": "Determines whether you can create a case for a transaction, by encrypted transaction ID. For an already created dispute, lists which reasons the customer can use to update a dispute, by ID. <blockquote><strong>Note:</strong> To call the determine dispute eligibility method in your sandbox, ask your PayPal account manager to add the required scopes.</blockquote>",
        "operationId": "disputes.validate-eligibility",
        "responses": {
          "200": {
            "description": "A successful request returns the HTTP `200 OK` status code and a JSON response body that lists the eligible dispute reasons and ineligible dispute reasons.",
            "schema": {
              "$ref": "#/definitions/response-dispute_eligibility.json"
            }
          },
          "default": {
            "description": "The error response.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          }
        },
        "parameters": [
          {
            "name": "eligibility-request",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/request-eligibility.json",
              "example": {
                "encrypted_transaction_id": "ANS816683327652AB"
              }
            }
          }
        ],
        "security": [
          {
            "Oauth2": [
              "https://uri.paypal.com/services/disputes/create"
            ]
          },
          {
            "Oauth2": [
              "https://uri.paypal.com/services/disputes/update-buyer"
            ]
          },
          {
            "Oauth2": [
              "https://uri.paypal.com/services/disputes/read-buyer"
            ]
          }
        ],
        "tags": [
          "validate-eligibility"
        ],
        "x-slo": {
          "response_time_95th_percentile": 1000,
          "error_rate": 0.1
        },
        "x-visibility": {
          "extent": "LIMITED_RELEASE"
        }
      }
    },
    "/disputes": {
      "get": {
        "summary": "List disputes",
        "description": "Lists disputes with a full or summary set of details. Default is a summary set of details, which shows the <code>dispute_id</code>, <code>reason</code>, <code>status</code>, <code>dispute_amount</code>, <code>create_time</code>, and <code>update_time</code> fields.<br/><br/>To filter the disputes in the response, specify one or more optional query parameters. To limit the number of disputes in the response, specify the <code>page_size</code> query parameter.<br/><br/>To list multiple disputes, set these query parameters in the request:<ul><li><code>page_size=2</code></li><li><code>start_time</code> instead of <code>disputed_transaction_id</code></li></ul><br/>If the response contains more than two disputes, it lists two disputes and includes a HATEOAS link to the next page of results.",
        "operationId": "disputes.list",
        "responses": {
          "200": {
            "description": "A successful request returns the HTTP <code>200 OK</code> status code and a JSON response body that lists disputes with a full or summary set of details. Default is a summary set of details, which shows the <code>dispute_id</code>, <code>reason</code>, <code>status</code>, <code>dispute_amount</code>, <code>create_time</code>, and <code>update_time</code> fields for each dispute.",
            "schema": {
              "$ref": "#/definitions/response-dispute_search.json"
            }
          },
          "default": {
            "description": "The error response.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          }
        },
        "parameters": [
          {
            "name": "account_number",
            "in": "query",
            "description": "Filters the disputes in the response by a PayPal user account with this payer ID.<blockquote><strong>Note:</strong> By default, the list shows the disputes for the logged-in user who calls the API. The user invokes the API through an access token and the API fetches the disputes of the logged-in user based on this token. So, the user does not explicitly send his or her account number to the API. For partner accounts, shows details for all disputes that are related to merchants who are associated with the partner. For a MAM account, it can list disputes for a child account by account number.</blockquote>",
            "type": "string",
            "minLength": 1,
            "maxLength": 255,
            "x-visibility": {
              "extent": "INTERNAL"
            }
          },
          {
            "name": "start_time",
            "in": "query",
            "description": "Filters the disputes in the response by a creation date and time. The start time must be within the last 180 days. Value is in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *`yyyy`*-*`MM`*-*`dd`*`T`*`HH`*:*`mm`*:*`ss`*.*`SSS`*`Z`.<br/><br/>You can specify either but not both the `start_time` and `disputed_transaction_id` query parameters.",
            "type": "string",
            "minLength": 20,
            "maxLength": 64,
            "default": "Current date and time",
            "x-deprecated": {
              "see": "create_time_after",
              "since_version": "1.4"
            }
          },
          {
            "name": "disputed_transaction_id",
            "in": "query",
            "description": "Filters the disputes in the response by a transaction, by ID.<br/><br/>You can specify either but not both the `start_time` and `disputed_transaction_id` query parameter.",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number of the results, as a non-zero integer. Enables you to search by page number. Use in combination with the `page_size`.",
            "default": 1,
            "type": "integer",
            "minimum": 1,
            "maximum": 50
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Limits the number of disputes in the response to this value.",
            "default": 10,
            "type": "integer",
            "minimum": 1,
            "maximum": 50
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "The token that describes the next page of results to fetch. The <a href=\"/docs/api/customer-disputes/v1/#disputes_list\">list disputes</a> call returns this token in the HATEOAS links in the response.",
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "default": "The first page of data",
            "x-deprecated": {
              "see": "page",
              "since_version": "1.4"
            }
          },
          {
            "name": "total_required",
            "in": "query",
            "description": "Indicates whether to include the total number of items in the response.",
            "default": false,
            "type": "boolean",
            "x-visibility": {
              "extent": "LIMITED_RELEASE"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Filters the fields returned for each dispute in the response to a set of summary fields or all fields. Value is `summary` or `all`. The `all` value is supported for transaction ID queries but not supported for time-range queries. The set of summary fields are `dispute_id`, `reason`, `status`, `dispute_amount`, `create_time`, and `update_time`.",
            "default": "summary",
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "x-visibility": {
              "extent": "INTERNAL"
            }
          },
          {
            "name": "dispute_state",
            "in": "query",
            "description": "Filters the disputes in the response by a state. Separate multiple values with a comma (`,`). When you specify more than one dispute_state, the response lists disputes that belong to any of the specified dispute_state.",
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "x-enum": [
              {
                "value": "REQUIRED_ACTION",
                "description": "Filters the disputes in the response to those with the <code>REQUIRED_ACTION</code> dispute state."
              },
              {
                "value": "REQUIRED_OTHER_PARTY_ACTION",
                "description": "Filters the disputes in the response to those with the <code>REQUIRED_OTHER_PARTY_ACTION</code> dispute state."
              },
              {
                "value": "UNDER_PAYPAL_REVIEW",
                "description": "Filters the disputes in the response to those with the <code>UNDER_PAYPAL_REVIEW</code> dispute state."
              },
              {
                "value": "RESOLVED",
                "description": "Filters the disputes in the response to those with the <code>RESOLVED</code> dispute state."
              },
              {
                "value": "OPEN_INQUIRIES",
                "description": "Filters the disputes in the response to those with the <code>OPEN_INQUIRIES</code> dispute state."
              },
              {
                "value": "APPEALABLE",
                "description": "Filters the disputes in the response to those with the <code>APPEALABLE</code> dispute state."
              }
            ]
          },
          {
            "name": "invoice_number",
            "in": "query",
            "description": "Filters the disputes in the response by a invoice, by ID.",
            "type": "string",
            "minLength": 1,
            "maxLength": 127,
            "x-visibility": {
              "extent": "LIMITED_RELEASE"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "Filters the disputes in the response by a counter party's primary email.",
            "type": "string",
            "minLength": 1,
            "maxLength": 1024,
            "x-visibility": {
              "extent": "LIMITED_RELEASE"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filters the disputes in the response by a counter party's full name. Also supports partial name search.",
            "type": "string",
            "minLength": 1,
            "maxLength": 1024,
            "x-visibility": {
              "extent": "LIMITED_RELEASE"
            }
          },
          {
            "name": "reasons",
            "in": "query",
            "description": "Filters the disputes in the response by one or more reasons. Separate multiple values with a comma (`,`). When you specify more than one reason, the response lists disputes that belong to any of the specified reasons.",
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "x-visibility": {
              "extent": "LIMITED_RELEASE"
            }
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "Filters the disputes in the response by one or more statuses. Separate multiple values with a comma (`,`). When you specify more than one status, the response lists disputes with any of the specified statuses.",
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "x-visibility": {
              "extent": "LIMITED_RELEASE"
            }
          },
          {
            "name": "dispute_flows",
            "in": "query",
            "description": "Filters the disputes in the response by one or more dispute flows. Separate multiple values with a comma (`,`). When you specify more than one dispute flow, the response lists disputes with any of the specified dispute flows.",
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "x-visibility": {
              "extent": "LIMITED_RELEASE"
            }
          },
          {
            "name": "create_time_before",
            "in": "query",
            "description": "The date and time when the dispute was created, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *`yyyy`*-*`MM`*-*`dd`*`T`*`HH`*:*`mm`*:*`ss`*.*`SSS`*`Z`.",
            "type": "string",
            "minLength": 20,
            "maxLength": 64,
            "x-visibility": {
              "extent": "LIMITED_RELEASE"
            }
          },
          {
            "name": "create_time_after",
            "in": "query",
            "description": "The date and time when the dispute was created, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *`yyyy`*-*`MM`*-*`dd`*`T`*`HH`*:*`mm`*:*`ss`*.*`SSS`*`Z`.",
            "type": "string",
            "minLength": 20,
            "maxLength": 64,
            "x-visibility": {
              "extent": "LIMITED_RELEASE"
            }
          },
          {
            "name": "update_time_before",
            "in": "query",
            "description": "The date and time when the dispute was last updated, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *`yyyy`*-*`MM`*-*`dd`*`T`*`HH`*:*`mm`*:*`ss`*.*`SSS`*`Z`.",
            "type": "string",
            "format": "ppaas_date_time_v3",
            "minLength": 20,
            "maxLength": 64,
            "pattern": "^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])[T,t]([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)([.][0-9]+)?([Zz]|[+-][0-9]{2}:[0-9]{2})$",
            "x-visibility": {
              "extent": "LIMITED_RELEASE"
            }
          },
          {
            "name": "update_time_after",
            "in": "query",
            "description": "The date and time when the dispute was last updated, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *`yyyy`*-*`MM`*-*`dd`*`T`*`HH`*:*`mm`*:*`ss`*.*`SSS`*`Z`.",
            "type": "string",
            "format": "ppaas_date_time_v3",
            "minLength": 20,
            "maxLength": 64,
            "pattern": "^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])[T,t]([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)([.][0-9]+)?([Zz]|[+-][0-9]{2}:[0-9]{2})$",
            "x-visibility": {
              "extent": "LIMITED_RELEASE"
            }
          },
          {
            "name": "response_due_date_before",
            "in": "query",
            "description": "The date and time before which the dispute is due for response, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *`yyyy`*-*`MM`*-*`dd`*`T`*`HH`*:*`mm`*:*`ss`*.*`SSS`*`Z`.",
            "type": "string",
            "minLength": 20,
            "maxLength": 64,
            "x-visibility": {
              "extent": "LIMITED_RELEASE"
            }
          },
          {
            "name": "response_due_date_after",
            "in": "query",
            "description": "The date and time after which the dispute is due for response, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *`yyyy`*-*`MM`*-*`dd`*`T`*`HH`*:*`mm`*:*`ss`*.*`SSS`*`Z`.",
            "type": "string",
            "minLength": 20,
            "maxLength": 64,
            "x-visibility": {
              "extent": "LIMITED_RELEASE"
            }
          },
          {
            "name": "dispute_currency",
            "in": "query",
            "description": "Filters the disputes in the response by one or more currency codes. Separate multiple values with a comma (`,`). When you specify more than one currency code, the response lists disputes with any of the specified currency codes.",
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "x-visibility": {
              "extent": "LIMITED_RELEASE"
            }
          },
          {
            "name": "dispute_amount_gte",
            "in": "query",
            "description": "Filters the disputes in the response by a dispute amount.",
            "type": "string",
            "minLength": 1,
            "maxLength": 512,
            "x-visibility": {
              "extent": "LIMITED_RELEASE"
            }
          },
          {
            "name": "dispute_amount_lte",
            "in": "query",
            "description": "Filters the disputes in the response by a dispute amount.",
            "type": "string",
            "minLength": 1,
            "maxLength": 512,
            "x-visibility": {
              "extent": "LIMITED_RELEASE"
            }
          },
          {
            "name": "search_text",
            "in": "query",
            "description": "Filters the disputes by counter party's - name or email, transaction_id, invoice_id or dispute_id for the given search text.",
            "type": "string",
            "minLength": 2,
            "maxLength": 2000,
            "x-visibility": {
              "extent": "INTERNAL"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Sorts the disputes in the response by create time, update time, or response due date.",
            "type": "string",
            "minLength": 1,
            "maxLength": 255,
            "x-enum": [
              {
                "value": "CREATE_TIME",
                "description": "Sorts the disputes in the response by the creation date and time."
              },
              {
                "value": "UPDATE_TIME",
                "description": "Sorts the disputes in the response by the update date and time."
              },
              {
                "value": "RESPONSE_DUE_DATE",
                "description": "Sorts the disputes in the response by the response due date and time."
              }
            ],
            "x-visibility": {
              "extent": "LIMITED_RELEASE"
            }
          },
          {
            "name": "sort_order",
            "in": "query",
            "description": "Sorts the disputes in the response in ascending or descending order.",
            "type": "string",
            "minLength": 1,
            "maxLength": 255,
            "x-enum": [
              {
                "value": "asc",
                "description": "Sorts the disputes in the response in ascending order."
              },
              {
                "value": "desc",
                "description": "Sorts the disputes in the response in descending order."
              }
            ],
            "x-visibility": {
              "extent": "LIMITED_RELEASE"
            }
          },
          {
            "name": "dispute_channel",
            "in": "query",
            "description": "Filters the disputes in the response by a channel. Separate multiple values with a comma (`,`). When you specify more than one dispute_channel, the response lists disputes that belong to any of the specified dispute_channel.",
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1,
              "maxLength": 255,
              "pattern": "^[0-9a-zA-Z_.]+$",
              "x-enum": [
                {
                  "value": "INTERNAL",
                  "description": "Filters the disputes in the response to those with the <code>INTERNAL</code> dispute channel."
                },
                {
                  "value": "EXTERNAL",
                  "description": "Filters the disputes in the response to those with the <code>EXTERNAL</code> dispute channel."
                }
              ]
            },
            "collectionFormat": "csv",
            "required": false,
            "x-visibility": {
              "extent": "INTERNAL"
            }
          },
          {
            "name": "dispute_life_cycle_stage",
            "in": "query",
            "description": "Filters the disputes in the response by a life_cycle_stage. Separate multiple values with a comma (`,`). When you specify more than one dispute_life_cycle_stage, the response lists disputes that belong to any of the specified dispute_life_cycle_stage.",
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1,
              "maxLength": 255,
              "pattern": "^[0-9a-zA-Z_.]+$",
              "x-enum": [
                {
                  "value": "INQUIRY",
                  "description": "Filters the disputes in the response to those with the <code>INQUIRY</code> dispute life_cycle_stage."
                },
                {
                  "value": "CHARGEBACK",
                  "description": "Filters the disputes in the response to those with the <code>CHARGEBACK</code> dispute life_cycle_stage."
                },
                {
                  "value": "PRE_ARBITRATION",
                  "description": "Filters the disputes in the response to those with the <code>PRE_ARBITRATION</code> dispute life_cycle_stage."
                },
                {
                  "value": "ARBITRATION",
                  "description": "Filters the disputes in the response to those with the <code>ARBITRATION</code> dispute life_cycle_stage."
                }
              ]
            },
            "collectionFormat": "csv",
            "required": false,
            "x-visibility": {
              "extent": "INTERNAL"
            }
          }
        ],
        "security": [
          {
            "Oauth2": [
              "https://uri.paypal.com/services/disputes/read-buyer"
            ]
          },
          {
            "Oauth2": [
              "https://uri.paypal.com/services/disputes/read-seller"
            ]
          },
          {
            "Oauth2": [
              "https://uri.paypal.com/services/disputes/read-ebay"
            ]
          },
          {
            "Oauth2": [
              "https://uri.paypal.com/services/disputes/read"
            ]
          },
          {
            "Oauth2": [
              "https://uri.paypal.com/services/disputes/read-partner"
            ]
          }
        ],
        "tags": [
          "disputes"
        ],
        "x-slo": {
          "response_time_95th_percentile": 1000,
          "error_rate": 0.1
        },
        "x-visibility": {
          "extent": "EXTERNAL"
        }
      },
      "post": {
        "summary": "Create dispute",
        "description": "Sandbox only. Creates a dispute. <blockquote><strong>Note:</strong> To call the create dispute method, ask your PayPal account manager to add the required scopes.</blockquote>",
        "operationId": "disputes.create",
        "responses": {
          "201": {
            "description": "A successful request returns the HTTP `201 Created` status code and a JSON response body that includes a link to dispute details.",
            "schema": {
              "$ref": "#/definitions/response-dispute_create.json"
            }
          },
          "default": {
            "description": "The error response.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          }
        },
        "consumes": [
          "multipart/related",
          "multipart/form-data",
          "multipart/mixed"
        ],
        "parameters": [
          {
            "name": "dispute",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/response-dispute.json"
            }
          }
        ],
        "security": [
          {
            "Oauth2": [
              "https://uri.paypal.com/services/disputes/create"
            ]
          }
        ],
        "tags": [
          "disputes"
        ],
        "x-slo": {
          "response_time_95th_percentile": 1000,
          "error_rate": 0.1
        },
        "x-visibility": {
          "extent": "LIMITED_RELEASE"
        }
      }
    },
    "/disputes/{dispute_id}/appeal": {
      "post": {
        "summary": "Appeal dispute",
        "description": "Appeals a dispute, by ID. To appeal a dispute, use the <code>appeal</code> link in the <a href=\"/docs/api/hateoas-links/\">HATEOAS links</a> from the show dispute details response. If this link does not appear, you cannot appeal the dispute. Submit new evidence as a document or notes in the JSON request body. The following rules apply to document file types and sizes:<ul><li>The merchant can upload up to 50 MB of files for a case.</li><li>Individual files must be smaller than 10 MB.</li><li>The supported file formats are JPG, GIF, PNG, and PDF.</li></ul><br/>To make this request, specify the dispute ID in the URI and specify the evidence in the JSON request body. For information about dispute reasons, see <a href=\"/docs/integration/direct/customer-disputes/integration-guide/#dispute-reasons\">dispute reasons</a>.",
        "operationId": "disputes.appeal",
        "responses": {
          "200": {
            "description": "A successful request returns the HTTP `200 OK` status code and a JSON response body that includes a link to the dispute.",
            "schema": {
              "$ref": "#/definitions/response-subsequent_action.json"
            }
          },
          "default": {
            "description": "The error response.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          }
        },
        "consumes": [
          "multipart/related",
          "multipart/form-data",
          "multipart/mixed"
        ],
        "parameters": [
          {
            "name": "dispute_id",
            "in": "path",
            "description": "The PayPal dispute ID.",
            "required": true,
            "type": "string"
          },
          {
            "name": "evidence",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/request-evidences.json"
            }
          }
        ],
        "security": [
          {
            "Oauth2": [
              "https://uri.paypal.com/services/disputes/update-seller"
            ]
          },
          {
            "Oauth2": [
              "https://uri.paypal.com/services/disputes/update-buyer"
            ]
          }
        ],
        "tags": [
          "disputes-actions"
        ],
        "x-slo": {
          "response_time_95th_percentile": 1000,
          "error_rate": 0.1
        },
        "x-visibility": {
          "extent": "EXTERNAL"
        }
      }
    },
    "/referred-disputes": {
      "post": {
        "summary": "Create referred dispute",
        "description": "Creates a dispute for a partner- or marketplace-created referred case.",
        "operationId": "referred-disputes.create",
        "responses": {
          "201": {
            "description": "A successful request returns the HTTP `201 Created` status code and a JSON response body that includes a link to dispute details.",
            "schema": {
              "$ref": "#/definitions/referred-dispute_create_response.json"
            }
          },
          "400": {
            "description": "The request failed due to a validation error. The request returns the HTTP `400 Bad Request` status code.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          },
          "422": {
            "description": "The requested action could not be completed. The request returns the HTTP `422 Unprocessable Entity` status code.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          },
          "500": {
            "description": "An internal server error occurred. The request returns the HTTP `500 Internal Server Error` status code.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          },
          "default": {
            "description": "The error response.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          }
        },
        "parameters": [
          {
            "name": "dispute-create-request",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/referred-dispute_create_request.json",
              "example": {
                "dispute_flow": "THIRD_PARTY_DISPUTE",
                "reference_dispute": {
                  "id": "41095231",
                  "create_time": "2018-03-16T05:28:37.000-07:00"
                },
                "transaction": {
                  "id": "2R543929RN185702W",
                  "items": [
                    {
                      "id": "100002",
                      "category": "COMPUTERS",
                      "reason": "MERCHANDISE_OR_SERVICE_NOT_RECEIVED",
                      "note": "Lenova K3 Note"
                    }
                  ]
                },
                "extensions": {
                  "transaction_hold_info": {
                    "hold_required": true
                  },
                  "transaction_risk_info": {
                    "high_risk": true
                  }
                },
                "reason": "MERCHANDISE_OR_SERVICE_NOT_AS_DESCRIBED",
                "evidences": [
                  {
                    "evidence_info": {
                      "tracking_info": [
                        {
                          "carrier_name": "UPS",
                          "tracking_number": "54458769",
                          "tracking_status": "3",
                          "posted_time": "2018-03-14T05:28:37.000-07:00"
                        }
                      ]
                    }
                  }
                ]
              }
            }
          }
        ],
        "security": [
          {
            "Oauth2": [
              "https://uri.paypal.com/services/referred-disputes/readwrite"
            ]
          }
        ],
        "tags": [
          "referred-disputes"
        ],
        "x-slo": {
          "response_time_95th_percentile": 5000,
          "error_rate": 0.1
        },
        "x-visibility": {
          "extent": "INTERNAL"
        }
      },
      "get": {
        "summary": "List referred disputes",
        "description": "Lists referred disputes with a summary of dispute details. Default is a summary set of details, which shows the <code>dispute_id</code>, <code>reason</code>, <code>status</code>, <code>dispute_amount</code>, <code>create_time</code>, and <code>update_time</code> fields.<br/><br/>To filter the disputes in the response, specify one or more optional query parameters. To limit the number of disputes in the response, specify the <code>page_size</code> query parameter.<br/><br/>To list multiple disputes, set these query parameters in the request:<ul><li><code>page_size=2</code></li><li><code>create_time_after</code><code>create_time_before</code></li></ul><br/>If the response contains more than two disputes, it lists two disputes and includes a HATEOAS link to the next page of results.",
        "operationId": "referred-disputes.list",
        "responses": {
          "200": {
            "description": "A successful request returns the HTTP <code>200 OK</code> status code and a JSON response body that lists disputes with a full or summary set of details. Default is a summary set of details, which shows the <code>dispute_id</code>, <code>reason</code>, <code>status</code>, <code>dispute_amount</code>, <code>create_time</code>, and <code>update_time</code> fields for each dispute.",
            "schema": {
              "$ref": "#/definitions/referred-referred_disputes.json"
            }
          },
          "400": {
            "description": "The request failed due to a validation error. The request returns the HTTP `400 Bad Request` status code.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          },
          "500": {
            "description": "An internal server error occurred. The request returns the HTTP `500 Internal Server Error` status code.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          },
          "default": {
            "description": "The error response.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          }
        },
        "parameters": [
          {
            "name": "create_time_before",
            "in": "query",
            "description": "The date and time when the dispute was created before, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>",
            "format": "ppaas_date_time_v3",
            "minLength": 20,
            "maxLength": 64,
            "pattern": "^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])[T,t]([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)([.][0-9]+)?([Zz]|[+-][0-9]{2}:[0-9]{2})$",
            "type": "string",
            "required": true
          },
          {
            "name": "create_time_after",
            "in": "query",
            "description": "The date and time when the dispute was created after, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>",
            "format": "ppaas_date_time_v3",
            "minLength": 20,
            "maxLength": 64,
            "pattern": "^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])[T,t]([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)([.][0-9]+)?([Zz]|[+-][0-9]{2}:[0-9]{2})$",
            "type": "string",
            "required": true
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Limits the number of disputes in the response to this value.",
            "default": 10,
            "type": "integer",
            "minimum": 1,
            "maximum": 50
          },
          {
            "name": "page_token",
            "in": "query",
            "description": "The token that describes the next page of results to fetch. The <a href=\"/docs/api/customer-disputes/v1/#disputes_list\">list disputes</a> call returns this token in the HATEOAS links in the response. If you omit this parameter, the API returns the first page of data.",
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filters the disputes in the response by a state.",
            "type": "string",
            "minLength": 1,
            "maxLength": 255,
            "x-enum": [
              {
                "value": "CLOSED",
                "description": "Filters the disputes in the response to those with the <code>CLOSED</code> dispute state."
              },
              {
                "value": "OPEN",
                "description": "Filters the disputes in the response to those with the <code>CLOSED</code> dispute state."
              }
            ]
          },
          {
            "name": "dispute_flows",
            "in": "query",
            "description": "Filters the disputes in the response by one or more dispute flows. Separate multiple values with a comma (`,`). When you specify more than one dispute flow, the response lists disputes with any of the specified dispute flows.",
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1,
              "maxLength": 255,
              "pattern": "^[0-9a-zA-Z_.]+$",
              "x-enum": [
                {
                  "value": "THIRD_PARTY_CLAIM",
                  "description": "A third-party claim."
                },
                {
                  "value": "THIRD_PARTY_DISPUTE",
                  "description": "A third-party dispute."
                }
              ]
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "security": [
          {
            "Oauth2": [
              "https://uri.paypal.com/services/referred-disputes/readwrite"
            ]
          }
        ],
        "tags": [
          "referred-disputes"
        ],
        "x-slo": {
          "response_time_95th_percentile": 5000,
          "error_rate": 0.1
        },
        "x-visibility": {
          "extent": "LIMITED_RELEASE"
        }
      }
    },
    "/disputes/{dispute_id}/cancel": {
      "post": {
        "summary": "Cancel dispute",
        "description": "Cancels a dispute, by ID. <blockquote><strong>Note:</strong> To call the cancel dispute method in your sandbox, ask your PayPal account manager to add the required scopes.</blockquote>",
        "operationId": "disputes.cancel",
        "responses": {
          "200": {
            "description": "A successful request returns the HTTP `200 OK` status code and a JSON response body that includes a link to the dispute.",
            "schema": {
              "$ref": "#/definitions/response-subsequent_action.json"
            }
          },
          "default": {
            "description": "The error response.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          }
        },
        "parameters": [
          {
            "name": "dispute_id",
            "in": "path",
            "description": "The ID of the dispute to cancel.",
            "required": true,
            "type": "string"
          },
          {
            "name": "cancel-request",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/request-cancel.json",
              "example": {
                "note": "My dispute was resolved.",
                "cancellation_reason": "ITEM_RECEIVED"
              }
            }
          }
        ],
        "security": [
          {
            "Oauth2": [
              "https://uri.paypal.com/services/disputes/update-buyer"
            ]
          }
        ],
        "tags": [
          "disputes-actions"
        ],
        "x-slo": {
          "response_time_95th_percentile": 1000,
          "error_rate": 0.1
        },
        "x-visibility": {
          "extent": "LIMITED_RELEASE"
        }
      }
    },
    "/disputes/{dispute_id}/escalate": {
      "post": {
        "summary": "Escalate dispute to claim",
        "description": "Escalates the dispute, by ID, to a PayPal claim. To make this call, the stage in the dispute lifecycle must be `INQUIRY`.",
        "operationId": "disputes.escalate",
        "responses": {
          "200": {
            "description": "A successful request returns the HTTP `200 OK` status code and a JSON response body that includes a link to the dispute.",
            "schema": {
              "$ref": "#/definitions/response-subsequent_action.json"
            }
          },
          "400": {
            "description": "The request failed due to a validation error. The request returns the HTTP `400 Bad Request` status code.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          },
          "422": {
            "description": "The requested action could not be completed. The request returns the HTTP `422 Unprocessable Entity` status code.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          },
          "500": {
            "description": "An internal server error occurred. The request returns the HTTP `500 Internal Server Error` status code.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          },
          "default": {
            "description": "The error response.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          }
        },
        "parameters": [
          {
            "name": "dispute_id",
            "in": "path",
            "description": "The ID of the dispute to escalate to a claim.",
            "required": true,
            "type": "string"
          },
          {
            "name": "escalate-request",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/request-escalate.json",
              "example": {
                "note": "Escalating to PayPal claim for resolution."
              }
            }
          }
        ],
        "security": [
          {
            "Oauth2": [
              "https://uri.paypal.com/services/disputes/update-seller"
            ]
          },
          {
            "Oauth2": [
              "https://uri.paypal.com/services/disputes/update-buyer"
            ]
          }
        ],
        "tags": [
          "disputes-actions"
        ],
        "x-slo": {
          "response_time_95th_percentile": 10000,
          "error_rate": 0.1
        },
        "x-visibility": {
          "extent": "EXTERNAL"
        }
      }
    },
    "/disputes/{dispute_id}/adjudicate": {
      "post": {
        "summary": "Settle dispute",
        "description": "<blockquote><strong>Important:</strong> This method is for sandbox use only.</blockquote> Settles a dispute in either the customer's or merchant's favor. Merchants can make this call in the sandbox to complete end-to-end dispute resolution testing, which mimics the dispute resolution that PayPal agents normally complete. To make this call, the dispute <code>status</code> must be <code>UNDER_REVIEW</code>.",
        "operationId": "disputes.adjudicate",
        "responses": {
          "200": {
            "description": "A successful request returns the HTTP `200 OK` status code and a JSON response body that includes a link to the dispute.",
            "schema": {
              "$ref": "#/definitions/response-subsequent_action.json"
            }
          },
          "400": {
            "description": "The request failed due to a validation error. The request returns the HTTP `400 Bad Request` status code.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          },
          "422": {
            "description": "The requested action could not be completed. The request returns the HTTP `422 Unprocessable Entity` status code.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          },
          "500": {
            "description": "An internal server error occurred. The request returns the HTTP `500 Internal Server Error` status code.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          },
          "default": {
            "description": "The error response.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          }
        },
        "parameters": [
          {
            "name": "dispute_id",
            "in": "path",
            "description": "The ID of the dispute to settle.",
            "required": true,
            "type": "string"
          },
          {
            "name": "adjudicate-request",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/request-adjudicate.json",
              "example": {
                "adjudication_outcome": "BUYER_FAVOR"
              }
            }
          }
        ],
        "security": [
          {
            "Oauth2": [
              "https://uri.paypal.com/services/disputes/update-seller"
            ]
          },
          {
            "Oauth2": [
              "https://uri.paypal.com/services/disputes/update-buyer"
            ]
          }
        ],
        "tags": [
          "disputes-actions"
        ],
        "x-slo": {
          "response_time_95th_percentile": 1000,
          "error_rate": 0.1
        },
        "x-visibility": {
          "extent": "EXTERNAL"
        }
      }
    },
    "/disputes/{dispute_id}": {
      "get": {
        "summary": "Show dispute details",
        "description": "Shows details for a dispute, by ID.<blockquote><strong>Note:</strong> The fields that appear in the response depend on whether you access this call through first- or third-party access. For example, if the merchant shows dispute details through third-party access, the customer's email ID does not appear.</blockquote>",
        "operationId": "disputes.get",
        "responses": {
          "200": {
            "description": "A successful request returns the HTTP `200 OK` status code and a JSON response body that shows dispute details.",
            "schema": {
              "$ref": "#/definitions/response-dispute.json"
            }
          },
          "default": {
            "description": "The error response.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          }
        },
        "parameters": [
          {
            "name": "dispute_id",
            "in": "path",
            "description": "The ID of the dispute for which to show details.",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "Oauth2": [
              "https://uri.paypal.com/services/disputes/read-buyer"
            ]
          },
          {
            "Oauth2": [
              "https://uri.paypal.com/services/disputes/read-seller"
            ]
          },
          {
            "Oauth2": [
              "https://uri.paypal.com/services/disputes/read-ebay"
            ]
          },
          {
            "Oauth2": [
              "https://uri.paypal.com/services/disputes/read"
            ]
          },
          {
            "Oauth2": [
              "https://uri.paypal.com/services/disputes/read-partner"
            ]
          }
        ],
        "tags": [
          "disputes"
        ],
        "x-slo": {
          "response_time_95th_percentile": 1500,
          "error_rate": 0.1
        },
        "x-visibility": {
          "extent": "EXTERNAL"
        }
      },
      "patch": {
        "summary": "Partially update dispute",
        "description": "Partially updates a dispute, by ID. You can update the `communication_detail` value.",
        "operationId": "disputes.patch",
        "responses": {
          "204": {
            "description": "A successful request returns the HTTP `204 No Content` status code with no JSON response body."
          },
          "400": {
            "description": "The request failed due to a validation error. The request returns the HTTP `400 Bad Request` status code.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          },
          "422": {
            "description": "The requested action could not be completed. The request returns the HTTP `422 Unprocessable Entity` status code.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          },
          "500": {
            "description": "An internal server error occurred. The request returns the HTTP `500 Internal Server Error` status code.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          },
          "default": {
            "description": "The error response.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          }
        },
        "parameters": [
          {
            "name": "dispute_id",
            "in": "path",
            "description": "The ID of the dispute for which to update the communication detail.",
            "required": true,
            "type": "string"
          },
          {
            "name": "patch_request",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-patch_request.json",
              "example": [
                {
                  "op": "add",
                  "path": "/communication_details",
                  "value": {
                    "email": "merchant@example.com",
                    "note": "Please send a photo copy of the damaged items to the above email."
                  }
                }
              ]
            }
          }
        ],
        "security": [
          {
            "Oauth2": [
              "https://uri.paypal.com/services/disputes/update-seller"
            ]
          }
        ],
        "tags": [
          "disputes"
        ],
        "x-slo": {
          "response_time_95th_percentile": 10000,
          "error_rate": 0.1
        },
        "x-visibility": {
          "extent": "EXTERNAL"
        }
      }
    },
    "/disputes/{dispute_id}/accept-claim": {
      "post": {
        "summary": "Accept claim",
        "description": "Accepts liability for a claim, by ID. When you accept liability for a claim, the dispute closes in the customer’s favor and PayPal automatically refunds money to the customer from the merchant's account.",
        "operationId": "disputes.accept-claim",
        "responses": {
          "200": {
            "description": "A successful request returns the HTTP `200 OK` status code and a JSON response body that includes a link to the dispute.",
            "schema": {
              "$ref": "#/definitions/response-subsequent_action.json"
            }
          },
          "default": {
            "description": "The error response.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          }
        },
        "parameters": [
          {
            "name": "dispute_id",
            "in": "path",
            "description": "The ID of the dispute for which to accept a claim.",
            "required": true,
            "type": "string"
          },
          {
            "name": "accept-claim-request",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/request-accept_claim.json",
              "example": {
                "note": "Full refund to the customer."
              }
            }
          }
        ],
        "security": [
          {
            "Oauth2": [
              "https://uri.paypal.com/services/disputes/update-seller"
            ]
          }
        ],
        "tags": [
          "disputes-actions"
        ],
        "x-slo": {
          "response_time_95th_percentile": 1000,
          "error_rate": 0.1
        },
        "x-visibility": {
          "extent": "EXTERNAL"
        }
      }
    },
    "/disputes/{dispute_id}/send-message": {
      "post": {
        "summary": "Send message about dispute to other party",
        "description": "Sends a message about a dispute, by ID, to the other party in the dispute. Merchants and customers can only send messages if the `dispute_life_cycle_stage` value is `INQUIRY`.",
        "operationId": "disputes.send-message",
        "responses": {
          "200": {
            "description": "A successful request returns the HTTP `200 OK` status code and a JSON response body that includes a link to the dispute.",
            "schema": {
              "$ref": "#/definitions/response-subsequent_action.json"
            }
          },
          "400": {
            "description": "The request failed due to a validation error. The request returns the HTTP `400 Bad Request` status code.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          },
          "422": {
            "description": "The requested action could not be completed. The request returns the HTTP `422 Unprocessable Entity` status code.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          },
          "500": {
            "description": "An internal server error occurred. The request returns the HTTP `500 Internal Server Error` status code.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          },
          "default": {
            "description": "The error response.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          }
        },
        "parameters": [
          {
            "name": "dispute_id",
            "in": "path",
            "description": "The ID of the dispute for which to send a message.",
            "required": true,
            "type": "string"
          },
          {
            "name": "send_message",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/request-send_message.json",
              "example": {
                "message": "Shipment is in progress."
              }
            }
          }
        ],
        "security": [
          {
            "Oauth2": [
              "https://uri.paypal.com/services/disputes/update-seller"
            ]
          },
          {
            "Oauth2": [
              "https://uri.paypal.com/services/disputes/update-buyer"
            ]
          }
        ],
        "tags": [
          "disputes-actions"
        ],
        "x-slo": {
          "response_time_95th_percentile": 10000,
          "error_rate": 0.1
        },
        "x-visibility": {
          "extent": "EXTERNAL"
        }
      }
    },
    "/disputes/{dispute_id}/acknowledge-return-item": {
      "post": {
        "summary": "Acknowledge returned item",
        "description": "Acknowledges that the customer returned an item for a dispute, by ID. A merchant can make this request for disputes with the `MERCHANDISE_OR_SERVICE_NOT_AS_DESCRIBED` reason.",
        "operationId": "disputes.acknowledge-return-item",
        "responses": {
          "200": {
            "description": "A successful request returns the HTTP `200 OK` status code and a JSON response body that includes a link to the dispute.",
            "schema": {
              "$ref": "#/definitions/response-subsequent_action.json"
            }
          },
          "400": {
            "description": "The request failed due to a validation error. The request returns the HTTP `400 Bad Request` status code.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          },
          "422": {
            "description": "The requested action could not be completed. The request returns the HTTP `422 Unprocessable Entity` status code.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          },
          "500": {
            "description": "An internal server error occurred. The request returns the HTTP `500 Internal Server Error` status code.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          },
          "default": {
            "description": "The error response.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          }
        },
        "parameters": [
          {
            "name": "dispute_id",
            "in": "path",
            "description": "The ID of the dispute for which to acknowledge the return of disputed item.",
            "required": true,
            "type": "string"
          },
          {
            "name": "acknowledge-return-item-request",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/request-acknowledge_return_item.json",
              "example": {
                "note": "I have received the item back."
              }
            }
          }
        ],
        "security": [
          {
            "Oauth2": [
              "https://uri.paypal.com/services/disputes/update-seller"
            ]
          }
        ],
        "tags": [
          "disputes-actions"
        ],
        "x-slo": {
          "response_time_95th_percentile": 10000,
          "error_rate": 0.1
        },
        "x-visibility": {
          "extent": "EXTERNAL"
        }
      }
    },
    "/disputes/compute-metrics": {
      "post": {
        "summary": "Compute metrics for disputes",
        "description": "Computes metrics for all disputes.",
        "operationId": "disputes.compute-metrics",
        "responses": {
          "200": {
            "description": "A successful request returns the HTTP `200 OK` status code and a JSON response body that lists the computed metrics. Each metric includes a count of how many disputes match that metric.",
            "schema": {
              "$ref": "#/definitions/response-metrics.json"
            }
          },
          "default": {
            "description": "The error response.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          }
        },
        "parameters": [
          {
            "name": "metrics-request",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/request-metrics.json",
              "example": {
                "dimension": "STATUS",
                "measure": "COUNT"
              }
            }
          }
        ],
        "security": [
          {
            "Oauth2": [
              "https://uri.paypal.com/services/disputes/read-buyer"
            ]
          },
          {
            "Oauth2": [
              "https://uri.paypal.com/services/disputes/read-seller"
            ]
          },
          {
            "Oauth2": [
              "https://uri.paypal.com/services/disputes/read"
            ]
          }
        ],
        "tags": [
          "compute-metrics"
        ],
        "x-slo": {
          "response_time_95th_percentile": 1000,
          "error_rate": 0.1
        },
        "x-visibility": {
          "extent": "LIMITED_RELEASE"
        }
      }
    },
    "/disputes/{dispute_id}/change-reason": {
      "post": {
        "summary": "Change reason for dispute",
        "description": "Changes the reason for a dispute, by ID.",
        "operationId": "disputes.change-reason",
        "responses": {
          "200": {
            "description": "A successful request returns the HTTP `200 OK` status code and a JSON response body that includes a link that enables you to access the dispute.",
            "schema": {
              "$ref": "#/definitions/response-disputes_change_reason.json"
            }
          },
          "default": {
            "description": "The error response.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          }
        },
        "consumes": [
          "multipart/related",
          "multipart/form-data",
          "multipart/mixed"
        ],
        "parameters": [
          {
            "name": "dispute_id",
            "in": "path",
            "description": "The ID of the dispute for which to change the reason.",
            "required": true,
            "type": "string"
          },
          {
            "name": "change-reason",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/request-change_reason.json"
            }
          }
        ],
        "security": [
          {
            "Oauth2": [
              "https://uri.paypal.com/services/disputes/update-buyer"
            ]
          }
        ],
        "tags": [
          "disputes-actions"
        ],
        "x-slo": {
          "response_time_95th_percentile": 1000,
          "error_rate": 0.1
        },
        "x-visibility": {
          "extent": "LIMITED_RELEASE"
        }
      }
    },
    "/disputes/{dispute_id}/deny-offer": {
      "post": {
        "summary": "Deny offer to resolve dispute",
        "description": "Denies an offer that the merchant proposes for a dispute, by ID.",
        "operationId": "disputes.deny-offer",
        "responses": {
          "200": {
            "description": "A successful request returns the HTTP `200 OK` status code and a JSON response body that includes a link to the dispute.",
            "schema": {
              "$ref": "#/definitions/response-subsequent_action.json"
            }
          },
          "400": {
            "description": "The request failed due to a validation error. The request returns the HTTP `400 Bad Request` status code.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          },
          "422": {
            "description": "The requested action could not be completed. The request returns the HTTP `422 Unprocessable Entity` status code.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          },
          "500": {
            "description": "An internal server error occurred. The request returns the HTTP `500 Internal Server Error` status code.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          },
          "default": {
            "description": "The error response.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          }
        },
        "parameters": [
          {
            "name": "dispute_id",
            "in": "path",
            "description": "The ID of the dispute for which to deny an offer.",
            "required": true,
            "type": "string"
          },
          {
            "name": "deny-offer-request",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/request-deny_offer.json",
              "example": {
                "note": "refund offer is very low."
              }
            }
          }
        ],
        "security": [
          {
            "Oauth2": [
              "https://uri.paypal.com/services/disputes/update-buyer"
            ]
          }
        ],
        "tags": [
          "disputes-actions"
        ],
        "x-slo": {
          "response_time_95th_percentile": 10000,
          "error_rate": 0.1
        },
        "x-visibility": {
          "extent": "EXTERNAL"
        }
      }
    },
    "/disputes/search-suggestions": {
      "get": {
        "summary": "Suggestion values for search text.",
        "description": "Provides the possible auto-complete or DidYouMean values for a given search text.",
        "operationId": "disputes.search-suggestions",
        "responses": {
          "200": {
            "description": "A successful request returns the HTTP `200 OK` status code and a JSON response body that lists the possible suggested values for search text.",
            "schema": {
              "$ref": "#/definitions/response-suggestion_response.json"
            }
          },
          "400": {
            "description": "The request failed due to a validation error. The request returns the HTTP `400 Bad Request` status code.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          },
          "default": {
            "description": "The error response.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          }
        },
        "parameters": [
          {
            "name": "search_text",
            "in": "query",
            "description": "The search text for which auto complete or did you mean is requested. Supported searchable fields include counter party name/email, transaction id, invoice id and dispute id.",
            "type": "string",
            "required": true,
            "minLength": 2,
            "maxLength": 255
          },
          {
            "name": "search_field",
            "in": "query",
            "description": "The field on which the suggestions will be retrieved. Supported search fields include counter party name/email, disputed transaction id, invoice number and dispute id. If the search_field is not specified, suggestions will be retrieved over all the supported fields.",
            "type": "string",
            "required": true,
            "minLength": 2,
            "maxLength": 255,
            "x-enum": [
              {
                "value": "NAME",
                "description": "Retrieves the suggestions from the <code>NAME</code> field."
              },
              {
                "value": "EMAIL",
                "description": "Retrieves the suggestions from the <code>EMAIL</code> field."
              },
              {
                "value": "DISPUTE_ID",
                "description": "Retrieves the suggestions from the <code>DISPUTE_ID</code> field."
              },
              {
                "value": "DISPUTED_TRANSACTION_ID",
                "description": "Retrieves the suggestions from the <code>DISPUTED_TRANSACTION_ID</code> field."
              },
              {
                "value": "INVOICE_NUMBER",
                "description": "Retrieves the suggestions from the <code>INVOICE_NUMBER</code> field."
              },
              {
                "value": "ALL",
                "description": "Retrieves the suggestions from the NAME, EMAIL, DISPUTE_ID, DISPUTED_TRANSACTION_ID and INVOICE_NUMBER fields."
              }
            ]
          }
        ],
        "tags": [
          "search-suggestions"
        ],
        "x-slo": {
          "response_time_95th_percentile": 1000,
          "error_rate": 0.1
        },
        "x-visibility": {
          "extent": "INTERNAL"
        }
      }
    },
    "/validate-referred-dispute-eligibility": {
      "post": {
        "summary": "Determine eligibility for referred dispute creation",
        "description": "Determines whether you can create a referred case for a transaction, by encrypted transaction ID.",
        "operationId": "referred-disputes.validate-eligibility",
        "responses": {
          "200": {
            "description": "A successful request returns the HTTP `200 OK` status code and a JSON response body that lists the eligible and ineligible dispute reasons.",
            "schema": {
              "$ref": "#/definitions/referred-eligibility_response.json"
            }
          },
          "400": {
            "description": "The request failed due to a validation error. The request returns the HTTP `400 Bad Request` status code.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          },
          "500": {
            "description": "An internal server error occurred. The request returns the HTTP `500 Internal Server Error` status code.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          },
          "default": {
            "description": "The error response.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          }
        },
        "parameters": [
          {
            "name": "eligibility-request",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/referred-eligibility_request.json",
              "example": {
                "transaction_id": "5B527326L4712360R",
                "disputed_items": [
                  {
                    "id": "100002",
                    "category": "COMPUTERS"
                  }
                ]
              }
            }
          }
        ],
        "security": [
          {
            "Oauth2": [
              "https://uri.paypal.com/services/referred-disputes/readwrite"
            ]
          }
        ],
        "tags": [
          "validate-referred-dispute-eligibility"
        ],
        "x-slo": {
          "response_time_95th_percentile": 5000,
          "error_rate": 0.1
        },
        "x-visibility": {
          "extent": "LIMITED_RELEASE"
        }
      }
    },
    "/disputes/{dispute_id}/partner-actions/{action_id}": {
      "get": {
        "summary": "Show dispute action details",
        "description": "Shows action details for a dispute, by action ID.",
        "operationId": "disputes.partner-actions-get",
        "responses": {
          "200": {
            "description": "A successful request returns the HTTP `200 OK` status code and a JSON response body that shows action details.",
            "schema": {
              "$ref": "#/definitions/response-partner_action.json"
            }
          },
          "default": {
            "description": "The error response.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          }
        },
        "parameters": [
          {
            "name": "dispute_id",
            "in": "path",
            "description": "The ID of the dispute for which to show action details.",
            "required": true,
            "type": "string"
          },
          {
            "name": "action_id",
            "in": "path",
            "description": "The ID of the action for which to show details.",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "Oauth2": [
              "https://uri.paypal.com/services/disputes/read-partner"
            ]
          }
        ],
        "tags": [
          "partner-actions"
        ],
        "x-slo": {
          "response_time_95th_percentile": 3000,
          "error_rate": 0.1
        },
        "x-visibility": {
          "extent": "LIMITED_RELEASE"
        }
      },
      "patch": {
        "summary": "Partially update dispute action",
        "description": "Partially updates a dispute action, by ID. You can update the `status` and `amount` value.",
        "operationId": "disputes.partner-actions-patch",
        "responses": {
          "204": {
            "description": "A successful request returns the HTTP `204 No Content` status code with no JSON response body."
          },
          "400": {
            "description": "The request failed due to a validation error. The request returns the HTTP `400 Bad Request` status code.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          },
          "422": {
            "description": "The requested action could not be completed. The request returns the HTTP `422 Unprocessable Entity` status code.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          },
          "500": {
            "description": "An internal server error occurred. The request returns the HTTP `500 Internal Server Error` status code.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          },
          "default": {
            "description": "The error response.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          }
        },
        "parameters": [
          {
            "name": "dispute_id",
            "in": "path",
            "description": "The ID of the dispute for which to update action details.",
            "required": true,
            "type": "string"
          },
          {
            "name": "action_id",
            "in": "path",
            "description": "The ID of the action for which to show details.",
            "required": true,
            "type": "string"
          },
          {
            "name": "patch_request",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-patch_request.json",
              "example": [
                {
                  "op": "replace",
                  "path": "/status",
                  "value": "COMPLETED"
                },
                {
                  "op": "replace",
                  "path": "/amount",
                  "value": {
                    "currency_code": "USD",
                    "value": "50.00"
                  }
                }
              ]
            }
          }
        ],
        "security": [
          {
            "Oauth2": [
              "https://uri.paypal.com/services/disputes/update-partner"
            ]
          }
        ],
        "tags": [
          "partner-actions"
        ],
        "x-slo": {
          "response_time_95th_percentile": 5000,
          "error_rate": 0.1
        },
        "x-visibility": {
          "extent": "LIMITED_RELEASE"
        }
      }
    },
    "/referred-disputes/{dispute_id}": {
      "get": {
        "summary": "Show referred dispute details",
        "description": "Shows details for a referred dispute, by ID.",
        "operationId": "referred-disputes.get",
        "responses": {
          "200": {
            "description": "A successful request returns the HTTP `200 OK` status code and a JSON response body that shows dispute details.",
            "schema": {
              "$ref": "#/definitions/referred-dispute.json"
            }
          },
          "default": {
            "description": "The error response.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          }
        },
        "parameters": [
          {
            "name": "dispute_id",
            "in": "path",
            "description": "The ID of the dispute for which to show details.",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "Oauth2": [
              "https://uri.paypal.com/services/referred-disputes/readwrite"
            ]
          }
        ],
        "tags": [
          "referred-disputes"
        ],
        "x-slo": {
          "response_time_95th_percentile": 5000,
          "error_rate": 0.1
        },
        "x-visibility": {
          "extent": "LIMITED_RELEASE"
        }
      }
    },
    "/disputes/{dispute_id}/provide-supporting-info": {
      "post": {
        "summary": "Provide supporting information for dispute",
        "description": "Provides supporting information for a dispute, by ID. A merchant or buyer can make this request for disputes if they find the `provide-supporting-info` link in the HATEOAS links in the list disputes response. The party can provide the supporting information to PayPal to defend themselves only when the `dispute_life_cycle_stage` is `CHARGEBACK`, `PRE_ARBITRATION`, or `ARBITRATION`. They can provide a note that describes their part with details or upload any supporting documents to support their side. The following rules apply to document file types and sizes:<ul><li>The party can upload up to 10 MB of files for a case.</li><li>Individual files must be smaller than 5 MB.</li><li>The supported file formats are JPG, GIF, PNG, and PDF.</li></ul><br/>To make this request, specify the dispute ID in the URI and specify the notes in the JSON request body. This method differs from the provide evidence method which supports only multipart request, where PayPal asks the concerned party for evidence.",
        "operationId": "disputes.provide-supporting-info",
        "responses": {
          "200": {
            "description": "A successful request returns the HTTP `200 OK` status code and a JSON response body that includes a link to the dispute.",
            "schema": {
              "$ref": "#/definitions/response-subsequent_action.json"
            }
          },
          "400": {
            "description": "The request failed due to a validation error. The request returns the HTTP `400 Bad Request` status code.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          },
          "404": {
            "description": "The request failed due to the dispute is not available. The request returns the HTTP `404 Not Found` status code.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          },
          "422": {
            "description": "The requested action could not be completed. The request returns the HTTP `422 Unprocessable Entity` status code.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          },
          "500": {
            "description": "An internal server error occurred. The request returns the HTTP `500 Internal Server Error` status code.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          },
          "default": {
            "description": "The error response.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          }
        },
        "consumes": [
          "application/json",
          "multipart/related",
          "multipart/form-data",
          "multipart/mixed"
        ],
        "parameters": [
          {
            "name": "dispute_id",
            "in": "path",
            "description": "The ID of the dispute for which to provide the supporting information.",
            "required": true,
            "type": "string"
          },
          {
            "name": "provide-supporting-info-request",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/request-provide_supporting_info.json",
              "example": {
                "notes": "Sample notes"
              }
            }
          },
          {
            "name": "supporting document",
            "in": "formData",
            "description": "A file with evidence.",
            "type": "file"
          }
        ],
        "security": [
          {
            "Oauth2": [
              "https://uri.paypal.com/services/disputes/update-seller",
              "https://uri.paypal.com/services/disputes/update-buyer",
              "https://uri.paypal.com/services/disputes/update-partner"
            ]
          }
        ],
        "tags": [
          "disputes-actions"
        ],
        "x-slo": {
          "response_time_95th_percentile": 10000,
          "error_rate": 0.1
        },
        "x-visibility": {
          "extent": "EXTERNAL"
        }
      }
    },
    "/disputes/{dispute_id}/make-offer": {
      "post": {
        "summary": "Make offer to resolve dispute",
        "description": "Makes an offer to the other party to resolve a dispute, by ID. To make this call, the stage in the dispute lifecycle must be `INQUIRY`. If the customer accepts the offer, PayPal automatically makes a refund.",
        "operationId": "disputes.make-offer",
        "responses": {
          "200": {
            "description": "A successful request returns the HTTP `200 OK` status code and a JSON response body that includes a link to the dispute.",
            "schema": {
              "$ref": "#/definitions/response-subsequent_action.json"
            }
          },
          "400": {
            "description": "The request failed due to a validation error. The request returns the HTTP `400 Bad Request` status code.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          },
          "422": {
            "description": "The requested action could not be completed. The request returns the HTTP `422 Unprocessable Entity` status code.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          },
          "500": {
            "description": "An internal server error occurred. The request returns the HTTP `500 Internal Server Error` status code.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          },
          "default": {
            "description": "The error response.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          }
        },
        "parameters": [
          {
            "name": "dispute_id",
            "in": "path",
            "description": "The ID of the dispute for which to make an offer.",
            "required": true,
            "type": "string"
          },
          {
            "name": "make-offer-request",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/request-make_offer.json",
              "example": {
                "note": "Offer refund with replacement item.",
                "offer_amount": {
                  "currency_code": "USD",
                  "value": "23"
                },
                "offer_type": "REFUND_WITH_REPLACEMENT"
              }
            }
          }
        ],
        "security": [
          {
            "Oauth2": [
              "https://uri.paypal.com/services/disputes/update-seller"
            ]
          },
          {
            "Oauth2": [
              "https://uri.paypal.com/services/disputes/update-buyer"
            ]
          }
        ],
        "tags": [
          "disputes-actions"
        ],
        "x-slo": {
          "response_time_95th_percentile": 10000,
          "error_rate": 0.1
        },
        "x-visibility": {
          "extent": "EXTERNAL"
        }
      }
    },
    "/disputes/{dispute_id}/provide-evidence": {
      "post": {
        "summary": "Provide evidence",
        "description": "Provides evidence for a dispute, by ID. A merchant can provide evidence for disputes with the <code>WAITING_FOR_SELLER_RESPONSE</code> status while customers can provide evidence for disputes with the <code>WAITING_FOR_BUYER_RESPONSE</code> status. Evidence can be a proof of delivery or proof of refund document or notes, which can include logs. A proof of delivery document includes a tracking number while a proof of refund document includes a refund ID. The following rules apply to document file types and sizes:<ul><li>The merchant can upload up to 50 MB of files for a case.</li><li>Individual files must be smaller than 10 MB.</li><li>The supported file formats are JPG, GIF, PNG, and PDF.</li></ul><br/>To make this request, specify the dispute ID in the URI and specify the evidence in the JSON request body. For information about dispute reasons, see <a href=\"/docs/integration/direct/customer-disputes/integration-guide/#dispute-reasons\">dispute reasons</a>.",
        "operationId": "disputes.provide-evidence",
        "responses": {
          "200": {
            "description": "A successful request returns the HTTP `200 OK` status code and a JSON response body that includes a link to the dispute.",
            "schema": {
              "$ref": "#/definitions/response-subsequent_action.json"
            }
          },
          "default": {
            "description": "The error response.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          }
        },
        "consumes": [
          "multipart/related",
          "multipart/form-data",
          "multipart/mixed"
        ],
        "parameters": [
          {
            "name": "dispute_id",
            "in": "path",
            "description": "The ID of the dispute for which to submit evidence.",
            "required": true,
            "type": "string"
          },
          {
            "name": "evidence",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/request-evidences.json"
            }
          },
          {
            "name": "evidence",
            "in": "formData",
            "description": "A file with evidence.",
            "required": true,
            "type": "file"
          }
        ],
        "security": [
          {
            "Oauth2": [
              "https://uri.paypal.com/services/disputes/update-seller"
            ]
          },
          {
            "Oauth2": [
              "https://uri.paypal.com/services/disputes/update-buyer"
            ]
          }
        ],
        "tags": [
          "disputes-actions"
        ],
        "x-slo": {
          "response_time_95th_percentile": 1000,
          "error_rate": 0.1
        },
        "x-visibility": {
          "extent": "EXTERNAL"
        }
      }
    },
    "/disputes/{dispute_id}/accept-offer": {
      "post": {
        "summary": "Accept offer to resolve dispute",
        "description": "The customer accepts the offer from merchant to resolve a dispute, by ID. PayPal automatically refunds the amount proposed by merchant to the customer.",
        "operationId": "disputes.accept-offer",
        "responses": {
          "200": {
            "description": "A successful request returns the HTTP `200 OK` status code and a JSON response body that includes a link to the dispute.",
            "schema": {
              "$ref": "#/definitions/response-subsequent_action.json"
            }
          },
          "400": {
            "description": "The request failed due to a validation error. The request returns the HTTP `400 Bad Request` status code.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          },
          "422": {
            "description": "The requested action could not be completed. The request returns the HTTP `422 Unprocessable Entity` status code.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          },
          "500": {
            "description": "An internal server error occurred. The request returns the HTTP `500 Internal Server Error` status code.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          },
          "default": {
            "description": "The error response.",
            "schema": {
              "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error.json"
            }
          }
        },
        "parameters": [
          {
            "name": "dispute_id",
            "in": "path",
            "description": "The ID of the dispute for which to accept an offer.",
            "required": true,
            "type": "string"
          },
          {
            "name": "accept-offer-request",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/request-accept_offer.json",
              "example": {
                "note": "I am ok with the refund offered."
              }
            }
          }
        ],
        "security": [
          {
            "Oauth2": [
              "https://uri.paypal.com/services/disputes/update-buyer"
            ]
          }
        ],
        "tags": [
          "disputes-actions"
        ],
        "x-slo": {
          "response_time_95th_percentile": 10000,
          "error_rate": 0.1
        },
        "x-visibility": {
          "extent": "EXTERNAL"
        }
      }
    }
  },
  "tags": [
    {
      "name": "disputes",
      "description": "Use the `/disputes` resource to list disputes, create disputes, show dispute details, and partially a dispute. Normally, an agent at PayPal creates disputes but now you can run test cases in the sandbox that create disputes."
    },
    {
      "name": "disputes-actions",
      "description": "Use the `/disputes` resource with a dispute ID and an action to:<ul><li>Accept a claim.</li><li>Accept an offer to resolve a dispute.</li><li>Acknowledge the return of an item related to a dispute.</li><li>Settle a dispute.</li><li>Appeal a dispute.</li><li>Cancel a dispute.</li><li>Change the reason for a dispute.</li><li>Deny an offer to resolve dispute.</li><li>Escalate a dispute to a claim.</li><li>Make an offer to resolve a dispute.</li><li>Make an offer to resolve a dispute.</li><li>Provide evidence for a dispute.</li><li>Provide supporting information for dispute.</li><li>In the sandbox, update the dispute status.</li><li>Send a message about a dispute to the other party in the dispute.</li><ul>"
    },
    {
      "name": "referred-disputes",
      "description": "Use the `/customer/referred-disputes` resource to create a dispute for a referred case that was created by a partner or marketplace, show details for a referred dispute, by ID, notify referred refunds completed to PayPal, notify PayPal about referred dispute adjudication updates, and determine the dispute eligibility for referred disputes."
    },
    {
      "name": "validate-eligibility",
      "description": "Use the `/validate-eligibility/` resource to determine whether you can create a case for a transaction."
    },
    {
      "name": "compute-metrics",
      "description": "Use the `/compute-metrics` resource to provide metrics for all disputes."
    },
    {
      "name": "validate-referred-dispute-eligibility",
      "description": "Use the `/validate-referred-dispute-eligibility` resource to determine whether you can create a referred case for a transaction, by encrypted transaction ID."
    },
    {
      "name": "referred-disputes",
      "description": "Use the `/referred-disputes` resource to create a dispute for a referred case that was created by a partner or marketplace, show details for a referred dispute, by ID, notify referred refunds completed to PayPal, notify PayPal about referred dispute adjudication updates, and determine the dispute eligibility for referred disputes."
    },
    {
      "name": "referred-disputes-actions",
      "description": "Use the `/referred-disputes` resource with a dispute ID and an action to notify PayPal about adjudication updates for a referred dispute and notify PayPal about a refund for a referred dispute."
    },
    {
      "name": "partner-actions",
      "description": "Use the `/disputes/{id}/partner-actions/` resource to show dispute action details and partially update a dispute action."
    },
    {
      "name": "search-suggestions",
      "description": "Use the `/search-suggestions` resource to show search suggestions."
    }
  ],
  "externalDocs": {
    "url": "/docs/integration/direct/customer-disputes/"
  },
  "definitions": {
    "response-dispute_search.json": {
      "type": "object",
      "title": "Dispute Search Response",
      "description": "An array of disputes. Includes links that enable you to navigate through the response.",
      "x-visibility": {
        "extent": "EXTERNAL"
      },
      "properties": {
        "items": {
          "type": "array",
          "description": "An array of disputes that match the filter criteria. Sorted in latest to earliest creation time order.",
          "items": {
            "$ref": "#/definitions/response-dispute_info.json",
            "x-publicDocsSchemaName": "dispute_info"
          }
        },
        "total_items": {
          "type": "integer",
          "minimum": 0,
          "maximum": 500000,
          "readOnly": true,
          "description": "The total number of items. If the request specifies `total_required=true`, appears in the response.",
          "x-visibility": {
            "extent": "INTERNAL"
          }
        },
        "total_pages": {
          "type": "integer",
          "minimum": 0,
          "maximum": 500000,
          "readOnly": true,
          "description": "The total number of pages. If the request specifies `total_required=true`, appears in the response.",
          "x-visibility": {
            "extent": "INTERNAL"
          }
        },
        "links": {
          "type": "array",
          "description": "An array of request-related [HATEOAS links](/docs/api/hateoas-links/).",
          "readOnly": true,
          "items": {
            "x-publicDocsSchemaName": "link_description",
            "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-link_description.json",
            "readOnly": true
          }
        }
      },
      "x-links": [
        {
          "rel": "first",
          "href": "https://api.paypal.com/v1/customer/disputes?page_size={page_size}&start_time={start_time}"
        },
        {
          "rel": "self",
          "href": "https://api.paypal.com/v1/customer/disputes?page_size={page_size}&next_page_token={next_page_token}&start_time={start_time}"
        },
        {
          "rel": "next",
          "href": "https://api.paypal.com/v1/customer/disputes?page_size={page_size}&next_page_token={next_page_token}&start_time={start_time}"
        }
      ],
      "x-publicDocsSchemaName": "dispute_search"
    },
    "response-dispute_info.json": {
      "type": "object",
      "title": "Dispute Summary Information",
      "description": "The dispute summary information.",
      "properties": {
        "dispute_id": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "readOnly": true,
          "description": "The ID of the dispute."
        },
        "create_time": {
          "readOnly": true,
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-date_time.json",
          "description": "The date and time when the dispute was created, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *`yyyy`*-*`MM`*-*`dd`*`T`*`HH`*:*`mm`*:*`ss`*.*`SSS`*`Z`."
        },
        "update_time": {
          "readOnly": true,
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-date_time.json",
          "description": "The date and time when the dispute was last updated, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *`yyyy`*-*`MM`*-*`dd`*`T`*`HH`*:*`mm`*:*`ss`*.*`SSS`*`Z`."
        },
        "disputed_transactions": {
          "type": "array",
          "description": "An array of transactions for which disputes were created.",
          "items": {
            "$ref": "#/definitions/response-transaction_info.json",
            "x-publicDocsSchemaName": "transaction_info"
          }
        },
        "disputed_account_activities": {
          "type": "array",
          "description": "An array of merchant account activities.",
          "x-visibility": {
            "extent": "INTERNAL"
          },
          "items": {
            "x-publicDocsSchemaName": "account_activity",
            "$ref": "#/definitions/response-account_activity.json",
            "x-visibility": {
              "extent": "INTERNAL"
            }
          }
        },
        "reason": {
          "$ref": "#/definitions/response-dispute_reason.json",
          "x-publicDocsSchemaName": "dispute_reason"
        },
        "status": {
          "readOnly": true,
          "$ref": "#/definitions/response-status.json",
          "x-publicDocsSchemaName": "status"
        },
        "dispute_state": {
          "readOnly": true,
          "$ref": "#/definitions/response-dispute_state.json",
          "x-publicDocsSchemaName": "dispute_state"
        },
        "dispute_amount": {
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-money.json",
          "description": "The amount in the transaction that the customer originally disputed. Because customers can sometimes dispute only part of the payment, the disputed amount might be different from the total gross or net amount of the original transaction."
        },
        "dispute_fee": {
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-money.json",
          "description": "The fee in the disputed transaction.",
          "x-visibility": {
            "extent": "INTERNAL"
          }
        },
        "external_reason_code": {
          "type": "string",
          "minLength": 1,
          "maxLength": 2000,
          "readOnly": true,
          "description": "The code that identifies the reason for the credit card chargeback. Each card issuer follows their own standards for defining reason type, code, and its format. For more details about the external reason code, see the card issue site. Available for only unbranded transactions."
        },
        "dispute_outcome": {
          "readOnly": true,
          "$ref": "#/definitions/response-dispute_outcome.json",
          "x-publicDocsSchemaName": "dispute_outcome"
        },
        "dispute_life_cycle_stage": {
          "readOnly": true,
          "$ref": "#/definitions/response-dispute_lifecycle_stage.json",
          "x-publicDocsSchemaName": "dispute_lifecycle_stage"
        },
        "dispute_channel": {
          "readOnly": true,
          "$ref": "#/definitions/response-dispute_channel.json",
          "x-publicDocsSchemaName": "dispute_channel"
        },
        "messages": {
          "type": "array",
          "description": "An array of customer- or merchant-posted messages for the dispute.",
          "items": {
            "$ref": "#/definitions/response-message.json",
            "x-publicDocsSchemaName": "message"
          }
        },
        "extensions": {
          "$ref": "#/definitions/response-extensions.json",
          "x-visibility": {
            "extent": "LIMITED_RELEASE"
          }
        },
        "evidences": {
          "type": "array",
          "description": "An array of evidence documents.",
          "items": {
            "$ref": "#/definitions/response-evidence.json",
            "x-publicDocsSchemaName": "response_evidence"
          }
        },
        "buyer_response_due_date": {
          "readOnly": true,
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-date_time.json",
          "description": "The date and time by when the customer must respond to the dispute, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). If the customer does not respond by this date and time, the dispute is closed in the merchant's favor. For example, *`yyyy`*-*`MM`*-*`dd`*`T`*`HH`*:*`mm`*:*`ss`*.*`SSS`*`Z`."
        },
        "seller_response_due_date": {
          "readOnly": true,
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-date_time.json",
          "description": "The date and time by when the merchant must respond to the dispute, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). If the merchant does not respond by this date and time, the dispute is closed in the customer's favor. For example, *`yyyy`*-*`MM`*-*`dd`*`T`*`HH`*:*`mm`*:*`ss`*.*`SSS`*`Z`."
        },
        "history": {
          "type": "array",
          "description": "An array of history objects.",
          "x-publicDocsSchemaName": "history_list",
          "x-visibility": {
            "extent": "INTERNAL"
          },
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/response-history.json",
            "x-publicDocsSchemaName": "history"
          }
        },
        "dispute_flow": {
          "readOnly": true,
          "$ref": "#/definitions/response-dispute_flow.json",
          "x-publicDocsSchemaName": "dispute_flow",
          "x-visibility": {
            "extent": "INTERNAL"
          }
        },
        "offer": {
          "readOnly": true,
          "$ref": "#/definitions/response-offer.json",
          "x-publicDocsSchemaName": "offer"
        },
        "refund_details": {
          "readOnly": true,
          "$ref": "#/definitions/response-refund_details.json",
          "x-publicDocsSchemaName": "response_refund_details",
          "x-visibility": {
            "extent": "INTERNAL"
          }
        },
        "communication_details": {
          "$ref": "#/definitions/response-communication_details.json",
          "x-publicDocsSchemaName": "communication_details"
        },
        "partner_actions": {
          "type": "array",
          "description": "An array of all the actions that are associated to this dispute.",
          "items": {
            "$ref": "#/definitions/response-partner_action.json",
            "x-publicDocsSchemaName": "partner_action"
          }
        },
        "supporting_info": {
          "type": "array",
          "readOnly": true,
          "description": "An array of all the supporting information that are associated to this dispute.",
          "items": {
            "$ref": "#/definitions/response-supporting_info.json",
            "x-publicDocsSchemaName": "supporting_info"
          }
        },
        "links": {
          "type": "array",
          "description": "An array of request-related [HATEOAS links](/docs/api/hateoas-links/).",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-link_description.json",
            "x-publicDocsSchemaName": "link_description",
            "readOnly": true
          }
        }
      },
      "x-links": [
        {
          "href": "https://api.paypal.com/v1/customer/disputes/{dispute_id}",
          "rel": "self",
          "method": "GET"
        },
        {
          "href": "https://api.paypal.com/v1/customer/disputes/{dispute_id}",
          "rel": "edit",
          "method": "PATCH"
        },
        {
          "href": "https://api.paypal.com/v1/customer/disputes/{dispute_id}/provide-evidence",
          "rel": "provide_evidence",
          "method": "POST"
        },
        {
          "href": "https://api.paypal.com/v1/customer/disputes/{dispute_id}/appeal",
          "rel": "appeal",
          "method": "POST"
        },
        {
          "href": "https://api.paypal.com/v1/customer/disputes/{dispute_id}/cancel",
          "rel": "cancel",
          "method": "POST"
        },
        {
          "href": "https://api.paypal.com/v1/customer/disputes/{dispute_id}/cancel",
          "rel": "cancel_unauthorized_transaction",
          "method": "POST"
        },
        {
          "href": "https://api.paypal.com/v1/customer/disputes/{dispute_id}/accept-claim",
          "rel": "accept_claim",
          "method": "POST"
        },
        {
          "href": "https://api.paypal.com/v1/customer/disputes/{dispute_id}/make-offer",
          "rel": "make-offer",
          "method": "POST"
        },
        {
          "href": "https://api.paypal.com/v1/customer/disputes/{dispute_id}/send-message",
          "rel": "send-message",
          "method": "POST"
        },
        {
          "href": "https://api.paypal.com/v1/customer/disputes/{dispute_id}/escalate",
          "rel": "escalate",
          "method": "POST"
        },
        {
          "href": "https://api.paypal.com/v1/customer/disputes/{dispute_id}/provide-supporting-info",
          "rel": "provide_supporting_info",
          "method": "POST"
        }
      ],
      "x-publicDocsSchemaName": "dispute_info"
    },
    "common_components-v3-schema-json-openapi-2.0-date_time.json": {
      "type": "string",
      "description": "The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>",
      "format": "ppaas_date_time_v3",
      "minLength": 20,
      "maxLength": 64,
      "pattern": "^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])[T,t]([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)([.][0-9]+)?([Zz]|[+-][0-9]{2}:[0-9]{2})$",
      "properties": {}
    },
    "response-transaction_info.json": {
      "type": "object",
      "title": "Transaction Information",
      "description": "The information about the disputed transaction.",
      "properties": {
        "buyer_transaction_id": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The ID, as seen by the customer, for this transaction."
        },
        "seller_transaction_id": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The ID, as seen by the merchant, for this transaction."
        },
        "create_time": {
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-date_time.json",
          "description": "The date and time when the transaction was created, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *`yyyy`*-*`MM`*-*`dd`*`T`*`HH`*:*`mm`*:*`ss`*.*`SSS`*`Z`."
        },
        "transaction_status": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The transaction status.",
          "x-enum": [
            {
              "value": "COMPLETED",
              "description": "The transaction processing completed."
            },
            {
              "value": "UNCLAIMED",
              "description": "The items in the transaction are unclaimed. If they are not claimed within 30 days, the funds are returned to the sender."
            },
            {
              "value": "DENIED",
              "description": "The transaction was denied."
            },
            {
              "value": "FAILED",
              "description": "The transaction failed."
            },
            {
              "value": "HELD",
              "description": "The transaction is on hold."
            },
            {
              "value": "PENDING",
              "description": "The transaction is waiting to be processed."
            },
            {
              "value": "PARTIALLY_REFUNDED",
              "description": "The payment for the transaction was partially refunded."
            },
            {
              "value": "REFUNDED",
              "description": "The payment for the transaction was successfully refunded."
            },
            {
              "value": "REVERSED",
              "description": "The payment for the transaction was reversed due to a chargeback or other reversal type."
            },
            {
              "value": "CANCELLED",
              "description": "The transaction is cancelled."
            }
          ]
        },
        "gross_amount": {
          "description": "The gross amount of the transaction.",
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-money.json"
        },
        "invoice_number": {
          "type": "string",
          "minLength": 1,
          "maxLength": 127,
          "description": "The ID of the invoice for the payment."
        },
        "custom": {
          "type": "string",
          "minLength": 1,
          "maxLength": 2000,
          "description": "A free-text field that is entered by the merchant during checkout."
        },
        "buyer": {
          "$ref": "#/definitions/response-buyer.json",
          "x-publicDocsSchemaName": "buyer"
        },
        "seller": {
          "$ref": "#/definitions/response-seller.json",
          "x-publicDocsSchemaName": "seller"
        },
        "facilitator": {
          "x-visibility": {
            "extent": "INTERNAL"
          },
          "$ref": "#/definitions/response-facilitator.json"
        },
        "items": {
          "type": "array",
          "readOnly": true,
          "description": "An array of items that were purchased as part of the transaction.",
          "items": {
            "$ref": "#/definitions/response-item_info.json",
            "x-publicDocsSchemaName": "item_info"
          }
        },
        "seller_protection_eligible": {
          "type": "boolean",
          "readOnly": true,
          "description": "Indicates whether the merchant is eligible for protection on the disputed transaction.",
          "x-visibility": {
            "extent": "INTERNAL"
          }
        },
        "seller_protection_type": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "readOnly": true,
          "description": "Indicates the type of protection the merchant is eligible on the disputed transaction.",
          "x-enum": [
            {
              "value": "EXPANDED_SELLER_PROTECTION",
              "description": "Merchants are covered under seller protection provided they have responded with valid evidence."
            },
            {
              "value": "EFFORTLESS_SELLER_PROTECTION",
              "description": "Merchants are eligible for seller protection irrespective of them responding with the proof of shipment/delivery."
            },
            {
              "value": "DOUBLE_JEOPARDY_PROTECTION",
              "description": "Merchants are protected in the subsequent case if an internal case is communicated as resolved in merchant favor."
            }
          ],
          "x-visibility": {
            "extent": "INTERNAL"
          }
        },
        "regulation_info": {
          "$ref": "#/definitions/response-regulation_info.json",
          "x-publicDocsSchemaName": "regulation_info",
          "x-visibility": {
            "extent": "INTERNAL"
          }
        },
        "provisional_credit_status": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The provisional credit status.",
          "x-visibility": {
            "extent": "INTERNAL"
          },
          "x-enum": [
            {
              "value": "NOT_APPLICABLE",
              "description": "Not applicable."
            },
            {
              "value": "APPLIED",
              "description": "The provisional credit was applied."
            },
            {
              "value": "NOT_APPLIED",
              "description": "The provisional credit was not applied."
            },
            {
              "value": "REVERSED",
              "description": "The provisional credit was refunded."
            },
            {
              "value": "PENDING_DEBIT",
              "description": "The provisional credit in pending debit."
            }
          ]
        }
      },
      "x-publicDocsSchemaName": "transaction_info"
    },
    "common_components-v3-schema-json-openapi-2.0-money.json": {
      "type": "object",
      "title": "Money",
      "description": "The currency and amount for a financial transaction, such as a balance or payment due.",
      "properties": {
        "currency_code": {
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-currency_code.json"
        },
        "value": {
          "type": "string",
          "description": "The value, which might be:<ul><li>An integer for currencies like `JPY` that are not typically fractional.</li><li>A decimal fraction for currencies like `TND` that are subdivided into thousandths.</li></ul>For the required number of decimal places for a currency code, see [Currency codes - ISO 4217](https://www.iso.org/iso-4217-currency-codes.html).",
          "maxLength": 32,
          "pattern": "^((-?[0-9]+)|(-?([0-9]+)?[.][0-9]+))$"
        }
      },
      "required": [
        "currency_code",
        "value"
      ]
    },
    "common_components-v3-schema-json-openapi-2.0-currency_code.json": {
      "description": "The [three-character ISO-4217 currency code](/docs/integration/direct/rest/currency-codes/) that identifies the currency.",
      "type": "string",
      "format": "ppaas_common_currency_code_v2",
      "minLength": 3,
      "maxLength": 3,
      "properties": {}
    },
    "response-buyer.json": {
      "type": "object",
      "title": "Customer",
      "description": "The details for the customer who funds the payment. For example, the customer's first name, last name, and email address.",
      "properties": {
        "email": {
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-email_address.json",
          "description": "The email address for the customer's PayPal account.",
          "x-visibility": {
            "extent": "INTERNAL"
          }
        },
        "payer_id": {
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-payer_id.json",
          "description": "The Payer ID of the Buyer.",
          "x-visibility": {
            "extent": "INTERNAL"
          }
        },
        "name": {
          "type": "string",
          "minLength": 1,
          "maxLength": 2000,
          "description": "The customer's name."
        }
      },
      "x-publicDocsSchemaName": "buyer"
    },
    "common_components-v3-schema-json-openapi-2.0-email_address.json": {
      "type": "string",
      "description": "The internationalized email address.<blockquote><strong>Note:</strong> Up to 64 characters are allowed before and 255 characters are allowed after the <code>@</code> sign. However, the generally accepted maximum length for an email address is 254 characters. The pattern verifies that an unquoted <code>@</code> sign exists.</blockquote>",
      "format": "ppaas_common_email_address_v2",
      "minLength": 3,
      "maxLength": 254,
      "pattern": "^.+@[^\"\\-].+$",
      "properties": {}
    },
    "common_components-v3-schema-json-openapi-2.0-payer_id.json": {
      "type": "string",
      "description": "The PayPal payer ID, which is a masked version of the PayPal account number intended for use with third parties. The account number is reversibly encrypted and a proprietary variant of Base32 is used to encode the result.",
      "format": "ppaas_payer_id_v3",
      "minLength": 13,
      "maxLength": 13,
      "pattern": "^[2-9A-HJ-NP-Z]{13}$",
      "properties": {}
    },
    "response-seller.json": {
      "type": "object",
      "title": "Merchant",
      "description": "The details for the merchant who receives the funds and fulfills the order. For example, merchant ID, and contact email address.",
      "properties": {
        "email": {
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-email_address.json",
          "description": "The email address for the merchant's PayPal account."
        },
        "merchant_id": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The PayPal account ID for the merchant."
        },
        "name": {
          "type": "string",
          "minLength": 1,
          "maxLength": 2000,
          "description": "The name of the merchant."
        }
      },
      "x-publicDocsSchemaName": "seller"
    },
    "response-facilitator.json": {
      "type": "object",
      "title": "Facilitator",
      "description": "A resource representing a Facilitator/Partner who facilitates a transaction.",
      "properties": {
        "name": {
          "type": "string",
          "minLength": 1,
          "maxLength": 2000,
          "description": "The name of the Facilitator."
        }
      },
      "x-publicDocsSchemaName": "facilitator"
    },
    "response-item_info.json": {
      "type": "object",
      "title": "Item Information",
      "description": "The information for a purchased item in a disputed transaction.",
      "properties": {
        "item_id": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The item ID. If the merchant provides multiple pieces of evidence and the transaction has multiple item IDs, the merchant can use this value to associate a piece of evidence with an item ID."
        },
        "item_description": {
          "type": "string",
          "minLength": 1,
          "maxLength": 2000,
          "description": "The item description."
        },
        "item_quantity": {
          "type": "string",
          "description": "The count of the item in the dispute. Must be a whole number.",
          "maxLength": 10,
          "pattern": "^[1-9][0-9]{0,9}$"
        },
        "partner_transaction_id": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The ID of the transaction in the partner system. The partner transaction ID is returned at an item level because the partner might show different transactions for different items in the cart."
        },
        "reason": {
          "$ref": "#/definitions/response-dispute_reason.json"
        },
        "dispute_amount": {
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-money.json",
          "description": "The amount of the item in the dispute."
        },
        "notes": {
          "type": "string",
          "minLength": 1,
          "maxLength": 2000,
          "description": "Any notes provided with the item."
        }
      },
      "x-publicDocsSchemaName": "item_info"
    },
    "response-dispute_reason.json": {
      "type": "string",
      "minLength": 1,
      "maxLength": 255,
      "title": "Dispute Reason",
      "description": "The reason for the item-level dispute. For information about the required information for each dispute reason and associated evidence type, see <a href=\"/docs/integration/direct/customer-disputes/integration-guide/#dispute-reasons\">dispute reasons</a>.",
      "x-enum": [
        {
          "value": "MERCHANDISE_OR_SERVICE_NOT_RECEIVED",
          "description": "The customer did not receive the merchandise or service."
        },
        {
          "value": "MERCHANDISE_OR_SERVICE_NOT_AS_DESCRIBED",
          "description": "The customer reports that the merchandise or service is not as described."
        },
        {
          "value": "UNAUTHORISED",
          "description": "The customer did not authorize purchase of the merchandise or service."
        },
        {
          "value": "CREDIT_NOT_PROCESSED",
          "description": "The refund or credit was not processed for the customer."
        },
        {
          "value": "DUPLICATE_TRANSACTION",
          "description": "The transaction was a duplicate."
        },
        {
          "value": "INCORRECT_AMOUNT",
          "description": "The customer was charged an incorrect amount."
        },
        {
          "value": "PAYMENT_BY_OTHER_MEANS",
          "description": "The customer paid for the transaction through other means."
        },
        {
          "value": "CANCELED_RECURRING_BILLING",
          "description": "The customer was being charged for a subscription or a recurring transaction that was canceled."
        },
        {
          "value": "PROBLEM_WITH_REMITTANCE",
          "description": "A problem occurred with the remittance."
        },
        {
          "value": "OTHER",
          "description": "Other."
        }
      ],
      "x-publicDocsSchemaName": "reason",
      "properties": {}
    },
    "response-regulation_info.json": {
      "type": "object",
      "title": "Regulation Information",
      "description": "The details for the regulation under which the transaction is covered.",
      "x-visibility": {
        "extent": "INTERNAL"
      },
      "properties": {
        "regulation_covered": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The regulation under which the transaction is covered.",
          "x-enum": [
            {
              "value": "NONE",
              "description": "No regulation."
            },
            {
              "value": "REG_E",
              "description": "E regulation."
            },
            {
              "value": "REG_Z",
              "description": "Z regulation."
            },
            {
              "value": "REG_ZCAD",
              "description": "ZCAD regulation."
            },
            {
              "value": "PPBP",
              "description": "PPBP regulation."
            },
            {
              "value": "DEFERRED_CLAIM",
              "description": "Deferred claim regulation."
            },
            {
              "value": "LUX_AGGR",
              "description": "LUX AGGR regulation."
            }
          ]
        },
        "resolution_sla": {
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-date_time.json",
          "description": "The date and time when the dispute must be resolved, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6)."
        }
      },
      "x-publicDocsSchemaName": "regulation_info"
    },
    "response-account_activity.json": {
      "type": "object",
      "title": "Account Activity",
      "description": "The information about the account-related activities.",
      "x-visibility": {
        "extent": "INTERNAL"
      },
      "properties": {
        "id": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "readOnly": true,
          "description": "The ID of the activity log entry."
        },
        "create_time": {
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-date_time.json",
          "description": "The date and time when the activity occurred, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6)."
        },
        "entity_type": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The entity type on which the activity was completed.",
          "x-enum": [
            {
              "value": "EMAIL",
              "description": "The account change occurred to an email."
            },
            {
              "value": "PHONE",
              "description": "The account change occurred to a phone number."
            },
            {
              "value": "ADDRESS",
              "description": "The account change occurred to an address."
            },
            {
              "value": "ACCOUNT",
              "description": "The account change occurred to the account itself."
            },
            {
              "value": "FUNDING_INSTRUMENT",
              "description": "The account change occurred to a funding instrument."
            },
            {
              "value": "OTHER",
              "description": "The account change was other."
            },
            {
              "value": "DEVICE",
              "description": "The account change occurred to a device."
            }
          ]
        },
        "entity_subtype": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The entity subtype on which the activity was completed. For example, `CREDIT_CARD` is a subtype of `FUNDING_INSTRUMENT`, `PAYPAL_SMART_CONNECT` is subtype of `CREDIT_LINE`, and so on.",
          "x-enum": [
            {
              "value": "CREDIT_CARD",
              "description": "The account change occurred to a credit card."
            },
            {
              "value": "BANK_ACCOUNT",
              "description": "The account change occurred to a bank account."
            },
            {
              "value": "DEBIT_CARD",
              "description": "The account change occurred to a debit card."
            },
            {
              "value": "BUYER_CREDIT",
              "description": "The account change occurred to customer credit."
            },
            {
              "value": "PAYPAL_SMART_CONNECT",
              "description": "The account change occurred to PayPal Smart Connect."
            },
            {
              "value": "EBAY_CARD",
              "description": "The account change occurred to an ebay card."
            },
            {
              "value": "PLUS_CARD",
              "description": "The account change occurred to a Plus card."
            },
            {
              "value": "WORKING_CAPITAL",
              "description": "The account change occurred to working capital."
            },
            {
              "value": "REVOLVING_CREDIT",
              "description": "The account change occurred to revolving credit."
            },
            {
              "value": "CLOSE_ENDED_CREDIT",
              "description": "The account change occurred to close-ended credit."
            }
          ]
        },
        "action_performed": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The action that was completed on the entity type.",
          "x-enum": [
            {
              "value": "ADDED",
              "description": "The entity was added."
            },
            {
              "value": "REMOVED",
              "description": "The entity was removed."
            },
            {
              "value": "MARKED_PRIMARY",
              "description": "The entity was marked as primary."
            },
            {
              "value": "EDITED",
              "description": "The entity was edited."
            },
            {
              "value": "UPGRADED",
              "description": "The entity was upgraded."
            },
            {
              "value": "DOWNGRADED",
              "description": "The entity was downgraded."
            },
            {
              "value": "STOLEN_OR_LOST",
              "description": "The entity was stolen or lost."
            },
            {
              "value": "CLOSED",
              "description": "The entity was closed."
            },
            {
              "value": "DEACTIVATED",
              "description": "The entity was deactivated."
            },
            {
              "value": "REACTIVATED",
              "description": "The entity was reactivated."
            },
            {
              "value": "REOPENED",
              "description": "The entity was reopened."
            }
          ]
        },
        "entity_id": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The entity ID of the reported item. For example, the card ID."
        },
        "activity_entity_info": {
          "$ref": "#/definitions/response-activity_entity_info.json",
          "x-publicDocsSchemaName": "activity_entity_info"
        },
        "reversal_actions": {
          "type": "array",
          "description": "An array of system actions that reversed the impact of the unauthorized event. Includes the system-defined details of the reversal action.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/response-reversal_action.json",
            "x-publicDocsSchemaName": "reversal_action"
          }
        }
      },
      "x-publicDocsSchemaName": "account_activity"
    },
    "response-activity_entity_info.json": {
      "type": "object",
      "title": "Activity Entity Information",
      "description": "The date and time of the last known transaction or when other entity-related information was updated, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).",
      "properties": {
        "last_known_valid_transaction_date": {
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-date_time.json",
          "description": "The date and time when the user last validated the transaction with the instrument, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6)."
        },
        "card_replacement_address_confirmed": {
          "type": "boolean",
          "description": "Indicates whether the customer agreed to send the replaced card to the address associated to card."
        },
        "card_shared_with_someone_else": {
          "type": "boolean",
          "description": "Indicates whether the customer shared their card with someone else."
        },
        "merchant_has_card_details": {
          "type": "boolean",
          "description": "Indicates whether the merchant has the customer's card details."
        },
        "card_settings_changed": {
          "type": "boolean",
          "description": "Indicates whether the customer has changed their card settings."
        }
      },
      "x-publicDocsSchemaName": "activity_entity_info"
    },
    "response-reversal_action.json": {
      "type": "object",
      "title": "Reversal Action",
      "description": "The system action that reverses the impact of the unauthorized event. Includes the system-defined details of the reversal action.",
      "x-visibility": {
        "extent": "INTERNAL"
      },
      "properties": {
        "id": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "readOnly": true,
          "description": "The ID of the entity that was changed as part of the reversal action."
        },
        "original_activity_id": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "readOnly": true,
          "description": "The ID of the activity log entry that was created for the reversal action that was carried out by the system."
        },
        "entity_type": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "readOnly": true,
          "description": "The entity type on which some activity is completed.",
          "x-enum": [
            {
              "value": "EMAIL",
              "description": "An email address."
            },
            {
              "value": "PHONE",
              "description": "A phone numbr."
            },
            {
              "value": "ADDRESS",
              "description": "An address."
            },
            {
              "value": "ACCOUNT",
              "description": "An account."
            },
            {
              "value": "FUNDING_INSTRUMENT",
              "description": "A funding instrument."
            }
          ]
        },
        "entity_subtype": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "readOnly": true,
          "description": "The entity subtype on which the activity is completed. For example, `CREDIT_CARD` is a subtype of `FUNDING_INSTRUMENT`, `PAYPAL_SMART_CONNECT` is a subtype of `CREDIT_LINE`, and so on.",
          "x-enum": [
            {
              "value": "CREDIT_CARD",
              "description": "A credit card."
            },
            {
              "value": "BANK_ACCOUNT",
              "description": "A bank account."
            }
          ]
        },
        "action_performed": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "readOnly": true,
          "description": "The action completed on the entity type.",
          "x-enum": [
            {
              "value": "ADDED",
              "description": "The entity was added."
            },
            {
              "value": "REMOVED",
              "description": "The entity was removed."
            },
            {
              "value": "MARKED_PRIMARY",
              "description": "The entity was marked as primary."
            },
            {
              "value": "EDITED",
              "description": "The entity was edited."
            },
            {
              "value": "UPGRADED",
              "description": "The entity was upgraded."
            },
            {
              "value": "DOWNGRADED",
              "description": "The entity was downgraded."
            }
          ]
        },
        "status": {
          "type": "string",
          "minLength": 1,
          "maxLength": 2000,
          "readOnly": true,
          "description": "The status."
        }
      },
      "x-publicDocsSchemaName": "reversal_action"
    },
    "response-status.json": {
      "type": "string",
      "minLength": 1,
      "maxLength": 255,
      "readOnly": true,
      "description": "The status of the dispute.",
      "x-enum": [
        {
          "value": "OPEN",
          "description": "The dispute is open."
        },
        {
          "value": "WAITING_FOR_BUYER_RESPONSE",
          "description": "The dispute is waiting for a response from the customer."
        },
        {
          "value": "WAITING_FOR_SELLER_RESPONSE",
          "description": "The dispute is waiting for a response from the merchant."
        },
        {
          "value": "UNDER_REVIEW",
          "description": "The dispute is under review with PayPal."
        },
        {
          "value": "RESOLVED",
          "description": "The dispute is resolved."
        },
        {
          "value": "OTHER",
          "description": "The default status if the dispute does not have one of the other statuses."
        }
      ],
      "x-publicDocsSchemaName": "status",
      "properties": {}
    },
    "response-dispute_state.json": {
      "type": "string",
      "minLength": 1,
      "maxLength": 255,
      "title": "Dispute State",
      "description": "The state of the dispute.",
      "x-enum": [
        {
          "value": "OPEN_INQUIRIES",
          "description": "The dispute is open."
        },
        {
          "value": "REQUIRED_ACTION",
          "description": "The dispute is waiting for a response."
        },
        {
          "value": "REQUIRED_OTHER_PARTY_ACTION",
          "description": "The dispute is waiting for a response from other party."
        },
        {
          "value": "UNDER_PAYPAL_REVIEW",
          "description": "The dispute is under review with PayPal."
        },
        {
          "value": "APPEALABLE",
          "description": "The dispute can be appealed."
        },
        {
          "value": "RESOLVED",
          "description": "The dispute is resolved."
        }
      ],
      "x-publicDocsSchemaName": "dispute_state",
      "properties": {}
    },
    "response-dispute_outcome.json": {
      "type": "object",
      "title": "Dispute Outcome",
      "description": "The outcome of a dispute.",
      "properties": {
        "outcome_code": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The outcome of a resolved dispute.",
          "x-enum": [
            {
              "value": "RESOLVED_BUYER_FAVOUR",
              "description": "The dispute was resolved in the customer's favor."
            },
            {
              "value": "RESOLVED_SELLER_FAVOUR",
              "description": "The dispute was resolved in the merchant's favor."
            },
            {
              "value": "RESOLVED_WITH_PAYOUT",
              "description": "PayPal provided the merchant or customer with protection and the case is resolved."
            },
            {
              "value": "CANCELED_BY_BUYER",
              "description": "The customer canceled the dispute."
            },
            {
              "value": "ACCEPTED",
              "description": "PayPal accepted the dispute."
            },
            {
              "value": "DENIED",
              "description": "PayPal denied the dispute."
            },
            {
              "value": "NONE",
              "description": "A dispute was created for the same transaction ID, and the previous dispute was closed without any decision."
            }
          ]
        },
        "outcome_reason": {
          "type": "string",
          "minLength": 1,
          "maxLength": 2000,
          "description": "The justification for the adjudication outcome.",
          "x-visibility": {
            "extent": "INTERNAL"
          }
        },
        "amount_refunded": {
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-money.json",
          "description": "The amount that either the merchant or PayPal refunds the customer."
        }
      },
      "x-publicDocsSchemaName": "dispute_outcome"
    },
    "response-dispute_lifecycle_stage.json": {
      "type": "string",
      "minLength": 1,
      "maxLength": 255,
      "readOnly": true,
      "description": "The stage in the dispute lifecycle.",
      "x-enum": [
        {
          "value": "INQUIRY",
          "description": "A customer and merchant interact in an attempt to resolve a dispute without escalation to PayPal. Occurs when the customer:<ul><li>Has not received goods or a service.</li><li>Reports that the received goods or service are not as described.</li><li>Needs more details, such as a copy of the transaction or a receipt.</li></ul>"
        },
        {
          "value": "CHARGEBACK",
          "description": "A customer or merchant escalates an inquiry to a claim, which authorizes PayPal to investigate the case and make a determination. Occurs only when the dispute channel is <code>INTERNAL</code>. This stage is a PayPal dispute lifecycle stage and not a credit card or debit card chargeback. All notes that the customer sends in this stage are visible to PayPal agents only. The customer must wait for PayPal’s response before the customer can take further action. In this stage, PayPal shares dispute details with the merchant, who can complete one of these actions:<ul><li>Accept the claim.</li><li>Submit evidence to challenge the claim.</li><li>Make an offer to the customer to resolve the claim.</li></ul>"
        },
        {
          "value": "PRE_ARBITRATION",
          "description": "The first appeal stage for merchants. A merchant can appeal a chargeback if PayPal's decision is not in the merchant's favor. If the merchant does not appeal within the appeal period, PayPal considers the case resolved."
        },
        {
          "value": "ARBITRATION",
          "description": "The second appeal stage for merchants. A merchant can appeal a dispute for a second time if the first appeal was denied. If the merchant does not appeal within the appeal period, the case returns to a resolved status in pre-arbitration stage."
        }
      ],
      "x-publicDocsSchemaName": "dispute_lifecycle_stage",
      "properties": {}
    },
    "response-dispute_channel.json": {
      "readOnly": true,
      "type": "string",
      "minLength": 1,
      "maxLength": 255,
      "description": "The channel where the customer created the dispute.",
      "x-enum": [
        {
          "value": "INTERNAL",
          "description": "The customer contacts PayPal to file a dispute with the merchant."
        },
        {
          "value": "EXTERNAL",
          "description": "The customer contacts their card issuer or bank to request a refund."
        }
      ],
      "x-publicDocsSchemaName": "dispute_channel",
      "properties": {}
    },
    "response-message.json": {
      "type": "object",
      "title": "Message",
      "description": "A customer- or merchant-posted message for the dispute.",
      "properties": {
        "posted_by": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "Indicates whether the customer, merchant, or dispute arbiter posted the message.",
          "readOnly": true,
          "x-enum": [
            {
              "value": "BUYER",
              "description": "The customer posted the message."
            },
            {
              "value": "SELLER",
              "description": "The merchant posted the message."
            },
            {
              "value": "ARBITER",
              "description": "The arbiter of the dispute posted the message."
            }
          ]
        },
        "time_posted": {
          "readOnly": true,
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-date_time.json",
          "description": "The date and time when the message was posted, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6)."
        },
        "content": {
          "type": "string",
          "description": "The message text.",
          "maxLength": 2000,
          "minLength": 0
        }
      },
      "x-publicDocsSchemaName": "message"
    },
    "response-extensions.json": {
      "type": "object",
      "title": "Extensions",
      "description": "The extended properties for the dispute. Includes additional information for a dispute category, such as billing disputes, the original transaction ID, and the correct amount.",
      "x-visibility": {
        "extent": "EXTERNAL"
      },
      "properties": {
        "merchant_contacted": {
          "type": "boolean",
          "description": "Indicates that the merchant was contacted."
        },
        "merchant_contacted_outcome": {
          "$ref": "#/definitions/response-merchant_contacted_outcome.json",
          "x-publicDocsSchemaName": "merchant_contacted_outcome"
        },
        "merchant_contacted_time": {
          "description": "The date and time when merchant was contacted.",
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-date_time.json"
        },
        "merchant_contacted_mode": {
          "description": "The method used to contact the merchant.",
          "$ref": "#/definitions/response-merchant_contacted_mode.json"
        },
        "buyer_contacted_time": {
          "description": "The date and time when the buyer contacted the partner to file a dispute, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *`yyyy`*-*`MM`*-*`dd`*`T`*`HH`*:*`mm`*:*`ss`*.*`SSS`*`Z`.",
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-date_time.json"
        },
        "billing_dispute_properties": {
          "$ref": "#/definitions/response-billing_disputes_properties.json",
          "x-visibility": {
            "extent": "EXTERNAL"
          }
        },
        "unauthorized_dispute_properties": {
          "$ref": "#/definitions/response-unauthorized_dispute_properties.json",
          "x-publicDocsSchemaName": "unauthorized_dispute_properties",
          "x-visibility": {
            "extent": "INTERNAL"
          }
        },
        "merchandize_dispute_properties": {
          "$ref": "#/definitions/response-merchandize_dispute_properties.json",
          "x-publicDocsSchemaName": "merchandise_dispute_properties"
        },
        "external_case_properties": {
          "$ref": "#/definitions/response-external_case_properties.json",
          "x-visibility": {
            "extent": "LIMITED_RELEASE"
          }
        }
      },
      "x-publicDocsSchemaName": "extensions"
    },
    "response-merchant_contacted_outcome.json": {
      "type": "string",
      "minLength": 1,
      "maxLength": 255,
      "title": "Merchant Contacted Outcome",
      "description": "The outcome when the customer has contacted the merchant.",
      "x-enum": [
        {
          "value": "NO_RESPONSE",
          "description": "The merchant did not respond to the customer."
        },
        {
          "value": "FIXED",
          "description": "The merchant agreed to fix the issue but did not fix it yet."
        },
        {
          "value": "NOT_FIXED",
          "description": "The merchant could not fix the issue."
        }
      ],
      "x-publicDocsSchemaName": "merchant_contacted_outcome",
      "properties": {}
    },
    "response-merchant_contacted_mode.json": {
      "type": "string",
      "minLength": 1,
      "maxLength": 255,
      "title": "Merchant Contacted Method",
      "description": "The method used to contact the merchant.",
      "x-enum": [
        {
          "value": "WEBSITE",
          "description": "The merchant was contacted through his website."
        },
        {
          "value": "PHONE",
          "description": "The merchant was contacted through either phone or fax."
        },
        {
          "value": "EMAIL",
          "description": "The merchant was contacted through either email or text message."
        },
        {
          "value": "WRITTEN",
          "description": "The merchant was contacted through a written communication."
        },
        {
          "value": "IN_PERSON",
          "description": "The merchant was contacted in person."
        }
      ],
      "x-publicDocsSchemaName": "merchant_contacted_outcome",
      "properties": {}
    },
    "response-billing_disputes_properties.json": {
      "type": "object",
      "title": "Billing Disputes Properties",
      "description": "The billing issue details.",
      "x-visibility": {
        "extent": "EXTERNAL"
      },
      "properties": {
        "duplicate_transaction": {
          "$ref": "#/definitions/response-duplicate_transaction.json"
        },
        "incorrect_transaction_amount": {
          "$ref": "#/definitions/response-incorrect_transaction_amount.json"
        },
        "payment_by_other_means": {
          "$ref": "#/definitions/response-payment_by_other_means.json"
        },
        "credit_not_processed": {
          "$ref": "#/definitions/response-credit_not_processed.json"
        },
        "canceled_recurring_billing": {
          "$ref": "#/definitions/response-canceled_recurring_billing.json"
        }
      },
      "x-publicDocsSchemaName": "billing_disputes_properties"
    },
    "response-duplicate_transaction.json": {
      "type": "object",
      "title": "Duplicate Transaction",
      "description": "The duplicate transaction details.",
      "properties": {
        "received_duplicate": {
          "type": "boolean",
          "description": "If `true`, indicates that a duplicate transaction was received."
        },
        "original_transaction": {
          "$ref": "#/definitions/response-transaction_info.json",
          "x-publicDocsSchemaName": "transaction_info",
          "description": "The transaction details for the original transaction, when the dispute reason is `DUPLICATE_TRANSACTION`. Currently, contains only the date and amount."
        }
      },
      "x-publicDocsSchemaName": "duplication_transaction"
    },
    "response-incorrect_transaction_amount.json": {
      "type": "object",
      "title": "Incorrect Transaction Amount",
      "description": "The incorrect transaction amount details.",
      "properties": {
        "correct_transaction_amount": {
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-money.json"
        },
        "correct_transaction_time": {
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-date_time.json",
          "description": "The date and time when the customer created the transaction, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6)."
        }
      },
      "x-publicDocsSchemaName": "incorrect_transaction_amount"
    },
    "response-payment_by_other_means.json": {
      "type": "object",
      "title": "Payment by Other Means",
      "description": "The payment by other means details.",
      "properties": {
        "charge_different_from_original": {
          "type": "boolean",
          "description": "If `true`, indicates that a charge was made that is different from the original charge."
        },
        "received_duplicate": {
          "type": "boolean",
          "description": "If `true`, indicates that a duplicate transaction was received."
        },
        "payment_method": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The payment method.",
          "x-enum": [
            {
              "value": "CASH",
              "description": "The payment method was cash."
            },
            {
              "value": "CREDIT_CARD",
              "description": "The payment method was a credit card."
            },
            {
              "value": "CHECK",
              "description": "The payment method was a check."
            },
            {
              "value": "PAYPAL",
              "description": "The payment method was PayPal."
            },
            {
              "value": "DEBIT_CARD",
              "description": "The payment method was a debit card."
            },
            {
              "value": "GIFT_CARD",
              "description": "The payment method was a gift card."
            },
            {
              "value": "BANK_TRANSFER",
              "description": "The payment method was through bank transfer."
            }
          ]
        },
        "payment_instrument_suffix": {
          "type": "string",
          "minLength": 2,
          "maxLength": 4,
          "description": "Last 2-4 characters of the payment instrument. For payment_method CHECK, payment_instrument_suffix entered must be of minimum length 2-4 characters. For payment_method CREDIT_CARD, DEBIT_CARD, GIFT_CARD, BANK_TRANSFER, payment_instrument_suffix entered must be of length 4."
        }
      },
      "x-publicDocsSchemaName": "payment_by_other_means"
    },
    "response-credit_not_processed.json": {
      "type": "object",
      "title": "Credit Not Processed",
      "description": "The credit not processed details.",
      "properties": {
        "issue_type": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The issue type.",
          "x-enum": [
            {
              "value": "PRODUCT",
              "description": "The product has an issue."
            },
            {
              "value": "SERVICE",
              "description": "The service has an issue."
            }
          ]
        },
        "expected_refund": {
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-money.json"
        },
        "cancellation_details": {
          "$ref": "#/definitions/response-cancellation_details.json",
          "x-publicDocsSchemaName": "cancellation_details"
        },
        "product_details": {
          "$ref": "#/definitions/response-product_details.json",
          "x-publicDocsSchemaName": "product_details"
        },
        "service_details": {
          "$ref": "#/definitions/response-service_details.json",
          "x-publicDocsSchemaName": "service_details"
        }
      },
      "x-publicDocsSchemaName": "credit_not_processed"
    },
    "response-cancellation_details.json": {
      "type": "object",
      "title": "Cancellation Details",
      "description": "The cancellation details.",
      "properties": {
        "cancellation_date": {
          "description": "The date and time of the cancellation, in [Internet date and time format](http://tools.ietf.org/html/rfc3339#section-5.6).",
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-date_time.json"
        },
        "cancellation_number": {
          "description": "The cancellation number.",
          "type": "string"
        },
        "cancelled": {
          "type": "boolean",
          "description": "Indicates whether the dispute was canceled."
        },
        "cancellation_mode": {
          "description": "Indicates the mode used for order cancellation.",
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "x-enum": [
            {
              "value": "CANCELLED_PAYPAL_BILLING_AGREEMENT",
              "description": "Cancelled the billing agreement."
            },
            {
              "value": "WEBSITE",
              "description": "The item was cancelled on the merchant's website."
            },
            {
              "value": "PHONE",
              "description": "The item was cancelled through either phone or fax."
            },
            {
              "value": "EMAIL",
              "description": "The item was cancelled through either email or text message."
            },
            {
              "value": "WRITTEN",
              "description": "The item was cancelled via written communication."
            },
            {
              "value": "IN_PERSON",
              "description": "The item was cancelled in person."
            }
          ]
        }
      },
      "x-publicDocsSchemaName": "cancellation_details"
    },
    "response-product_details.json": {
      "type": "object",
      "title": "Product Details",
      "description": "The product information.",
      "properties": {
        "description": {
          "description": "The product description.",
          "type": "string",
          "minLength": 1,
          "maxLength": 2000
        },
        "product_received": {
          "description": "Indicates whether the product was, or was not, received or returned.",
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "x-enum": [
            {
              "value": "YES",
              "description": "The product was received."
            },
            {
              "value": "NO",
              "description": "The product was not received."
            },
            {
              "value": "RETURNED",
              "description": "The product was returned."
            }
          ]
        },
        "product_received_time": {
          "description": "The date and time when product was delivered.",
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-date_time.json"
        },
        "sub_reasons": {
          "description": "An array of sub-reasons for the product issue.",
          "type": "array",
          "items": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255,
            "x-publicDocsSchemaName": "sub_reason",
            "description": "The sub-reason for the product issue.",
            "x-enum": [
              {
                "value": "DAMAGED",
                "description": "The product was damaged."
              },
              {
                "value": "DIFFERENT",
                "description": "The product was different from what was expected."
              },
              {
                "value": "MISSING_PARTS",
                "description": "The product had missing parts."
              },
              {
                "value": "OTHER",
                "description": "Other."
              }
            ]
          }
        },
        "purchase_url": {
          "type": "string",
          "minLength": 1,
          "maxLength": 2000,
          "format": "uri",
          "description": "The URL where the customer purchased the product."
        },
        "return_details": {
          "$ref": "#/definitions/response-return_details.json",
          "x-publicDocsSchemaName": "return_details"
        }
      },
      "x-publicDocsSchemaName": "product_details"
    },
    "response-return_details.json": {
      "type": "object",
      "title": "Return Details",
      "description": "The return details for the product.",
      "properties": {
        "return_time": {
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-date_time.json",
          "description": "The date and time when the product was returned, [Internet date and time format](http://tools.ietf.org/html/rfc3339#section-5.6)."
        },
        "mode": {
          "description": "The method that the customer used to return the product.",
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "x-enum": [
            {
              "value": "SHIPPED",
              "description": "The customer shipped the product back to the merchant."
            },
            {
              "value": "IN_PERSON",
              "description": "The customer returned the item to the merchant in person."
            }
          ]
        },
        "receipt": {
          "type": "boolean",
          "description": "Indicates whether customer has the return receipt."
        },
        "return_confirmation_number": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The confirmation number for the item return."
        },
        "returned": {
          "description": "If `true`, indicates that the item was returned but the seller refused to accept the return and if `false`, indicates the item was not attempted to return.",
          "type": "boolean"
        }
      },
      "x-publicDocsSchemaName": "return_details"
    },
    "response-service_details.json": {
      "type": "object",
      "title": "Service Details",
      "description": "The service details.",
      "properties": {
        "description": {
          "description": "The service description.",
          "type": "string",
          "minLength": 1,
          "maxLength": 2000
        },
        "service_started": {
          "description": "Indicates whether the service was started or cancelled.",
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "x-enum": [
            {
              "value": "YES",
              "description": "The service was started."
            },
            {
              "value": "NO",
              "description": "The service was not started."
            },
            {
              "value": "CANCELLED",
              "description": "The service was cancelled."
            }
          ]
        },
        "note": {
          "description": "The customer specified note about the service usage.",
          "type": "string",
          "minLength": 1,
          "maxLength": 2000
        },
        "sub_reasons": {
          "description": "An array of sub-reasons for the service issue.",
          "type": "array",
          "items": {
            "x-publicDocsSchemaName": "sub_reason",
            "description": "The sub-reason for the service issue.",
            "type": "string",
            "minLength": 1,
            "maxLength": 255,
            "x-enum": [
              {
                "value": "DAMAGED",
                "description": "The service was damaged."
              },
              {
                "value": "DIFFERENT",
                "description": "The service was different from what was expected."
              },
              {
                "value": "INCOMPLETE",
                "description": "The service was incomplete."
              },
              {
                "value": "OTHER",
                "description": "Other."
              }
            ]
          }
        },
        "purchase_url": {
          "type": "string",
          "minLength": 1,
          "maxLength": 2000,
          "format": "uri",
          "description": "The URL of the merchant or marketplace site where the customer purchased the service."
        }
      },
      "x-publicDocsSchemaName": "service_details"
    },
    "response-canceled_recurring_billing.json": {
      "type": "object",
      "title": "Canceled Recurring Billing",
      "description": "The recurring billing canceled details.",
      "properties": {
        "expected_refund": {
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-money.json"
        },
        "cancellation_details": {
          "$ref": "#/definitions/response-cancellation_details.json",
          "x-publicDocsSchemaName": "cancellation_details"
        }
      },
      "x-publicDocsSchemaName": "canceled_recurring_billing"
    },
    "response-unauthorized_dispute_properties.json": {
      "type": "object",
      "title": "Unauthorized Dispute Properties",
      "description": "The customer-entered issue details for an unauthorized dispute.",
      "x-visibility": {
        "extent": "INTERNAL"
      },
      "properties": {
        "password_changed": {
          "type": "boolean",
          "description": "Indicates whether the customer changed their password after a spoof incident."
        },
        "pin_changed": {
          "type": "boolean",
          "description": "Indicates whether the customer changed their PIN after a spoof incident."
        },
        "security_questions_changed": {
          "type": "boolean",
          "description": "Indicates whether the customer changed their answers to security questions after a spoof incident."
        },
        "review_sla": {
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-date_time.json",
          "description": "The date and time when the review service level agreement (SLA) was created, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6)."
        },
        "rejected_dispute_transactions": {
          "type": "array",
          "description": "An array of transaction IDs that the user reported as unauthorized but that PayPal rejected.",
          "items": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255,
            "description": "The encrypted transaction ID.",
            "x-publicDocsSchemaName": "rejected_dispute_transaction"
          }
        }
      },
      "x-publicDocsSchemaName": "unauthorized_dispute_properties"
    },
    "response-merchandize_dispute_properties.json": {
      "type": "object",
      "title": "Merchandise Dispute Properties",
      "description": "The customer-provided merchandise issue details for the dispute.",
      "properties": {
        "issue_type": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The issue type.",
          "x-enum": [
            {
              "value": "PRODUCT",
              "description": "The product has an issue."
            },
            {
              "value": "SERVICE",
              "description": "The service has an issue."
            }
          ]
        },
        "product_details": {
          "$ref": "#/definitions/response-product_details.json",
          "x-publicDocsSchemaName": "product_details"
        },
        "service_details": {
          "$ref": "#/definitions/response-service_details.json",
          "x-publicDocsSchemaName": "service_details"
        },
        "return_shipping_address": {
          "description": "The return address for the item. Required when the customer must return an item to the merchant for the <a href=\"/docs/integration/direct/customer-disputes/integration-guide/#merchandise_or_service_not_as_described\"><code>MERCHANDISE_OR_SERVICE_NOT_AS_DESCRIBED</code></a> dispute reason.",
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-address_portable.json",
          "x-publicDocsSchemaName": "address_portable"
        }
      },
      "x-publicDocsSchemaName": "merchandise_dispute_properties"
    },
    "common_components-v3-schema-json-openapi-2.0-address_portable.json": {
      "type": "object",
      "title": "Portable Postal Address (Medium-Grained)",
      "description": "The portable international postal address. Maps to [AddressValidationMetadata](https://github.com/googlei18n/libaddressinput/wiki/AddressValidationMetadata) and HTML 5.1 [Autofilling form controls: the autocomplete attribute](https://www.w3.org/TR/html51/sec-forms.html#autofilling-form-controls-the-autocomplete-attribute).",
      "x-pattern": {
        "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-address_portable_postal_code_validation.json"
      },
      "properties": {
        "address_line_1": {
          "type": "string",
          "description": "The first line of the address. For example, number or street. For example, `173 Drury Lane`. Required for data entry and compliance and risk checks. Must contain the full address.",
          "maxLength": 300
        },
        "address_line_2": {
          "type": "string",
          "description": "The second line of the address. For example, suite or apartment number.",
          "maxLength": 300
        },
        "address_line_3": {
          "type": "string",
          "description": "The third line of the address, if needed. For example, a street complement for Brazil, direction text, such as `next to Walmart`, or a landmark in an Indian address.",
          "maxLength": 300
        },
        "admin_area_4": {
          "type": "string",
          "description": "The neighborhood, ward, or district. Smaller than `admin_area_level_3` or `sub_locality`. Value is:<ul><li>The postal sorting code that is used in Guernsey and many French territories, such as French Guiana.</li><li>The fine-grained administrative levels in China.</li></ul>",
          "maxLength": 300
        },
        "admin_area_3": {
          "type": "string",
          "description": "A sub-locality, suburb, neighborhood, or district. Smaller than `admin_area_level_2`. Value is:<ul><li>Brazil. Suburb, bairro, or neighborhood.</li><li>India. Sub-locality or district. Street name information is not always available but a sub-locality or district can be a very small area.</li></ul>",
          "maxLength": 300
        },
        "admin_area_2": {
          "type": "string",
          "description": "A city, town, or village. Smaller than `admin_area_level_1`.",
          "maxLength": 300
        },
        "admin_area_1": {
          "type": "string",
          "description": "The highest level sub-division in a country, which is usually a province, state, or ISO-3166-2 subdivision. Format for postal delivery. For example, `CA` and not `California`. Value, by country, is:<ul><li>UK. A county.</li><li>US. A state.</li><li>Canada. A province.</li><li>Japan. A prefecture.</li><li>Switzerland. A kanton.</li></ul>",
          "maxLength": 300
        },
        "postal_code": {
          "type": "string",
          "description": "The postal code, which is the zip code or equivalent. Typically required for countries with a postal code or an equivalent. See [postal code](https://en.wikipedia.org/wiki/Postal_code).",
          "maxLength": 60
        },
        "country_code": {
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-country_code.json"
        },
        "address_details": {
          "type": "object",
          "title": "Address Details",
          "description": "The non-portable additional address details that are sometimes needed for compliance, risk, or other scenarios where fine-grain address information might be needed. Not portable with common third party and opensource. Redundant with core fields. For example, `address_portable.address_line_1` is usually a combination of `address_details.street_number` and `street_name` and `street_type`.",
          "properties": {
            "street_number": {
              "type": "string",
              "description": "The street number.",
              "maxLength": 300
            },
            "street_name": {
              "type": "string",
              "description": "The street name. Just `Drury` in `Drury Lane`.",
              "maxLength": 300
            },
            "street_type": {
              "type": "string",
              "description": "The street type. For example, avenue, boulevard, road, or expressway.",
              "maxLength": 300
            },
            "delivery_service": {
              "type": "string",
              "description": "The delivery service. Post office box, bag number, or post office name.",
              "maxLength": 300
            },
            "building_name": {
              "type": "string",
              "description": "A named locations that represents the premise. Usually a building name or number or collection of buildings with a common name or number. For example, <code>Craven House</code>.",
              "maxLength": 300
            },
            "sub_building": {
              "type": "string",
              "description": "The first-order entity below a named building or location that represents the sub-premise. Usually a single building within a collection of buildings with a common name. Can be a flat, story, floor, room, or apartment.",
              "maxLength": 300
            }
          }
        }
      },
      "required": [
        "country_code"
      ]
    },
    "common_components-v3-schema-json-openapi-2.0-address_portable_postal_code_validation.json": {
      "oneOf": [
        {
          "country_code": "AL",
          "validation_regex": "\\d{4}"
        },
        {
          "country_code": "AR",
          "validation_regex": "([A-HJ-NP-Z])?\\d{4}([A-Z]{3})?"
        },
        {
          "country_code": "AT",
          "validation_regex": "\\d{4}"
        },
        {
          "country_code": "AU",
          "validation_regex": "\\d{4}"
        },
        {
          "country_code": "BE",
          "validation_regex": "[1-9]\\d{3}"
        },
        {
          "country_code": "BG",
          "validation_regex": "\\d{4}"
        },
        {
          "country_code": "BN",
          "validation_regex": "[A-Z]{2}[ ]?\\d{4}"
        },
        {
          "country_code": "BR",
          "validation_regex": "\\d{5}[\\s\\-]?\\d{3}"
        },
        {
          "country_code": "BT",
          "validation_regex": "\\d{5}"
        },
        {
          "country_code": "BY",
          "validation_regex": "\\d{6}"
        },
        {
          "country_code": "CA",
          "validation_regex": "[ABCEGHJKLMNPRSTVXY]\\d[ABCEGHJ-NPRSTV-Z][ ]?\\d[ABCEGHJ-NPRSTV-Z]\\d"
        },
        {
          "country_code": "CH",
          "validation_regex": "\\d{4}"
        },
        {
          "country_code": "CL",
          "validation_regex": "\\d{7}"
        },
        {
          "country_code": "CN",
          "validation_regex": "\\d{6}"
        },
        {
          "country_code": "CO",
          "validation_regex": "\\d{6}"
        },
        {
          "country_code": "CR",
          "validation_regex": "\\d{4,5}|\\d{3}[\\s\\-]?\\d{4}"
        },
        {
          "country_code": "CY",
          "validation_regex": "\\d{4}"
        },
        {
          "country_code": "CZ",
          "validation_regex": "\\d{3}[ ]?\\d{2}"
        },
        {
          "country_code": "DE",
          "validation_regex": "(0[1-9]|[1-9]\\d)\\d{3}"
        },
        {
          "country_code": "DK",
          "validation_regex": "\\d{4}"
        },
        {
          "country_code": "DO",
          "validation_regex": "\\d{5}"
        },
        {
          "country_code": "EC",
          "validation_regex": "\\d{6}"
        },
        {
          "country_code": "EE",
          "validation_regex": "\\d{5}"
        },
        {
          "country_code": "ES",
          "validation_regex": "\\d{5}"
        },
        {
          "country_code": "FI",
          "validation_regex": "\\d{5}"
        },
        {
          "country_code": "FM",
          "validation_regex": "(9694[1-4])([ \\-]\\d{4})?"
        },
        {
          "country_code": "FO",
          "validation_regex": "(FO[ \\-]?)?\\d{3}"
        },
        {
          "country_code": "FR",
          "validation_regex": "\\d{2}[ ]?\\d{3}"
        },
        {
          "country_code": "GB",
          "validation_regex": "GIR[ ]?0AA|(?:(?:AB|AL|B|BA|BB|BD|BF|BH|BL|BN|BR|BS|BT|BX|CA|CB|CF|CH|CM|CO|CR|CT|CV|CW|DA|DD|DE|DG|DH|DL|DN|DT|DY|E|EC|EH|EN|EX|FK|FY|G|GL|GY|GU|HA|HD|HG|HP|HR|HS|HU|HX|IG|IM|IP|IV|JE|KA|KT|KW|KY|L|LA|LD|LE|LL|LN|LS|LU|M|ME|MK|ML|N|NE|NG|NN|NP|NR|NW|OL|OX|PA|PE|PH|PL|PO|PR|RG|RH|RM|S|SA|SE|SG|SK|SL|SM|SN|SO|SP|SR|SS|ST|SW|SY|TA|TD|TF|TN|TQ|TR|TS|TW|UB|W|WA|WC|WD|WF|WN|WR|WS|WV|YO|ZE)(?:\\d[\\dA-Z]?[ ]?\\d[ABD-HJLN-UW-Z]{2}))|BFPO[ ]?\\d{1,4}"
        },
        {
          "country_code": "GF",
          "validation_regex": "9[78]3\\d{2}"
        },
        {
          "country_code": "GL",
          "validation_regex": "(DK-?)?39\\d{2}"
        },
        {
          "country_code": "GP",
          "validation_regex": "9[78][01]\\d{2}"
        },
        {
          "country_code": "GR",
          "validation_regex": "\\d{3}[ ]?\\d{2}"
        },
        {
          "country_code": "HR",
          "validation_regex": "\\d{5}"
        },
        {
          "country_code": "HU",
          "validation_regex": "\\d{4}"
        },
        {
          "country_code": "ID",
          "validation_regex": "\\d{5}"
        },
        {
          "country_code": "IE",
          "validation_regex": "[A-Za-z0-9 \\-]{1,10}"
        },
        {
          "country_code": "IL",
          "validation_regex": "\\d{5}(\\d{2})?"
        },
        {
          "country_code": "IN",
          "validation_regex": "\\d{3}[ ]?\\d{3}"
        },
        {
          "country_code": "IS",
          "validation_regex": "\\d{3}"
        },
        {
          "country_code": "IT",
          "validation_regex": "\\d{5}"
        },
        {
          "country_code": "JP",
          "validation_regex": "\\d{3}-\\d{4}"
        },
        {
          "country_code": "KG",
          "validation_regex": "\\d{6}"
        },
        {
          "country_code": "KH",
          "validation_regex": "\\d{5}"
        },
        {
          "country_code": "KR",
          "validation_regex": "\\d{5}"
        },
        {
          "country_code": "KW",
          "validation_regex": "\\d{5}"
        },
        {
          "country_code": "KZ",
          "validation_regex": "\\d{6}"
        },
        {
          "country_code": "LA",
          "validation_regex": "\\d{5}"
        },
        {
          "country_code": "LK",
          "validation_regex": "\\d{5}"
        },
        {
          "country_code": "LT",
          "validation_regex": "\\d{5}"
        },
        {
          "country_code": "LU",
          "validation_regex": "\\d{4}"
        },
        {
          "country_code": "LV",
          "validation_regex": "(LV[\\s\\-]?)\\d{4}"
        },
        {
          "country_code": "MA",
          "validation_regex": "\\d{5}"
        },
        {
          "country_code": "MC",
          "validation_regex": "980\\d{2}"
        },
        {
          "country_code": "MD",
          "validation_regex": "\\d{4}"
        },
        {
          "country_code": "ME",
          "validation_regex": "8\\d{4}"
        },
        {
          "country_code": "MK",
          "validation_regex": "\\d{4}"
        },
        {
          "country_code": "MN",
          "validation_regex": "\\d{5}"
        },
        {
          "country_code": "MQ",
          "validation_regex": "9[78]2\\d{2}"
        },
        {
          "country_code": "MT",
          "validation_regex": "[A-Z]{3}[ ]?\\d{2,4}"
        },
        {
          "country_code": "MU",
          "validation_regex": "\\d{5}"
        },
        {
          "country_code": "MV",
          "validation_regex": "\\d{5}"
        },
        {
          "country_code": "MX",
          "validation_regex": "\\d{5}"
        },
        {
          "country_code": "MY",
          "validation_regex": "\\d{5}"
        },
        {
          "country_code": "NG",
          "validation_regex": "\\d{6}"
        },
        {
          "country_code": "NL",
          "validation_regex": "\\d{4}[ ]?[A-Z]{2}"
        },
        {
          "country_code": "NO",
          "validation_regex": "\\d{4}"
        },
        {
          "country_code": "NP",
          "validation_regex": "\\d{5}"
        },
        {
          "country_code": "NZ",
          "validation_regex": "\\d{4}"
        },
        {
          "country_code": "OM",
          "validation_regex": "\\d{3}"
        },
        {
          "country_code": "PA",
          "validation_regex": "\\d{4}"
        },
        {
          "country_code": "PE",
          "validation_regex": "[0-2]?\\d{1,4}"
        },
        {
          "country_code": "PH",
          "validation_regex": "\\d{4}"
        },
        {
          "country_code": "PL",
          "validation_regex": "\\d{2}[\\s\\-]?\\d{3}"
        },
        {
          "country_code": "PT",
          "validation_regex": "\\d{4}([\\-]\\d{3})?"
        },
        {
          "country_code": "PY",
          "validation_regex": "\\d{4}"
        },
        {
          "country_code": "RE",
          "validation_regex": "9[78]4\\d{2}"
        },
        {
          "country_code": "RO",
          "validation_regex": "\\d{6}"
        },
        {
          "country_code": "RS",
          "validation_regex": "\\d{5,6}"
        },
        {
          "country_code": "RU",
          "validation_regex": "[1-9]\\d{5}"
        },
        {
          "country_code": "SA",
          "validation_regex": "\\d{5}(-\\d{4})?"
        },
        {
          "country_code": "SE",
          "validation_regex": "\\d{3}[ ]?\\d{2}"
        },
        {
          "country_code": "SG",
          "validation_regex": "\\d{6}"
        },
        {
          "country_code": "SI",
          "validation_regex": "\\d{4}"
        },
        {
          "country_code": "SK",
          "validation_regex": "\\d{3}[ ]?\\d{2}"
        },
        {
          "country_code": "SM",
          "validation_regex": "4789\\d"
        },
        {
          "country_code": "SV",
          "validation_regex": "\\d{4}"
        },
        {
          "country_code": "TH",
          "validation_regex": "\\d{5}"
        },
        {
          "country_code": "TR",
          "validation_regex": "\\d{5}"
        },
        {
          "country_code": "TT",
          "validation_regex": "\\d{6}"
        },
        {
          "country_code": "TW",
          "validation_regex": "\\d{3}(\\d{2})?"
        },
        {
          "country_code": "UA",
          "validation_regex": "\\d{5}"
        },
        {
          "country_code": "US",
          "validation_regex": "\\d{5}([ \\-]?\\d{4})?"
        },
        {
          "country_code": "UY",
          "validation_regex": "[1-9]\\d{4}"
        },
        {
          "country_code": "VA",
          "validation_regex": "00120"
        },
        {
          "country_code": "VE",
          "validation_regex": "[1-8]\\d{3}([\\-][A-Z])?"
        },
        {
          "country_code": "VN",
          "validation_regex": "\\d{6}"
        },
        {
          "country_code": "WS",
          "validation_regex": "\\d{4}"
        },
        {
          "country_code": "YT",
          "validation_regex": "976\\d{2}"
        },
        {
          "country_code": "ZA",
          "validation_regex": "\\d{4}"
        }
      ],
      "properties": {}
    },
    "common_components-v3-schema-json-openapi-2.0-country_code.json": {
      "type": "string",
      "description": "The [two-character ISO 3166-1 code](/docs/integration/direct/rest/country-codes/) that identifies the country or region.<blockquote><strong>Note:</strong> The country code for Great Britain is <code>GB</code> and not <code>UK</code> as used in the top-level domain names for that country. Use the `C2` country code for China worldwide for comparable uncontrolled price (CUP) method, bank card, and cross-border transactions.</blockquote>",
      "format": "ppaas_common_country_code_v2",
      "maxLength": 2,
      "minLength": 2,
      "pattern": "^([A-Z]{2}|C2)$",
      "properties": {}
    },
    "response-external_case_properties.json": {
      "type": "object",
      "title": "External Case Properties",
      "description": "The third-party claims properties.",
      "properties": {
        "reference_id": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The external claim ID."
        },
        "external_type": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The partner-supported external type.",
          "x-enum": [
            {
              "value": "BANK_RETURN",
              "description": "The customer disputed the transaction at the issuing bank."
            },
            {
              "value": "DIRECT_DEBIT_REVERSAL",
              "description": "The customer requested to reverse the ELV transaction at the issuing bank."
            },
            {
              "value": "CREDIT_CARD_DISPUTE",
              "description": "The customer disputed the transaction with the credit card processor."
            }
          ]
        },
        "recovery_type": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The type of recovery on the external dispute.",
          "x-enum": [
            {
              "value": "RECOVERED_FROM_SELLER",
              "description": "The dispute amount is debited from the merchant."
            },
            {
              "value": "RECOVERED_FROM_BUYER",
              "description": "The dispute amount is debited from the customer."
            },
            {
              "value": "NO_RECOVERY",
              "description": "The merchant or customer is not liable for the dispute."
            }
          ]
        },
        "reversal_fee": {
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-money.json",
          "description": "The fee charged to the customer for reversing the ELV transaction at the issuing bank.",
          "x-visibility": {
            "extent": "INTERNAL"
          }
        }
      },
      "x-publicDocsSchemaName": "external_case_properties"
    },
    "response-evidence.json": {
      "type": "object",
      "title": "Evidence",
      "description": "A merchant- or customer-submitted evidence document.",
      "properties": {
        "evidence_type": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The evidence type.",
          "x-enum": [
            {
              "value": "PROOF_OF_FULFILLMENT",
              "description": "Proof of fulfillment should be a copy of the actual shipping label on the package that shows the destination address and the shipping company's stamp to verify the shipment date."
            },
            {
              "value": "PROOF_OF_REFUND",
              "description": "Proof of refund issued to the buyer"
            },
            {
              "value": "PROOF_OF_DELIVERY_SIGNATURE",
              "description": "Proof of delivery signature."
            },
            {
              "value": "PROOF_OF_RECEIPT_COPY",
              "description": "Copy of original receipt or invoice."
            },
            {
              "value": "RETURN_POLICY",
              "description": "Copy of terms and conditions,contract or store return policy"
            },
            {
              "value": "BILLING_AGREEMENT",
              "description": "Copy of billing agreement."
            },
            {
              "value": "PROOF_OF_RESHIPMENT",
              "description": "Proof of reshipment should be a copy of the actual shipping label on the package that shows the destination address and the shipping company's stamp to verify the reshipment date. "
            },
            {
              "value": "ITEM_DESCRIPTION",
              "description": "A copy of the original description of the item or service"
            },
            {
              "value": "POLICE_REPORT",
              "description": "Copy of the police report filed."
            },
            {
              "value": "AFFIDAVIT",
              "description": "More information has to be provided about the claim using the affidavit."
            },
            {
              "value": "PAID_WITH_OTHER_METHOD",
              "description": "Document showing item/service was paid by another payment method."
            },
            {
              "value": "COPY_OF_CONTRACT",
              "description": "Copy of contract if applicable."
            },
            {
              "value": "TERMINAL_ATM_RECEIPT",
              "description": "Copy of terminal/ATM receipt."
            },
            {
              "value": "PRICE_DIFFERENCE_REASON",
              "description": "Explanation of what the price difference is related to (increased tip amount, shipping charges, taxes, etc)."
            },
            {
              "value": "SOURCE_CONVERSION_RATE",
              "description": "Source of expected conversion rate or fee."
            },
            {
              "value": "BANK_STATEMENT",
              "description": "Bank/Credit statement showing withdrawal transaction."
            },
            {
              "value": "CREDIT_DUE_REASON",
              "description": "The credit due reason."
            },
            {
              "value": "REQUEST_CREDIT_RECEIPT",
              "description": "The request credit receipt."
            },
            {
              "value": "PROOF_OF_RETURN",
              "description": "Proof of shipment or postage that shows you returned this item to your seller and should be a copy of the actual shipping label used."
            },
            {
              "value": "CREATE",
              "description": "Additional evidence information during case creation."
            },
            {
              "value": "CHANGE_REASON",
              "description": "The evidence related to the reason change."
            },
            {
              "value": "PROOF_OF_REFUND_OUTSIDE_PAYPAL",
              "description": "Document should show that the seller issued a refund outside Paypal."
            },
            {
              "value": "RECEIPT_OF_MERCHANDISE",
              "description": "Check with buyer if item Delivered (seller provided Proof of Shipping)"
            },
            {
              "value": "CUSTOMS_DOCUMENT",
              "description": "Document confirming that the item has been confiscated."
            },
            {
              "value": "CUSTOMS_FEE_RECEIPT",
              "description": "Custom fees receipt paid by the buyer"
            },
            {
              "value": "INFORMATION_ON_RESOLUTION",
              "description": "Any resolution reached with the seller should be communicated to PayPal."
            },
            {
              "value": "ADDITIONAL_INFORMATION_OF_ITEM",
              "description": "Any additional information of the item purchased."
            },
            {
              "value": "DETAILS_OF_PURCHASE",
              "description": "Specific details of a purchase made under a particular transaction has to be given."
            },
            {
              "value": "PROOF_OF_SIGNIFICANT_DIFFERENCE",
              "description": "More information required on how the item was damaged or was significantly different from the item advertised."
            },
            {
              "value": "PROOF_OF_SOFTWARE_OR_SERVICE_NOT_AS_DESCRIBED",
              "description": "Any screenshot or download/usage log showing that the software or service was unavailable or non-functional."
            },
            {
              "value": "PROOF_OF_CONFISCATION",
              "description": "Documentation from a third party or organization that evaluated this item that confirms they confiscated it."
            },
            {
              "value": "PROOF_OF_DAMAGE",
              "description": "Documentation supporting the claim that the item is damaged."
            },
            {
              "value": "COPY_OF_LAW_ENFORCEMENT_AGENCY_REPORT",
              "description": "Report filed with a law enforcement agency or government organization. Examples of such agencies are -  Internet Crime Complaint Center (www.ic3.gov), state Consumer Protection office, state police or a Federal law enforcement agency such as the FBI or Postal Inspection Service."
            },
            {
              "value": "ADDITIONAL_PROOF_OF_SHIPMENT",
              "description": "Additional proof of shipment  such as a packing list, detailed invoice, or shipping manifest to confirm that all items have been shipped."
            },
            {
              "value": "PROOF_OF_DENIAL_BY_CARRIER",
              "description": "Documentation from the carrier should confirm the reason why they refuse to ship the item in question and the extent of the original damage."
            },
            {
              "value": "THIRDPARTY_PROOF_FOR_DAMAGE_OR_SIGNIFICANT_DIFFERENCE",
              "description": "Proof should be provided by an unbiased third-party, such as a dealer, appraiser or another individual or organisation that's qualified in the area of the item in question (other than yourself), and detail the extent of the damage or clearly explain how the item received significantly differs from the item advertised."
            },
            {
              "value": "VALID_SUPPORTING_DOCUMENT",
              "description": "The document you have provided doesn't support your claim that the item is Significantly Not as Described. Please provide a document to clearly show how the item received significantly differs from the item advertised."
            },
            {
              "value": "LEGIBLE_SUPPORTING_DOCUMENT",
              "description": "The document you have provided is illegible, unclear, or too dark to read.  Please provide a document that is legible and clear to read."
            },
            {
              "value": "RETURN_TRACKING_INFORMATION",
              "description": "Online tracking information for remaining items that have to be shipped to the seller."
            },
            {
              "value": "DELIVERY_RECEIPT",
              "description": "Confirmation that the item has been received."
            },
            {
              "value": "PROOF_OF_INSTORE_RECEIPT",
              "description": "In-store receipt or online verification should clearly show that the buyer picked up the item."
            },
            {
              "value": "ADDITIONAL_TRACKING_INFORMATION",
              "description": "Tracking information should include the carrier name,  online tracking number and the website where the shipment can be tracked."
            },
            {
              "value": "PROOF_OF_SHIPMENT_POSTAGE",
              "description": "Proof of shipment or postage should be a copy of the actual shipping label on the package that shows the destination address and the carrier's stamp to verify the shipment date."
            },
            {
              "value": "ONLINE_TRACKING_INFORMATION",
              "description": "Online tracking information to confirm delivery of item."
            },
            {
              "value": "PROOF_OF_INSTORE_REFUND",
              "description": "Proof should be an in-store refund receipt or company documentation that clearly shows a completed refund for the transaction."
            },
            {
              "value": "PROOF_FOR_SOFTWARE_OR_SERVICE_DELIVERED",
              "description": "Proof should be compelling evidence to prove that the item or service was as described  and was delivered to the buyer."
            },
            {
              "value": "RETURN_ADDRESS_FOR_SHIPPING",
              "description": "Return address is required for the buyer to ship  the merchandise back to the seller."
            },
            {
              "value": "COPY_OF_THE_EPARCEL_MANIFEST",
              "description": "To validate a claim,  a copy of the eparcel manifest showing the buyer's address from Australia Post is required. "
            },
            {
              "value": "COPY_OF_SHIPPING_MANIFEST",
              "description": "The shipping manifest must show the buyer's address and can be obtained from the carrier."
            },
            {
              "value": "APPEAL_AFFIDAVIT",
              "description": "Appeal affidavit is needed to make an appeal for any case outcome."
            },
            {
              "value": "RECEIPT_OF_REPLACEMENT",
              "description": "Check with buyer if the replacement of the item sent by the seller was received"
            },
            {
              "value": "COPY_OF_DRIVERS_LICENSE",
              "description": "Need Copy of Drivers license."
            },
            {
              "value": "ACCOUNT_CHANGE_INFORMATION",
              "description": "Additional Details about how account was accessed/what was changed."
            },
            {
              "value": "DELIVERY_ADDRESS",
              "description": "Address where item was supposed to be delivered."
            },
            {
              "value": "CONFIRMATION_OF_RESOLUTION",
              "description": "Confirmation that item was received and issue resolved."
            },
            {
              "value": "MERCHANT_RESPONSE",
              "description": "Copy of merchant's response when the resolution was attempted."
            },
            {
              "value": "PERMISSION_DESCRIPTION",
              "description": "A Detailed description about the account or card level permission given to another person."
            },
            {
              "value": "STATUS_OF_MERCHANDISE",
              "description": "Details of the merchandise's current location."
            },
            {
              "value": "LOST_CARD_DETAILS",
              "description": "Details of where and when the card was lost/stolen?."
            },
            {
              "value": "LAST_VALID_TRANSACTION_DETAILS",
              "description": "Details of the last valid transaction made on the card."
            },
            {
              "value": "OTHER",
              "description": "Other."
            }
          ]
        },
        "evidence_info": {
          "$ref": "#/definitions/response-evidence_info.json",
          "x-publicDocsSchemaName": "evidence_info"
        },
        "documents": {
          "type": "array",
          "description": "An array of evidence documents.",
          "items": {
            "$ref": "#/definitions/response-document.json",
            "x-publicDocsSchemaName": "document"
          }
        },
        "notes": {
          "type": "string",
          "description": "Any evidence-related notes.",
          "maxLength": 2000
        },
        "source": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "readOnly": true,
          "description": "The source of the evidence.",
          "x-enum": [
            {
              "value": "REQUESTED_FROM_BUYER",
              "description": "PayPal requested evidence from the customer."
            },
            {
              "value": "REQUESTED_FROM_SELLER",
              "description": "PayPal requested evidence from the merchant."
            },
            {
              "value": "SUBMITTED_BY_BUYER",
              "description": "Evidence was submitted by the customer."
            },
            {
              "value": "SUBMITTED_BY_SELLER",
              "description": "Evidence was submitted by the merchant."
            },
            {
              "value": "SUBMITTED_BY_PARTNER",
              "description": "Evidence was submitted by the partner."
            }
          ],
          "x-visibility": {
            "extent": "INTERNAL"
          }
        },
        "date": {
          "readOnly": true,
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-date_time.json",
          "description": "The date and time when the evidence was received, in [Internet date and time format](http://tools.ietf.org/html/rfc3339#section-5.6).",
          "x-visibility": {
            "extent": "INTERNAL"
          }
        },
        "item_id": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The item ID. If the merchant provides multiple pieces of evidence and the transaction has multiple item IDs, the merchant can use this value to associate a piece of evidence with an item ID."
        }
      },
      "x-publicDocsSchemaName": "evidence"
    },
    "response-evidence_info.json": {
      "type": "object",
      "title": "Evidence Information",
      "description": "The evidence-related information.",
      "properties": {
        "tracking_info": {
          "type": "array",
          "description": "An array of relevant tracking information for the transaction involved in this dispute.",
          "items": {
            "$ref": "#/definitions/response-tracking_info.json",
            "x-publicDocsSchemaName": "response_tracking_info"
          }
        },
        "refund_ids": {
          "type": "array",
          "description": "An array of refund IDs for the transaction involved in this dispute.",
          "items": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255,
            "description": "The ID of the refunded transaction.",
            "x-publicDocsSchemaName": "refund_id"
          }
        }
      },
      "x-publicDocsSchemaName": "evidence_info"
    },
    "response-tracking_info.json": {
      "type": "object",
      "title": "Tracking Information",
      "description": "The tracking information.",
      "properties": {
        "carrier_name": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The name of the shipment carrier for the transaction for this dispute.",
          "x-enum": [
            {
              "value": "UPS",
              "description": "United Parcel Service."
            },
            {
              "value": "USPS",
              "description": "United States Postal Service."
            },
            {
              "value": "FEDEX",
              "description": "Federal Express."
            },
            {
              "value": "AIRBORNE_EXPRESS",
              "description": "Airborne Express."
            },
            {
              "value": "DHL",
              "description": "DHL."
            },
            {
              "value": "AIRSURE",
              "description": "AirSure."
            },
            {
              "value": "ROYAL_MAIL",
              "description": "Royal Mail."
            },
            {
              "value": "PARCELFORCE",
              "description": "Parcelforce Worldwide."
            },
            {
              "value": "SWIFTAIR",
              "description": "Swiftair."
            },
            {
              "value": "OTHER",
              "description": "Other."
            },
            {
              "value": "UK_PARCELFORCE",
              "description": "Parcelforce UK."
            },
            {
              "value": "UK_ROYALMAIL_SPECIAL",
              "description": "Royal Mail Special Delivery UK."
            },
            {
              "value": "UK_ROYALMAIL_RECORDED",
              "description": "Royal Mail Recorded UK."
            },
            {
              "value": "UK_ROYALMAIL_INT_SIGNED",
              "description": "Royal Mail International Signed."
            },
            {
              "value": "UK_ROYALMAIL_AIRSURE",
              "description": "Royal Mail AirSure UK."
            },
            {
              "value": "UK_UPS",
              "description": "United Parcel Service UK."
            },
            {
              "value": "UK_FEDEX",
              "description": "Federal Express UK."
            },
            {
              "value": "UK_AIRBORNE_EXPRESS",
              "description": "Airborne Express UK."
            },
            {
              "value": "UK_DHL",
              "description": "DHL UK."
            },
            {
              "value": "UK_OTHER",
              "description": "Other UK."
            },
            {
              "value": "UK_CANNOT_PROV_TRACK",
              "description": "Cannot provide tracking UK."
            },
            {
              "value": "CA_CANADA_POST",
              "description": "Canada Post."
            },
            {
              "value": "CA_PUROLATOR",
              "description": "Purolator Canada."
            },
            {
              "value": "CA_CANPAR",
              "description": "Canpar Courier Canada."
            },
            {
              "value": "CA_LOOMIS",
              "description": "Loomis Express Canada."
            },
            {
              "value": "CA_TNT",
              "description": "TNT Express Canada."
            },
            {
              "value": "CA_OTHER",
              "description": "Other Canada."
            },
            {
              "value": "CA_CANNOT_PROV_TRACK",
              "description": "Cannot provide tracking Canada."
            },
            {
              "value": "DE_DP_DHL_WITHIN_EUROPE",
              "description": "DHL Parcel Europe."
            },
            {
              "value": "DE_DP_DHL_T_AND_T_EXPRESS",
              "description": "DHL T and T Express."
            },
            {
              "value": "DE_DHL_DP_INTL_SHIPMENTS",
              "description": "DHL DP International shipments."
            },
            {
              "value": "DE_GLS",
              "description": "General Logistics Systems Germany."
            },
            {
              "value": " DE_DPD_DELISTACK",
              "description": "DPD Tracking Germany."
            },
            {
              "value": "DE_HERMES",
              "description": "Hermes Germany."
            },
            {
              "value": "DE_UPS",
              "description": "United Parcel Service Germany."
            },
            {
              "value": "DE_FEDEX",
              "description": "Federal Express Germany."
            },
            {
              "value": "DE_TNT",
              "description": "TNT Express Germany."
            },
            {
              "value": "DE_OTHER",
              "description": "Other Germany."
            },
            {
              "value": "FR_CHRONOPOST",
              "description": "Chronopost France."
            },
            {
              "value": "FR_COLIPOSTE",
              "description": "Coliposte France."
            },
            {
              "value": "FR_DHL",
              "description": "DHL France."
            },
            {
              "value": "FR_UPS",
              "description": "United Parcel Service France."
            },
            {
              "value": "FR_FEDEX",
              "description": "Federal Express France."
            },
            {
              "value": "FR_TNT",
              "description": "TNT Express France."
            },
            {
              "value": "FR_GLS",
              "description": "General Logistics Systems France."
            },
            {
              "value": "FR_OTHER",
              "description": "Other France."
            },
            {
              "value": "IT_POSTE_ITALIA",
              "description": "Poste Italia."
            },
            {
              "value": "IT_DHL",
              "description": "DHL Italy."
            },
            {
              "value": "IT_UPS",
              "description": "United Parcel Service Italy."
            },
            {
              "value": "IT_FEDEX",
              "description": "Federal Express Italy."
            },
            {
              "value": "IT_TNT",
              "description": "TNT Express Italy"
            },
            {
              "value": "IT_GLS",
              "description": "General Logistics Systems Italy."
            },
            {
              "value": "IT_OTHER",
              "description": "Other Italy."
            },
            {
              "value": "AU_AUSTRALIA_POST_EP_PLAT",
              "description": "Australia Post EP Plat."
            },
            {
              "value": "AU_AUSTRALIA_POST_EPARCEL",
              "description": "Australia Post Eparcel."
            },
            {
              "value": "AU_AUSTRALIA_POST_EMS",
              "description": "Australia Post EMS."
            },
            {
              "value": "AU_DHL",
              "description": "DHL Australia."
            },
            {
              "value": "AU_STAR_TRACK_EXPRESS",
              "description": "StarTrack Express Australia."
            },
            {
              "value": "AU_UPS",
              "description": "United Parcel Service Australia."
            },
            {
              "value": "AU_FEDEX",
              "description": "Federal Express Australia."
            },
            {
              "value": "AU_TNT",
              "description": "TNT Express Australia."
            },
            {
              "value": "AU_TOLL_IPEC",
              "description": "Toll IPEC Australia."
            },
            {
              "value": "AU_OTHER",
              "description": "Other Australia."
            },
            {
              "value": "FR_SUIVI",
              "description": "Suivi FedEx France."
            },
            {
              "value": "IT_EBOOST_SDA",
              "description": "Poste Italiane SDA."
            },
            {
              "value": "ES_CORREOS_DE_ESPANA",
              "description": "Correos de Espana."
            },
            {
              "value": "ES_DHL",
              "description": "DHL Spain."
            },
            {
              "value": "ES_UPS",
              "description": "United Parcel Service Spain."
            },
            {
              "value": "ES_FEDEX",
              "description": "Federal Express Spain."
            },
            {
              "value": "ES_TNT",
              "description": "TNT Express Spain."
            },
            {
              "value": "ES_OTHER",
              "description": "Other Spain."
            },
            {
              "value": "AT_AUSTRIAN_POST_EMS",
              "description": "EMS Express Mail Service Austria."
            },
            {
              "value": "AT_AUSTRIAN_POST_PPRIME",
              "description": "Austrian Post Prime."
            },
            {
              "value": "BE_CHRONOPOST",
              "description": "Chronopost."
            },
            {
              "value": "BE_TAXIPOST",
              "description": "Taxi Post."
            },
            {
              "value": "CH_SWISS_POST_EXPRES",
              "description": "Swiss Post Express."
            },
            {
              "value": "CH_SWISS_POST_PRIORITY",
              "description": "Swiss Post Priority."
            },
            {
              "value": "CN_CHINA_POST",
              "description": "China Post."
            },
            {
              "value": "HK_HONGKONG_POST",
              "description": "Hong Kong Post."
            },
            {
              "value": "IE_AN_POST_SDS_EMS",
              "description": "Post SDS EMS Express Mail Service Ireland."
            },
            {
              "value": "IE_AN_POST_SDS_PRIORITY",
              "description": "Post SDS Priority Ireland."
            },
            {
              "value": "IE_AN_POST_REGISTERED",
              "description": "Post Registered Ireland."
            },
            {
              "value": "IE_AN_POST_SWIFTPOST",
              "description": "Swift Post Ireland."
            },
            {
              "value": "IN_INDIAPOST",
              "description": "India Post."
            },
            {
              "value": "JP_JAPANPOST",
              "description": "Japan Post."
            },
            {
              "value": "KR_KOREA_POST",
              "description": "Korea Post."
            },
            {
              "value": "NL_TPG",
              "description": "TPG Post Netherlands."
            },
            {
              "value": "SG_SINGPOST",
              "description": "SingPost Singapore."
            },
            {
              "value": "TW_CHUNGHWA_POST",
              "description": "Chunghwa POST Taiwan."
            },
            {
              "value": "CN_CHINA_POST_EMS",
              "description": "China Post EMS Express Mail Service."
            },
            {
              "value": "CN_FEDEX",
              "description": "Federal Express China."
            },
            {
              "value": "CN_TNT",
              "description": "TNT Express China."
            },
            {
              "value": "CN_UPS",
              "description": "United Parcel Service China."
            },
            {
              "value": "CN_OTHER",
              "description": "Other China."
            },
            {
              "value": "NL_TNT",
              "description": "TNT Express Netherlands."
            },
            {
              "value": "NL_DHL",
              "description": "DHL Netherlands."
            },
            {
              "value": "NL_UPS",
              "description": "United Parcel Service Netherlands."
            },
            {
              "value": "NL_FEDEX",
              "description": "Federal Express Netherlands."
            },
            {
              "value": "NL_KIALA",
              "description": "KIALA Netherlands."
            },
            {
              "value": "BE_KIALA",
              "description": "Kiala Point Belgium."
            },
            {
              "value": "PL_POCZTA_POLSKA",
              "description": "Poczta Polska."
            },
            {
              "value": "PL_POCZTEX",
              "description": "Pocztex."
            },
            {
              "value": "PL_GLS",
              "description": "General Logistics Systems Poland."
            },
            {
              "value": "PL_MASTERLINK",
              "description": "Masterlink Poland."
            },
            {
              "value": "PL_TNT",
              "description": "TNT Express Poland."
            },
            {
              "value": "PL_DHL",
              "description": "DHL Poland."
            },
            {
              "value": "PL_UPS",
              "description": "United Parcel Service Poland."
            },
            {
              "value": "PL_FEDEX",
              "description": "Federal Express Poland."
            },
            {
              "value": "JP_SAGAWA_KYUU_BIN",
              "description": "Sagawa Kyuu Bin Japan."
            },
            {
              "value": "JP_NITTSU_PELICAN_BIN",
              "description": "Nittsu Pelican Bin Japan."
            },
            {
              "value": "JP_KURO_NEKO_YAMATO_UNYUU",
              "description": "Kuro Neko Yamato Unyuu Japan."
            },
            {
              "value": "JP_TNT",
              "description": "TNT Express Japan."
            },
            {
              "value": "JP_DHL",
              "description": "DHL Japan."
            },
            {
              "value": "JP_UPS",
              "description": "United Parcel Service Japan."
            },
            {
              "value": "JP_FEDEX",
              "description": "Federal Express Japan."
            },
            {
              "value": "NL_PICKUP",
              "description": "Pickup Netherlands."
            },
            {
              "value": "NL_INTANGIBLE",
              "description": "Intangible Netherlands."
            },
            {
              "value": "NL_ABC_MAIL",
              "description": "ABC Mail Netherlands."
            },
            {
              "value": "HK_FOUR_PX_EXPRESS",
              "description": "4PX Express Hong Kong."
            },
            {
              "value": "HK_FLYT_EXPRESS",
              "description": "Flyt Express Hong Kong."
            }
          ]
        },
        "carrier_name_other": {
          "type": "string",
          "minLength": 1,
          "maxLength": 2000,
          "description": "The name of carrier in free-form text for unavailable carriers. This field is mandatory when <code>carrier_name</code> is <code>OTHER</code>."
        },
        "tracking_url": {
          "type": "string",
          "minLength": 1,
          "maxLength": 2000,
          "format": "uri",
          "description": "The URL to track the dispute-related transaction shipment."
        },
        "tracking_number": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The number to track the dispute-related transaction shipment."
        }
      },
      "required": [
        "carrier_name",
        "tracking_number"
      ],
      "x-publicDocsSchemaName": "response_tracking_info"
    },
    "response-document.json": {
      "type": "object",
      "title": "Document",
      "description": "An uploaded document as a binary object that supports a dispute.",
      "properties": {
        "name": {
          "type": "string",
          "minLength": 1,
          "maxLength": 2000,
          "description": "The document name."
        },
        "url": {
          "type": "string",
          "minLength": 1,
          "maxLength": 2000,
          "format": "uri",
          "readOnly": true,
          "description": "The document URI.",
          "x-visibility": {
            "extent": "INTERNAL"
          }
        }
      },
      "x-publicDocsSchemaName": "document"
    },
    "response-history.json": {
      "type": "object",
      "title": "History",
      "description": "The history of the dispute.",
      "x-visibility": {
        "extent": "INTERNAL"
      },
      "properties": {
        "date": {
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-date_time.json",
          "description": "The date and time when the event occurred, in [Internet date and time format](http://tools.ietf.org/html/rfc3339#section-5.6)."
        },
        "actor": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The event-related actor.",
          "x-enum": [
            {
              "value": "BUYER",
              "description": "The actor is the customer."
            },
            {
              "value": "SELLER",
              "description": "The actor is the merchant."
            },
            {
              "value": "PAYPAL",
              "description": "The actor is PayPal."
            }
          ]
        },
        "event_type": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The type of the history event.",
          "x-enum": [
            {
              "value": "CREATED",
              "description": "The dispute was created in PayPal system."
            },
            {
              "value": "OPEN",
              "description": "The customer opened the dispute with PayPal."
            },
            {
              "value": "WAITING_FOR_BUYER_RESPONSE",
              "description": "The dispute moved to waiting for customer's response."
            },
            {
              "value": "WAITING_FOR_SELLER_RESPONSE",
              "description": "The dispute moved to waiting for merchant's response."
            },
            {
              "value": "UNDER_REVIEW",
              "description": "The dispute moved to a state where it is being reviewed by PayPal."
            },
            {
              "value": "RESOLVED",
              "description": "The dispute was resolved."
            },
            {
              "value": "OTHER",
              "description": "The dispute status moved to the <code>OTHER</code> status."
            },
            {
              "value": "EMAIL_SENT_TO_BUYER",
              "description": "The customer was notified about dispute through email."
            },
            {
              "value": "EMAIL_SENT_TO_SELLER",
              "description": "The merchant was notified about dispute through email."
            },
            {
              "value": "EVIDENCE_PROVIDED_BUYER",
              "description": "The customer provided an evidence document for the dispute."
            },
            {
              "value": "EVIDENCE_PROVIDED_SELLER",
              "description": "The merchant provided an evidence document for the dispute."
            },
            {
              "value": "APPEALED_BUYER",
              "description": "The customer appealed the dispute outcome."
            },
            {
              "value": "APPEALED_SELLER",
              "description": "The merchant appealed the dispute outcome."
            },
            {
              "value": "REASON_CHANGED",
              "description": "The customer changed the reason for the dispute."
            },
            {
              "value": "ESCALATED",
              "description": "The dispute was escalated for PayPal's review."
            },
            {
              "value": "ACCEPTED_CLAIM",
              "description": "The merchant accepted the claim and refunded the customer."
            },
            {
              "value": "CANCELLED",
              "description": "The customer cancelled the dispute."
            }
          ]
        }
      },
      "x-publicDocsSchemaName": "history"
    },
    "response-dispute_flow.json": {
      "type": "string",
      "minLength": 1,
      "maxLength": 255,
      "description": "The flow ID for the dispute ID.",
      "x-enum": [
        {
          "value": "ACH_RETURNS",
          "description": "ACH returns."
        },
        {
          "value": "ACCOUNT_ISSUES",
          "description": "Account issues."
        },
        {
          "value": "ADMIN_FRAUD_REVERSAL",
          "description": "Admin fraud reversal."
        },
        {
          "value": "BILLING",
          "description": "Billing."
        },
        {
          "value": "CHARGEBACKS",
          "description": "Charge back."
        },
        {
          "value": "COMPLAINT_RESOLUTION",
          "description": "Complaint resolution."
        },
        {
          "value": "CORRECTION",
          "description": "Correction."
        },
        {
          "value": "DEBIT_CARD_CHARGEBACK",
          "description": "Debit card charge back."
        },
        {
          "value": "FAX_ROUTING",
          "description": "FAX routing."
        },
        {
          "value": "MIPS_COMPLAINT_ITEM",
          "description": "MIPS complaint item."
        },
        {
          "value": "MIPS_COMPLAINT",
          "description": "MIPS complaint."
        },
        {
          "value": "OPS_VERIFICATION_FLOW",
          "description": "OPS verification flow."
        },
        {
          "value": "PAYPAL_DISPUTE_RESOLUTION",
          "description": "PayPal dispute resolution."
        },
        {
          "value": "PINLESS_DEBIT_RETURN",
          "description": "Pin-less debit return."
        },
        {
          "value": "PRICING_ADJUSTMENT",
          "description": "Pricing adjustment."
        },
        {
          "value": "SPOOF_UNAUTH_CHILD",
          "description": "Spoof unauthorized child."
        },
        {
          "value": "SPOOF_UNAUTH_PARENT",
          "description": "Spoof unauthorized parent."
        },
        {
          "value": "THIRD_PARTY_CLAIM",
          "description": "Third-party claim."
        },
        {
          "value": "THIRD_PARTY_DISPUTE",
          "description": "Third-party dispute."
        },
        {
          "value": "TICKET_RETRIEVAL",
          "description": "Ticket retrieval."
        },
        {
          "value": "UK_EXPRESS_RETURNS",
          "description": "UK Express returns."
        },
        {
          "value": "UNKNOWN_FAXES",
          "description": "Unknown faxes."
        },
        {
          "value": "VETTING",
          "description": "Vetting."
        },
        {
          "value": "OTHER",
          "description": "Other."
        }
      ],
      "x-publicDocsSchemaName": "dispute_flow",
      "properties": {}
    },
    "response-offer.json": {
      "type": "object",
      "title": "Offer",
      "description": "The merchant-proposed offer for a dispute.",
      "properties": {
        "buyer_requested_amount": {
          "description": "The customer-requested refund for this dispute.",
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-money.json"
        },
        "seller_offered_amount": {
          "description": "The merchant-offered refund for this dispute.",
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-money.json"
        },
        "offer_type": {
          "$ref": "#/definitions/response-offer_type.json",
          "x-publicDocsSchemaName": "offer_type"
        },
        "history": {
          "type": "array",
          "description": "An array of history information for an offer.",
          "items": {
            "$ref": "#/definitions/response-offer_history.json",
            "x-publicDocsSchemaName": "offer_history"
          },
          "x-visibility": {
            "extent": "INTERNAL"
          }
        }
      },
      "x-publicDocsSchemaName": "offer"
    },
    "response-offer_type.json": {
      "type": "string",
      "minLength": 1,
      "maxLength": 255,
      "title": "Offer Type",
      "description": "The merchant-proposed offer type for the dispute.",
      "x-enum": [
        {
          "value": "REFUND",
          "description": "The merchant must refund the customer without any item replacement or return. This offer type is valid in the chargeback phase and occurs when a merchant is willing to refund the dispute amount without any further action from customer. Omit the <code>refund_amount</code> and <code>return_shipping_address</code> parameters from the <a href=\"/docs/api/customer-disputes/v1/#disputes-actions_accept-claim\">accept claim</a> call."
        },
        {
          "value": "REFUND_WITH_RETURN",
          "description": "The customer must return the item to the merchant and then merchant will refund the money. This offer type is valid in the chargeback phase and occurs when a merchant is willing to refund the dispute amount and requires the customer to return the item. Include the <code>return_shipping_address</code> parameter in but omit the <code>refund_amount</code> parameter from the <a href=\"/docs/api/customer-disputes/v1/#disputes-actions_accept-claim\">accept claim</a> call."
        },
        {
          "value": "REFUND_WITH_REPLACEMENT",
          "description": "The merchant must do a refund and then send a replacement item to the customer. This offer type is valid in the inquiry phase when a merchant is willing to refund a specific amount and send the replacement item. Include the <code>offer_amount</code> parameter in the <a href=\"/docs/api/customer-disputes/v1/#disputes-actions_make-offer\">make offer to resolve dispute</a> call."
        },
        {
          "value": "REPLACEMENT_WITHOUT_REFUND",
          "description": "The merchant must send a replacement item to the customer with no additional refunds. This offer type is valid in the inquiry phase when a merchant is willing to replace the item without any refund. Omit the <code>offer_amount</code> parameter from the <a href=\"/docs/api/customer-disputes/v1/#disputes-actions_make-offer\">make offer to resolve dispute</a> call."
        }
      ],
      "x-publicDocsSchemaName": "offer_type",
      "properties": {}
    },
    "response-offer_history.json": {
      "type": "object",
      "title": "Offer History",
      "description": "The offer history.",
      "properties": {
        "offer_time": {
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-date_time.json",
          "description": "The date and time when the event occurred, in [Internet date and time format](http://tools.ietf.org/html/rfc3339#section-5.6)."
        },
        "actor": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The event-related actor.",
          "x-enum": [
            {
              "value": "BUYER",
              "description": "The actor is the customer."
            },
            {
              "value": "SELLER",
              "description": "The actor is the merchant."
            }
          ]
        },
        "event_type": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The type of the history event.",
          "x-enum": [
            {
              "value": "PROPOSED",
              "description": "The merchant or customer proposed an offer."
            },
            {
              "value": "ACCEPTED",
              "description": "The merchant or customer accepted the offer."
            },
            {
              "value": "DENIED",
              "description": "The merchant or customer rejected the offer."
            }
          ]
        },
        "offer_type": {
          "$ref": "#/definitions/response-offer_type.json",
          "x-publicDocsSchemaName": "offer_type"
        },
        "offer_amount": {
          "description": "The offer amount.",
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-money.json"
        }
      },
      "x-publicDocsSchemaName": "offer_history"
    },
    "response-refund_details.json": {
      "type": "object",
      "title": "Refund Details",
      "description": "The refund details.",
      "properties": {
        "allowed_refund_amount": {
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-money.json",
          "description": "The maximum refundable amount.",
          "x-visibility": {
            "extent": "EXTERNAL"
          }
        },
        "refunds": {
          "type": "array",
          "description": "An array of refund objects.",
          "x-visibility": {
            "extent": "INTERNAL"
          },
          "items": {
            "$ref": "#/definitions/response-refund.json",
            "x-publicDocsSchemaName": "refund"
          }
        }
      },
      "x-publicDocsSchemaName": "response_refund_details"
    },
    "response-refund.json": {
      "type": "object",
      "title": "Refund",
      "description": "The refund details.",
      "properties": {
        "gross_amount": {
          "description": "The gross amount of the refund.",
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-money.json"
        },
        "transaction_time": {
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-date_time.json",
          "description": "The date and time of the refund."
        },
        "transaction_id": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The ID of the transaction for the refund, as it appears to the merchant."
        },
        "invoice_number": {
          "type": "string",
          "minLength": 1,
          "maxLength": 127,
          "description": "The ID of the invoice for the refund."
        }
      },
      "x-publicDocsSchemaName": "refund"
    },
    "response-communication_details.json": {
      "type": "object",
      "title": "Contact Details",
      "description": "The contact details that a merchant provides to the customer to use to share their evidence documents.",
      "properties": {
        "email": {
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-email_address.json",
          "description": "The email address that is provided by the merchant where the customer can share the evidences."
        },
        "note": {
          "type": "string",
          "minLength": 1,
          "maxLength": 2000,
          "description": "The merchant provided notes that are visible to both the customer and PayPal."
        },
        "time_posted": {
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-date_time.json",
          "description": "The date and time when the contact details were posted, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).",
          "readOnly": true
        }
      },
      "x-publicDocsSchemaName": "communication_details"
    },
    "response-partner_action.json": {
      "type": "object",
      "title": "Partner Action",
      "description": "A PayPal-requested or partner action for the dispute.",
      "properties": {
        "id": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "readOnly": true,
          "description": "The ID for the action."
        },
        "name": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "readOnly": true,
          "description": "The action name.",
          "x-enum": [
            {
              "value": "PROVIDE_PROVISIONAL_CREDIT",
              "description": "The partner must provide the consumer with provisional credit."
            },
            {
              "value": "DENY_DISPUTE",
              "description": "The partner denies dispute and must reverse the provisional credit."
            },
            {
              "value": "ACCEPT_DISPUTE",
              "description": "The partner accepts dispute and must provide permanent provisional credit to the consumer."
            },
            {
              "value": "WRITE_OFF",
              "description": "The partner must write off the dispute."
            }
          ]
        },
        "create_time": {
          "readOnly": true,
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-date_time.json",
          "description": "The date and time when the action was initiated, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *`yyyy`*-*`MM`*-*`dd`*`T`*`HH`*:*`mm`*:*`ss`*.*`SSS`*`Z`."
        },
        "update_time": {
          "readOnly": true,
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-date_time.json",
          "description": "The date and time when the action was last updated, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *`yyyy`*-*`MM`*-*`dd`*`T`*`HH`*:*`mm`*:*`ss`*.*`SSS`*`Z`."
        },
        "due_time": {
          "readOnly": true,
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-date_time.json",
          "description": "The date and time before which the action must be performed, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *`yyyy`*-*`MM`*-*`dd`*`T`*`HH`*:*`mm`*:*`ss`*.*`SSS`*`Z`."
        },
        "status": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "readOnly": true,
          "description": "The status of the action.",
          "x-enum": [
            {
              "value": "PENDING",
              "description": "The action is pending and awaits partner processing. For this type of action, the partner must update the action's status after they complete the required actions."
            },
            {
              "value": "COMPLETED",
              "description": "The partner has processed the action."
            }
          ]
        },
        "amount": {
          "readOnly": true,
          "description": "The amount associated with the partner action, either it is recommended by PayPal for which the partner need to take action or it is taken by the partner at their end",
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-money.json"
        }
      },
      "required": [
        "id",
        "name",
        "status",
        "create_time"
      ],
      "x-publicDocsSchemaName": "partner_action"
    },
    "response-supporting_info.json": {
      "type": "object",
      "title": "Supporting Info",
      "description": "A merchant- or customer-submitted supporting information.",
      "properties": {
        "notes": {
          "type": "string",
          "readOnly": true,
          "description": "Any supporting notes.",
          "minLength": 1,
          "maxLength": 2000
        },
        "documents": {
          "type": "array",
          "readOnly": true,
          "description": "An array of metadata for the documents which were uploaded as supporting information for the dispute.",
          "items": {
            "$ref": "#/definitions/response-document.json",
            "x-publicDocsSchemaName": "document"
          },
          "x-visibility": {
            "extent": "INTERNAL"
          }
        },
        "source": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "readOnly": true,
          "description": "The source of the Information.",
          "x-enum": [
            {
              "value": "SUBMITTED_BY_BUYER",
              "description": "Information was submitted by the customer."
            },
            {
              "value": "SUBMITTED_BY_SELLER",
              "description": "Information was submitted by the merchant."
            },
            {
              "value": "SUBMITTED_BY_PARTNER",
              "description": "Information was submitted by the partner."
            }
          ]
        },
        "provided_time": {
          "readOnly": true,
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-date_time.json",
          "description": "The date and time when the information was received, in [Internet date and time format](http://tools.ietf.org/html/rfc3339#section-5.6)."
        }
      },
      "x-publicDocsSchemaName": "supporting_info"
    },
    "common_components-v3-schema-json-openapi-2.0-link_description.json": {
      "type": "object",
      "title": "Link Description",
      "description": "The request-related [HATEOAS link](/docs/api/overview/#hateoas-links) information.",
      "required": [
        "href",
        "rel"
      ],
      "properties": {
        "href": {
          "type": "string",
          "description": "The complete target URL. To make the related call, combine the method with this [URI Template-formatted](https://tools.ietf.org/html/rfc6570) link. For pre-processing, include the `$`, `(`, and `)` characters. The `href` is the key HATEOAS component that links a completed call with a subsequent call.",
          "x-visibility": {
            "extent": "EXTERNAL"
          }
        },
        "rel": {
          "type": "string",
          "description": "The [link relation type](https://tools.ietf.org/html/rfc5988#section-4), which serves as an ID for a link that unambiguously describes the semantics of the link. See [Link Relations](https://www.iana.org/assignments/link-relations/link-relations.xhtml).",
          "x-visibility": {
            "extent": "EXTERNAL"
          }
        },
        "method": {
          "type": "string",
          "description": "The HTTP method required to make the related call.",
          "enum": [
            "GET",
            "POST",
            "PUT",
            "DELETE",
            "HEAD",
            "CONNECT",
            "OPTIONS",
            "PATCH"
          ],
          "x-visibility": {
            "extent": "EXTERNAL"
          }
        },
        "title": {
          "type": "string",
          "description": "The link title.",
          "x-visibility": {
            "extent": "INTERNAL"
          }
        },
        "mediaType": {
          "type": "string",
          "description": "The media type, as defined by [RFC 2046](https://www.ietf.org/rfc/rfc2046.txt). Describes the link target.",
          "x-visibility": {
            "extent": "INTERNAL"
          }
        },
        "encType": {
          "type": "string",
          "description": "The media type in which to submit the request data.",
          "default": "application/json",
          "x-visibility": {
            "extent": "INTERNAL"
          }
        },
        "schema": {
          "description": "The schema that describes the request data.",
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-link_schema.json",
          "x-visibility": {
            "extent": "INTERNAL"
          }
        },
        "targetSchema": {
          "description": "The schema that describes the link target.",
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-link_schema.json",
          "x-visibility": {
            "extent": "INTERNAL"
          }
        }
      }
    },
    "common_components-v3-schema-json-openapi-2.0-link_schema.json": {
      "type": "object",
      "title": "Link Schema",
      "description": "The request data or link target.",
      "additionalProperties": true,
      "properties": {
        "additionalItems": {
          "type": "object",
          "title": "Additional Items",
          "additionalProperties": true
        },
        "dependencies": {
          "type": "object",
          "title": "Dependencies",
          "additionalProperties": true
        },
        "items": {
          "type": "object",
          "title": "Items",
          "additionalProperties": true,
          "description": "An item."
        },
        "definitions": {
          "type": "object",
          "title": "Definitions",
          "additionalProperties": true
        },
        "patternProperties": {
          "type": "object",
          "title": "Pattern Properties",
          "additionalProperties": true
        },
        "properties": {
          "type": "object",
          "title": "Properties",
          "additionalProperties": true
        },
        "allOf": {
          "type": "array",
          "description": "An array of sub-schemas. The data must validate against all sub-schemas.",
          "items": {
            "type": "object",
            "title": "All Of Item",
            "additionalProperties": true,
            "description": "A sub-schema against which the data must validate.",
            "x-publicDocsSchemaName": "all_of_item"
          }
        },
        "anyOf": {
          "type": "array",
          "description": "An array of sub-schemas. The data must validate against one or more sub-schemas.",
          "items": {
            "type": "object",
            "title": "Any Of Item",
            "additionalProperties": true,
            "description": "A sub-schema against which the data must validate.",
            "x-publicDocsSchemaName": "any_of_item"
          }
        },
        "oneOf": {
          "type": "array",
          "description": "An array of sub-schemas. The data must validate against one sub-schema.",
          "items": {
            "type": "object",
            "title": "One Of Item",
            "description": "A sub-schema against which the data must validate.",
            "additionalProperties": true,
            "x-publicDocsSchemaName": "one_of_item"
          }
        },
        "not": {
          "type": "object",
          "title": "Not",
          "additionalProperties": true
        },
        "links": {
          "type": "array",
          "description": "An array of links.",
          "readOnly": true,
          "items": {
            "type": "object",
            "title": "Link",
            "additionalProperties": true,
            "x-publicDocsSchemaName": "link",
            "description": "A link.",
            "readOnly": true
          }
        },
        "fragmentResolution": {
          "type": "string"
        },
        "media": {
          "type": "object",
          "title": "Media",
          "description": "The media type and context-encoding scheme.",
          "properties": {
            "type": {
              "type": "string",
              "description": "The media type. See [Multipurpose Internet Mail Extensions (MIME) Part Two: Media Types](https://tools.ietf.org/html/rfc2046)."
            },
            "binaryEncoding": {
              "type": "string",
              "description": "The content-encoding scheme. See [Multipurpose Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies](https://tools.ietf.org/html/rfc2045)."
            }
          }
        },
        "pathStart": {
          "type": "string",
          "format": "uri",
          "description": "To apply this schema to the instances' URIs, start the URIs with this value."
        }
      }
    },
    "common_components-v3-schema-json-openapi-2.0-error.json": {
      "type": "object",
      "title": "Error",
      "description": "The error details.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The human-readable, unique name of the error."
        },
        "message": {
          "type": "string",
          "description": "The message that describes the error."
        },
        "debug_id": {
          "type": "string",
          "description": "The PayPal internal ID that is used for correlation purposes."
        },
        "information_link": {
          "type": "string",
          "description": "The information link, or URI, that shows detailed information about this error for the developer.",
          "readOnly": true
        },
        "details": {
          "type": "array",
          "description": "An array of additional details about the error.",
          "items": {
            "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-error_details.json",
            "x-publicDocsSchemaName": "error_details"
          }
        },
        "links": {
          "type": "array",
          "description": "An array of request-related [HATEOAS links](/docs/api/overview/#hateoas-links).",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-link_description.json",
            "x-publicDocsSchemaName": "link_description",
            "readOnly": true
          }
        }
      },
      "required": [
        "name",
        "message",
        "debug_id"
      ]
    },
    "common_components-v3-schema-json-openapi-2.0-error_details.json": {
      "type": "object",
      "title": "Error Details",
      "description": "The error details. Required for client-side `4XX` errors.",
      "properties": {
        "field": {
          "type": "string",
          "description": "The field that caused the error. If the field is in the body, set this value to the JSON pointer to that field. Required for client-side errors."
        },
        "value": {
          "type": "string",
          "description": "The value of the field that caused the error."
        },
        "location": {
          "type": "string",
          "description": "The location of the field that caused the error. A valid value is `body`, `path`, or `query`. Default is `body`."
        },
        "issue": {
          "type": "string",
          "description": "The unique and fine-grained application-level error code."
        },
        "description": {
          "type": "string",
          "description": "The human-readable description for an issue. The description MAY change over the lifetime of an API, so clients **MUST NOT** depend on this value."
        }
      },
      "required": [
        "issue"
      ]
    },
    "response-dispute_create.json": {
      "type": "object",
      "title": "Dispute Create Response",
      "description": "The create dispute response.",
      "x-visibility": {
        "extent": "EXTERNAL"
      },
      "properties": {
        "links": {
          "type": "array",
          "description": "An array of request-related [HATEOAS links](/docs/api/hateoas-links/).",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-link_description.json",
            "x-publicDocsSchemaName": "link_description",
            "readOnly": true
          }
        }
      },
      "x-publicDocsSchemaName": "dispute_create"
    },
    "response-dispute.json": {
      "type": "object",
      "title": "Dispute Details",
      "description": "The dispute details.",
      "properties": {
        "dispute_id": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "readOnly": true,
          "description": "The ID of the dispute."
        },
        "create_time": {
          "readOnly": true,
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-date_time.json",
          "description": "The date and time when the dispute was created, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *`yyyy`*-*`MM`*-*`dd`*`T`*`HH`*:*`mm`*:*`ss`*.*`SSS`*`Z`."
        },
        "update_time": {
          "readOnly": true,
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-date_time.json",
          "description": "The date and time when the dispute was last updated, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *`yyyy`*-*`MM`*-*`dd`*`T`*`HH`*:*`mm`*:*`ss`*.*`SSS`*`Z`."
        },
        "disputed_transactions": {
          "type": "array",
          "description": "An array of transactions for which disputes were created.",
          "items": {
            "$ref": "#/definitions/response-transaction_info.json",
            "x-publicDocsSchemaName": "transaction_info"
          }
        },
        "disputed_account_activities": {
          "type": "array",
          "description": "An array of merchant account activities.",
          "x-visibility": {
            "extent": "INTERNAL"
          },
          "items": {
            "x-publicDocsSchemaName": "account_activity",
            "$ref": "#/definitions/response-account_activity.json",
            "x-visibility": {
              "extent": "INTERNAL"
            }
          }
        },
        "reason": {
          "$ref": "#/definitions/response-dispute_reason.json",
          "x-publicDocsSchemaName": "dispute_reason"
        },
        "status": {
          "readOnly": true,
          "$ref": "#/definitions/response-status.json",
          "x-publicDocsSchemaName": "status"
        },
        "dispute_amount": {
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-money.json",
          "description": "The amount in the transaction that the customer originally disputed. Because customers can sometimes dispute only part of the payment, the disputed amount might be different from the total gross or net amount of the original transaction."
        },
        "dispute_fee": {
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-money.json",
          "description": "The fee in the disputed transaction.",
          "x-visibility": {
            "extent": "INTERNAL"
          }
        },
        "fee_policy": {
          "readOnly": true,
          "description": "Policy that determines whether the fee needs to be retained or returned while moving the money as part of dispute process.",
          "$ref": "#/definitions/response-fee_policy.json"
        },
        "external_reason_code": {
          "type": "string",
          "minLength": 1,
          "maxLength": 2000,
          "readOnly": true,
          "description": "The code that identifies the reason for the credit card chargeback. Each card issuer follows their own standards for defining reason type, code, and its format. For more details about the external reason code, see the card issue site. Available for only unbranded transactions."
        },
        "dispute_outcome": {
          "readOnly": true,
          "$ref": "#/definitions/response-dispute_outcome.json",
          "x-publicDocsSchemaName": "dispute_outcome"
        },
        "dispute_life_cycle_stage": {
          "readOnly": true,
          "$ref": "#/definitions/response-dispute_lifecycle_stage.json",
          "x-publicDocsSchemaName": "dispute_lifecycle_stage"
        },
        "dispute_channel": {
          "readOnly": true,
          "$ref": "#/definitions/response-dispute_channel.json",
          "x-publicDocsSchemaName": "dispute_channel"
        },
        "messages": {
          "type": "array",
          "description": "An array of customer- or merchant-posted messages for the dispute.",
          "items": {
            "$ref": "#/definitions/response-message.json",
            "x-publicDocsSchemaName": "message"
          }
        },
        "extensions": {
          "$ref": "#/definitions/response-extensions.json",
          "x-visibility": {
            "extent": "EXTERNAL"
          }
        },
        "evidences": {
          "type": "array",
          "description": "An array of evidence documents.",
          "items": {
            "$ref": "#/definitions/response-evidence.json",
            "x-publicDocsSchemaName": "response_evidence"
          }
        },
        "buyer_response_due_date": {
          "readOnly": true,
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-date_time.json",
          "description": "The date and time by when the customer must respond to the dispute, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). If the customer does not respond by this date and time, the dispute is closed in the merchant's favor. For example, *`yyyy`*-*`MM`*-*`dd`*`T`*`HH`*:*`mm`*:*`ss`*.*`SSS`*`Z`."
        },
        "seller_response_due_date": {
          "readOnly": true,
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-date_time.json",
          "description": "The date and time by when the merchant must respond to the dispute, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). If the merchant does not respond by this date and time, the dispute is closed in the customer's favor. For example, *`yyyy`*-*`MM`*-*`dd`*`T`*`HH`*:*`mm`*:*`ss`*.*`SSS`*`Z`."
        },
        "history": {
          "type": "array",
          "description": "An array of history objects.",
          "x-publicDocsSchemaName": "history_list",
          "x-visibility": {
            "extent": "INTERNAL"
          },
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/response-history.json",
            "x-publicDocsSchemaName": "history"
          }
        },
        "dispute_flow": {
          "readOnly": true,
          "$ref": "#/definitions/response-dispute_flow.json",
          "x-publicDocsSchemaName": "dispute_flow",
          "x-visibility": {
            "extent": "INTERNAL"
          }
        },
        "offer": {
          "readOnly": true,
          "$ref": "#/definitions/response-offer.json",
          "x-publicDocsSchemaName": "offer"
        },
        "refund_details": {
          "readOnly": true,
          "$ref": "#/definitions/response-refund_details.json",
          "x-publicDocsSchemaName": "response_refund_details",
          "x-visibility": {
            "extent": "EXTERNAL"
          }
        },
        "communication_details": {
          "$ref": "#/definitions/response-communication_details.json",
          "x-publicDocsSchemaName": "communication_details"
        },
        "supporting_info": {
          "type": "array",
          "readOnly": true,
          "description": "An array of all the supporting information that are associated to this dispute.",
          "items": {
            "$ref": "#/definitions/response-supporting_info.json",
            "x-publicDocsSchemaName": "supporting_info"
          }
        },
        "links": {
          "type": "array",
          "description": "An array of request-related [HATEOAS links](/docs/api/hateoas-links/).",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-link_description.json",
            "x-publicDocsSchemaName": "link_description",
            "readOnly": true
          }
        }
      },
      "x-links": [
        {
          "href": "https://api.paypal.com/v1/customer/disputes/{dispute_id}",
          "rel": "self",
          "method": "GET"
        },
        {
          "href": "https://api.paypal.com/v1/customer/disputes/{dispute_id}",
          "rel": "edit",
          "method": "PATCH"
        },
        {
          "href": "https://api.paypal.com/v1/customer/disputes/{dispute_id}/provide-evidence",
          "rel": "provide_evidence",
          "method": "POST"
        },
        {
          "href": "https://api.paypal.com/v1/customer/disputes/{dispute_id}/appeal",
          "rel": "appeal",
          "method": "POST"
        },
        {
          "href": "https://api.paypal.com/v1/customer/disputes/{dispute_id}/cancel",
          "rel": "cancel",
          "method": "POST"
        },
        {
          "href": "https://api.paypal.com/v1/customer/disputes/{dispute_id}/cancel",
          "rel": "cancel_unauthorized_transaction",
          "method": "POST"
        },
        {
          "href": "https://api.paypal.com/v1/customer/disputes/{dispute_id}/accept-claim",
          "rel": "accept_claim",
          "method": "POST"
        },
        {
          "href": "https://api.paypal.com/v1/customer/disputes/{dispute_id}/make-offer",
          "rel": "make-offer",
          "method": "POST"
        },
        {
          "href": "https://api.paypal.com/v1/customer/disputes/{dispute_id}/send-message",
          "rel": "send-message",
          "method": "POST"
        },
        {
          "href": "https://api.paypal.com/v1/customer/disputes/{dispute_id}/escalate",
          "rel": "escalate",
          "method": "POST"
        },
        {
          "href": "https://api.paypal.com/v1/customer/disputes/{dispute_id}/provide-supporting-info",
          "rel": "provide_supporting_info",
          "method": "POST"
        },
        {
          "href": "https://api.paypal.com/v1/customer/disputes/{dispute_id}",
          "rel": "parent",
          "method": "GET"
        },
        {
          "href": "https://api.paypal.com/v1/customer/disputes/{dispute_id}",
          "rel": "associated",
          "method": "GET"
        }
      ],
      "x-publicDocsSchemaName": "dispute"
    },
    "response-fee_policy.json": {
      "type": "object",
      "title": "Fee Policy",
      "description": "Policy that determines whether the fee needs to be retained or returned while moving the money as part of dispute process.",
      "properties": {
        "transaction_fee": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "readOnly": true,
          "description": "Transaction fee policy.",
          "x-enum": [
            {
              "value": "RETAIN_NO_FEE",
              "description": "No fee needs to be retained."
            },
            {
              "value": "RETAIN_ALL_FEE",
              "description": "All fees need to be retained."
            },
            {
              "value": "RETAIN_FIXED_FEE",
              "description": "Fixed fee associated to the transaction needs to be retained and all other fees need to be returned."
            }
          ],
          "x-visibility": {
            "extent": "INTERNAL"
          }
        }
      }
    },
    "common_components-v3-schema-json-openapi-2.0-patch_request.json": {
      "type": "array",
      "title": "Patch Request",
      "description": "An array of JSON patch objects to apply partial updates to resources.",
      "items": {
        "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-patch.json",
        "x-publicDocsSchemaName": "patch"
      },
      "properties": {}
    },
    "common_components-v3-schema-json-openapi-2.0-patch.json": {
      "type": "object",
      "title": "Patch",
      "description": "The JSON patch object to apply partial updates to resources.",
      "properties": {
        "op": {
          "type": "string",
          "description": "The operation to complete.",
          "enum": [
            "add",
            "remove",
            "replace",
            "move",
            "copy",
            "test"
          ]
        },
        "path": {
          "type": "string",
          "description": "The JSON pointer to the target document location at which to complete the operation."
        },
        "value": {
          "type": [
            "number",
            "integer",
            "string",
            "boolean",
            "null",
            "array",
            "object"
          ],
          "title": "Patch Value",
          "description": "The value to apply. The `remove` operation does not require a value."
        },
        "from": {
          "type": "string",
          "description": "The JSON pointer to the target document location from which to move the value. Required for the `move` operation."
        }
      },
      "required": [
        "op"
      ]
    },
    "response-subsequent_action.json": {
      "title": "Subsequent Action",
      "type": "object",
      "description": "The subsequent action.",
      "properties": {
        "links": {
          "type": "array",
          "description": "An array of request-related [HATEOAS links](/docs/api/hateoas-links/).",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-link_description.json",
            "x-publicDocsSchemaName": "link_description",
            "readOnly": true
          }
        }
      },
      "x-publicDocsSchemaName": "subsequent_action"
    },
    "request-evidences.json": {
      "title": "Provide Evidence Request",
      "description": "A merchant or customer request to provide evidence for a dispute.",
      "type": "object",
      "properties": {
        "evidences": {
          "type": "array",
          "description": "An array of evidences for the dispute.",
          "minItems": 0,
          "items": {
            "$ref": "#/definitions/response-evidence.json",
            "x-publicDocsSchemaName": "evidence"
          }
        },
        "return_shipping_address": {
          "description": "The return address for the item.<br/><br/>Required when the customer must return an item to the merchant for the <a href=\"/docs/integration/direct/customer-disputes/integration-guide/#merchandise_or_service_not_as_described\"><code>MERCHANDISE_OR_SERVICE_NOT_AS_DESCRIBED</code></a> dispute reason..",
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-address_portable.json",
          "x-publicDocsSchemaName": "address_portable"
        }
      },
      "x-publicDocsSchemaName": "evidences"
    },
    "request-accept_claim.json": {
      "type": "object",
      "title": "Accept Claim Request",
      "description": "A request by a merchant to accept a customer's merchandise claim.",
      "properties": {
        "note": {
          "type": "string",
          "minLength": 1,
          "maxLength": 2000,
          "description": "The merchant's notes about the claim. PayPal can, but the customer cannot, view these notes."
        },
        "accept_claim_reason": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The merchant's reason for acceptance of the customer's claim.",
          "x-enum": [
            {
              "value": "DID_NOT_SHIP_ITEM",
              "description": "Merchant is accepting customer's claim as they could not ship the item back to the customer"
            },
            {
              "value": "TOO_TIME_CONSUMING",
              "description": "Merchant is accepting customer's claim as it is taking too long for merchant to fulfil the order"
            },
            {
              "value": "LOST_IN_MAIL",
              "description": "Merchant is accepting customer's claim as the item is lost in mail or transit"
            },
            {
              "value": "NOT_ABLE_TO_WIN",
              "description": "Merchant is accepting customer's claim as the merchant is not able to find sufficient evidence to win this dispute"
            },
            {
              "value": "COMPANY_POLICY",
              "description": "Merchant is accepting customer’s claims to follow their internal company policy"
            },
            {
              "value": "REASON_NOT_SET",
              "description": "This is the default value merchant can use if none of the above reasons apply"
            }
          ]
        },
        "invoice_id": {
          "type": "string",
          "minLength": 1,
          "maxLength": 127,
          "description": "The merchant-provided ID of the invoice for the refund. This optional value is used to map the refund to an invoice ID in the merchant's system."
        },
        "return_shipping_address": {
          "description": "The return address for the item.<br/><br/>Required when the customer must return an item to the merchant for the <code>MERCHANDISE_OR_SERVICE_NOT_AS_DESCRIBED</code> dispute reason, especially if the refund amount is less than the dispute amount.",
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-address_portable.json"
        },
        "refund_amount": {
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-money.json",
          "description": "To accept a customer's claim, the amount that the merchant agrees to refund the customer. The subsequent action depends on the amount:<ul><li>If this amount is less than the customer-requested amount, the dispute updates to require customer acceptance.</li><li>If this amount is equal to or greater than the customer-requested amount, this amount is automatically refunded to the customer and the dispute closes.</li></ul>"
        }
      },
      "x-publicDocsSchemaName": "accept_claim"
    },
    "request-cancel.json": {
      "type": "object",
      "title": "Cancel Request",
      "description": "The cancel dispute request details.",
      "properties": {
        "note": {
          "type": "string",
          "description": "The note, if any, about why the merchant canceled the dispute.",
          "maxLength": 1048576
        },
        "transaction_ids": {
          "type": "array",
          "description": "An array of encrypted transaction IDs for a canceled unauthorized dispute. If you omit this ID for unauthorized disputes, the issue is automatically canceled. Optional for other dispute types.",
          "items": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255,
            "description": "The encrypted transaction ID for a canceled unauthorized dispute. If you omit this ID for unauthorized disputes, the issue is automatically canceled. Optional for other dispute types.",
            "x-publicDocsSchemaName": "transaction_id"
          }
        },
        "cancellation_reason": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The reason the merchant cancelled the item.",
          "x-enum": [
            {
              "value": "ITEM_RECEIVED",
              "description": "The customer already received the item."
            },
            {
              "value": "REFUND_RECEIVED",
              "description": "The customer already received a refund for the item."
            },
            {
              "value": "OTHER",
              "description": "The customer cancelled the dispute for another reason. If OTHER is specified, customer needs to specify more information in the notes field."
            },
            {
              "value": "SHIPMENT_INFO_RECEIVED",
              "description": "The customer received the provided shipping tracking information and agrees to cancel."
            },
            {
              "value": "REPLACEMENT_RECEIVED",
              "description": "The customer received the item replacement and agrees to cancel."
            }
          ]
        }
      },
      "x-publicDocsSchemaName": "cancel"
    },
    "response-disputes_change_reason.json": {
      "type": "object",
      "title": "Disputes Change Reason Response",
      "description": "The change reason response.",
      "x-visibility": {
        "extent": "LIMITED_RELEASE"
      },
      "properties": {
        "links": {
          "type": "array",
          "description": "An array of request-related [HATEOAS links](/docs/api/hateoas-links/).",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-link_description.json",
            "x-publicDocsSchemaName": "link_description",
            "readOnly": true
          }
        }
      },
      "x-publicDocsSchemaName": "disputes_change_reason"
    },
    "request-change_reason.json": {
      "type": "object",
      "title": "Change Reason Request",
      "description": "A request to change the reason for a dispute.",
      "x-visibility": {
        "extent": "LIMITED_RELEASE"
      },
      "properties": {
        "reason": {
          "$ref": "#/definitions/response-dispute_reason.json"
        },
        "note": {
          "type": "string",
          "description": "A note.",
          "maxLength": 1048576
        },
        "extensions": {
          "x-visibility": {
            "extent": "LIMITED_RELEASE"
          },
          "$ref": "#/definitions/response-extensions.json"
        },
        "disputed_account_activities": {
          "x-visibility": {
            "extent": "INTERNAL"
          },
          "type": "array",
          "description": "An array of customer-reported unauthorized account activities.",
          "items": {
            "x-visibility": {
              "extent": "INTERNAL"
            },
            "$ref": "#/definitions/response-account_activity.json",
            "description": "A customer-reported unauthorized account activity.",
            "x-publicDocsSchemaName": "account_activity"
          }
        },
        "transaction_ids": {
          "type": "array",
          "description": "An array of transaction IDs to add to the unauthorized issue.",
          "items": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255,
            "description": "The encrypted transaction ID.",
            "x-publicDocsSchemaName": "transaction_id"
          }
        },
        "buyer_requested_amount": {
          "description": "The customer requested refund amount for this dispute. Applicable when the customer changes the dispute reason to <a href=\"/docs/integration/direct/customer-disputes/integration-guide/#merchandise_or_service_not_as_described\"><code>MERCHANDISE_OR_SERVICE_NOT_AS_DESCRIBED</code></a>.",
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-money.json"
        },
        "item_info": {
          "description": "The customer purchased items in a disputed transaction.Applicable when the customer changes the dispute reason to <a href=\"/docs/integration/direct/customer-disputes/integration-guide/#merchandise_or_service_not_as_described\"><code>MERCHANDISE_OR_SERVICE_NOT_AS_DESCRIBED</code></a>.",
          "type": "array",
          "x-publicDocsSchemaName": "items_info",
          "items": {
            "$ref": "#/definitions/response-item_info.json",
            "description": "The information for a purchased item in a disputed transaction.",
            "x-publicDocsSchemaName": "item_info"
          }
        }
      },
      "x-publicDocsSchemaName": "change_reason"
    },
    "request-adjudicate.json": {
      "type": "object",
      "title": "Settle Request",
      "description": "A request to settle a dispute in either the customer's or merchant's favor.",
      "properties": {
        "adjudication_outcome": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The outcome of the adjudication.",
          "x-enum": [
            {
              "value": "BUYER_FAVOR",
              "description": "Resolves the case in the customer's favor. Outcome is set to <code>RESOLVED_BUYER_FAVOR</code>."
            },
            {
              "value": "SELLER_FAVOR",
              "description": "Resolves the case in the merchant's favor. Outcome is set to <code>RESOLVED_SELLER_FAVOR</code>."
            }
          ]
        }
      },
      "x-publicDocsSchemaName": "adjudicate"
    },
    "request-require_evidence.json": {
      "type": "object",
      "title": "Require Evidence Request",
      "description": "Sandbox only. Updates the state of a dispute, by ID, to either <code>WAITING_FOR_BUYER_RESPONSE</code> or <code>WAITING_FOR_SELLER_RESPONSE</code>. This state change enables either the customer or merchant to submit evidence for the dispute. Specify an <code>action</code> value in the JSON request body to indicate whether the state change enables the customer or merchant to submit evidence.",
      "properties": {
        "action": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The action. Indicates whether the state change enables the customer or merchant to submit evidence.",
          "x-enum": [
            {
              "value": "BUYER_EVIDENCE",
              "description": "Changes the status of the dispute to <code>WAITING_FOR_BUYER_RESPONSE</code>."
            },
            {
              "value": "SELLER_EVIDENCE",
              "description": "Changes the status of the dispute to <code>WAITING_FOR_SELLER_RESPONSE</code>."
            }
          ]
        }
      },
      "x-publicDocsSchemaName": "require_evidence_request"
    },
    "request-escalate.json": {
      "type": "object",
      "title": "Escalate Claim Request",
      "description": "A merchant request to escalate a dispute, by ID, to a PayPal claim.",
      "properties": {
        "note": {
          "type": "string",
          "minLength": 1,
          "maxLength": 2000,
          "description": "The notes about the escalation of the dispute to a claim."
        },
        "buyer_escalation_reason": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The customer's reason for escalation.",
          "x-enum": [
            {
              "value": "SHIPMENT_NOT_ARRIVED",
              "description": "The merchant indicates that shipment would have arrived by now."
            },
            {
              "value": "FRAUDULENT_SELLER",
              "description": "The customer has evidence that the merchant might be fraudulent."
            },
            {
              "value": "FAILED_NEGOTIATION",
              "description": "The customer already failed to reach a resolution with the merchant before filing this dispute."
            },
            {
              "value": "INCONCLUSIVE_NEGOTIATION",
              "description": "The customer thinks he or she cannot reach a resolution with the merchant."
            },
            {
              "value": "REFUND_NOT_RECEIVED",
              "description": "The customer didn't receive refund as mentioned by merchant."
            },
            {
              "value": "REFUND_AMOUNT_IS_DIFFERENT",
              "description": "The customer received lesser refund amount than expected."
            },
            {
              "value": "TRACKING_ID_INVALID",
              "description": "Tracking id received from merchant is invalid."
            },
            {
              "value": "OTHER",
              "description": "The customer has other reasons, which are described in the comments. If OTHER is specified, customer needs to specify more information in the notes field."
            }
          ],
          "x-visibility": {
            "extent": "INTERNAL"
          }
        },
        "buyer_requested_amount": {
          "description": "The customer-requested refund amount for this dispute.",
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-money.json",
          "x-visibility": {
            "extent": "INTERNAL"
          }
        }
      },
      "required": [
        "note"
      ],
      "x-publicDocsSchemaName": "escalate"
    },
    "request-send_message.json": {
      "type": "object",
      "title": "Send Message",
      "description": "The merchant request to send a message to the other party.",
      "properties": {
        "message": {
          "type": "string",
          "minLength": 1,
          "maxLength": 2000,
          "description": "The message sent by the merchant to the other party."
        }
      },
      "required": [
        "message"
      ],
      "x-publicDocsSchemaName": "send_message"
    },
    "request-make_offer.json": {
      "type": "object",
      "title": "Make Offer Request",
      "description": "A merchant request to make an offer to resolve a dispute.",
      "properties": {
        "note": {
          "type": "string",
          "minLength": 1,
          "maxLength": 2000,
          "description": "The merchant's notes about the offer. PayPal can, but the customer cannot, view these notes."
        },
        "offer_amount": {
          "description": "The amount proposed to resolve the dispute.",
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-money.json"
        },
        "return_shipping_address": {
          "description": "The return address for the item. Required when the customer must return an item to the merchant for the <code>MERCHANDISE_OR_SERVICE_NOT_AS_DESCRIBED</code> dispute reason, especially if the refund amount is less than the dispute amount.",
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-address_portable.json"
        },
        "invoice_id": {
          "type": "string",
          "minLength": 1,
          "maxLength": 127,
          "description": "The merchant-provided ID of the invoice for the refund. This optional value maps the refund to an invoice ID in the merchant's system."
        },
        "offer_type": {
          "$ref": "#/definitions/response-offer_type.json",
          "x-publicDocsSchemaName": "offer_type"
        }
      },
      "required": [
        "note",
        "offer_type"
      ],
      "x-publicDocsSchemaName": "make_offer"
    },
    "request-accept_offer.json": {
      "type": "object",
      "title": "Accept Offer Request",
      "description": "A customer request to accept the offer made by the merchant.",
      "properties": {
        "note": {
          "type": "string",
          "minLength": 1,
          "maxLength": 2000,
          "description": "The customer notes about accepting of offer. PayPal can but the merchant cannot view these notes."
        }
      },
      "x-publicDocsSchemaName": "accept_offer"
    },
    "request-deny_offer.json": {
      "type": "object",
      "title": "Deny Offer Request",
      "description": "A customer request to deny the offer made by the merchant.",
      "properties": {
        "note": {
          "type": "string",
          "minLength": 1,
          "maxLength": 2000,
          "description": "The customer notes about the denial of offer. PayPal can but the merchant cannot view these notes."
        }
      },
      "x-publicDocsSchemaName": "deny_offer"
    },
    "request-acknowledge_return_item.json": {
      "type": "object",
      "title": "Acknowledge Return Item Request",
      "description": "A merchant request to acknowledge receipt of the disputed item that the customer returned.",
      "properties": {
        "note": {
          "type": "string",
          "minLength": 1,
          "maxLength": 2000,
          "description": "The merchant provided notes. PayPal can but the consumer cannot view these notes."
        }
      },
      "x-publicDocsSchemaName": "acknowledge_return_item"
    },
    "request-provide_supporting_info.json": {
      "title": "Provide Supporting Information",
      "description": "The provide supporting information request details.",
      "type": "object",
      "properties": {
        "notes": {
          "type": "string",
          "minLength": 1,
          "maxLength": 2000,
          "description": "The notes that describe the defense."
        }
      },
      "required": [
        "notes"
      ],
      "x-publicDocsSchemaName": "provide_supporting_info_request"
    },
    "response-dispute_eligibility.json": {
      "type": "object",
      "title": "Dispute Eligibility Response",
      "description": "The eligible and ineligible disputes with reasons.",
      "x-visibility": {
        "extent": "LIMITED_RELEASE"
      },
      "properties": {
        "seller_transaction_id": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The seller transaction ID that is associated with the encrypted transaction ID that is passed in the request. The dispute creation is allowed on the buyer transaction ID, which must be passed in the create dispute call."
        },
        "buyer_transaction_id": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The buyer transaction ID that is associated with the `encrypted_transaction_id` passed in the request."
        },
        "eligible_dispute_reasons": {
          "type": "array",
          "description": "An array of the eligible disputes with reasons.",
          "x-publicDocsSchemaName": "eligible_dispute_reasons",
          "minItems": 0,
          "items": {
            "$ref": "#/definitions/response-eligible_dispute_reason.json",
            "x-publicDocsSchemaName": "eligible_dispute_reason"
          }
        },
        "ineligible_dispute_reasons": {
          "type": "array",
          "description": "An array of the ineligible disputes with ineligibility reasons.",
          "minItems": 0,
          "items": {
            "$ref": "#/definitions/response-ineligible_dispute_reason.json",
            "x-publicDocsSchemaName": "ineligible_dispute_reason"
          }
        },
        "recommended_dispute_reason": {
          "x-visibility": {
            "extent": "INTERNAL"
          },
          "$ref": "#/definitions/response-dispute_reason.json",
          "x-publicDocsSchemaName": "dispute_reason"
        }
      },
      "x-publicDocsSchemaName": "dispute_eligibility"
    },
    "response-eligible_dispute_reason.json": {
      "type": "object",
      "title": "Eligible Dispute Reason",
      "description": "The eligible dispute reason.",
      "x-publicDocsSchemaName": "eligible_dispute_reason",
      "properties": {
        "dispute_reason": {
          "$ref": "#/definitions/response-dispute_reason.json",
          "x-publicDocsSchemaName": "dispute_reason"
        },
        "allowable_life_cycle": {
          "type": "object",
          "title": "Allowable Lifecycle",
          "description": "The details about the allowable lifecycle stage and the reason why it is allowed.",
          "properties": {
            "stage": {
              "type": "string",
              "minLength": 1,
              "maxLength": 255,
              "readOnly": true,
              "description": "The stage in the dispute life cycle where the dispute creation is allowed.",
              "x-enum": [
                {
                  "value": "INQUIRY",
                  "description": "Dispute is allowed in the <code>INQUIRY</code> lifecycle stage."
                },
                {
                  "value": "CHARGEBACK",
                  "description": "Dispute is allowed in the <code>CHARGEBACK</code> lifecycle stage."
                }
              ]
            },
            "reason": {
              "type": "string",
              "minLength": 1,
              "maxLength": 2000,
              "readOnly": true,
              "description": "The reason why dispute creation is allowed in this lifecycle stage. Value is `SELLER_OPTED_OUT_OF_DISPUTE`, `LOCKED_SELLER`, `RESTRICTED_SELLER`, or `DISPUTE_DISABLED_PARTNER`."
            }
          }
        }
      }
    },
    "response-ineligible_dispute_reason.json": {
      "type": "object",
      "title": "Ineligible Dispute Reason",
      "description": "The ineligible dispute with the reason for ineligibility.",
      "x-publicDocsSchemaName": "ineligible_dispute_reason",
      "properties": {
        "dispute_reason": {
          "$ref": "#/definitions/response-dispute_reason.json",
          "x-publicDocsSchemaName": "dispute_reason"
        },
        "ineligibility_reason": {
          "type": "string",
          "minLength": 1,
          "maxLength": 2000,
          "description": "The reason that the dispute cannot be created."
        }
      }
    },
    "request-eligibility.json": {
      "type": "object",
      "title": "Eligibility Request",
      "description": "For a new case, lists the eligible and ineligible dispute reasons. For an existing dispute, lists the eligible and ineligible dispute reasons; the eligible reasons are the ones that the customer can use to update the dispute. To check the eligibility of case creation, specify the encrypted transaction ID. To check the eligibility of dispute reason modification, specify the dispute ID.",
      "properties": {
        "encrypted_transaction_id": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The encrypted transaction ID. The response lists the eligible and ineligible dispute reasons."
        },
        "dispute_id": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The ID of the dispute. The response lists the eligible and ineligible dispute reasons. The customer can use the eligible reasons to update the dispute."
        },
        "buyer_note": {
          "x-visibility": {
            "extent": "INTERNAL"
          },
          "type": "string",
          "minLength": 1,
          "maxLength": 2000,
          "description": "Customer provided description of the issue."
        }
      },
      "x-publicDocsSchemaName": "eligibility"
    },
    "response-metrics.json": {
      "type": "object",
      "title": "Metrics Response",
      "description": "The computed metrics for disputes.",
      "x-visibility": {
        "extent": "LIMITED_RELEASE"
      },
      "properties": {
        "metrics": {
          "type": "array",
          "description": "An array of dimension and measurement metrics for disputes.",
          "minItems": 0,
          "items": {
            "$ref": "#/definitions/response-metric.json",
            "x-publicDocsSchemaName": "metric"
          }
        }
      },
      "x-publicDocsSchemaName": "response_metrics"
    },
    "response-metric.json": {
      "type": "object",
      "title": "Metric",
      "description": "A metric.",
      "x-visibility": {
        "extent": "LIMITED_RELEASE"
      },
      "properties": {
        "key": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The group name for a dimension."
        },
        "count": {
          "type": "integer",
          "description": "The count of items in a group.",
          "minimum": 0,
          "maximum": 500000
        },
        "amount": {
          "type": "array",
          "description": "An array of the sums of amounts for each currency.",
          "items": {
            "description": "The sum of amounts for each currency.",
            "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-money.json",
            "x-publicDocsSchemaName": "amount_item"
          }
        }
      },
      "x-publicDocsSchemaName": "metric"
    },
    "request-metrics.json": {
      "type": "object",
      "title": "Metrics Request",
      "description": "List disputes with metrics.",
      "x-visibility": {
        "extent": "LIMITED_RELEASE"
      },
      "properties": {
        "dimension": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The dimension for which to list metrics.",
          "x-enum": [
            {
              "value": "STATUS",
              "description": "Shows the results of metrics by the <code>STATUS</code> dimension. For example, if the measure is <code>COUNT</code>, shows the count of disputes by different status."
            },
            {
              "value": "REASON",
              "description": "Shows the results of metrics by the <code>REASON</code> dimension. For example if the measure is <code>COUNT</code>, shows the count of disputes by different reason."
            },
            {
              "value": "DISPUTE_OUTCOME",
              "description": "Shows the results of metrics by the <code>OUTCOME</code> dimension. For example if the measure is <code>COUNT</code>, shows the count of disputes by different outcome."
            },
            {
              "value": "DISPUTE_STATE",
              "description": "Shows the results of metrics by the <code>DISPUTE_STATE</code> dimension. For example if the measure is <code>COUNT</code>, shows the count of disputes by different dispute states."
            }
          ]
        },
        "measure": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The measure for the dimension for which to list metrics.",
          "x-enum": [
            {
              "value": "COUNT",
              "description": "Shows the count of disputes by the dimension in the request."
            },
            {
              "value": "DISPUTE_AMOUNT_SUM",
              "description": "Shows the sum of dispute amount of the disputes by the dimension in the request."
            },
            {
              "value": "TRANSACTION_AMOUNT_SUM",
              "description": "Shows the sum of transaction amount of associated disputes by the dimension in the request."
            },
            {
              "value": "REFUND_AMOUNT_SUM",
              "description": "Shows the sum of refund amount of associated disputes by the dimension in the request."
            }
          ]
        },
        "filter": {
          "$ref": "#/definitions/request-filter.json"
        }
      },
      "x-publicDocsSchemaName": "request_metrics"
    },
    "request-filter.json": {
      "type": "object",
      "title": "Filter",
      "description": "A set of filters that you can use to filter the disputes in the response.",
      "x-visibility": {
        "extent": "LIMITED_RELEASE"
      },
      "properties": {
        "email": {
          "description": "Filters the disputes in the response by an email.",
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-email_address.json"
        },
        "name": {
          "type": "string",
          "minLength": 1,
          "maxLength": 2000,
          "description": "Filters the disputes in the response by the full name of a counter party."
        },
        "reasons": {
          "type": "string",
          "minLength": 1,
          "maxLength": 2000,
          "description": "Filters the disputes in the response by one or more reasons. Use a comma to separate multiple reasons. The response lists disputes that belong to any of the specified reasons."
        },
        "statuses": {
          "type": "string",
          "minLength": 1,
          "maxLength": 2000,
          "description": "Filters the disputes in the response by one or more statuses. Use a comma to separate multiple statuses. The response lists disputes with any of the specified statuses."
        },
        "create_time_before": {
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-date_time.json",
          "description": "Filters the disputes in the response to those that were created before this date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6)."
        },
        "create_time_after": {
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-date_time.json",
          "description": "Filters the disputes in the response to those that were created after this date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6)."
        },
        "update_time_before": {
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-date_time.json",
          "description": "Filters the disputes in the response to those that were updated before this date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6)."
        },
        "update_time_after": {
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-date_time.json",
          "description": "Filters the disputes in the response to those that were updated after this date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6)."
        },
        "response_due_date_before": {
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-date_time.json",
          "description": "Filters the disputes in the response to those that are due before this date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6)."
        },
        "response_due_date_after": {
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-date_time.json",
          "description": "Filters the disputes in the response to those that are due after this date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6)."
        },
        "dispute_amount_gte": {
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-money.json",
          "description": "Filters the disputes in the response to those that have a dispute amount that is greater than or equal to this amount."
        },
        "dispute_amount_lte": {
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-money.json",
          "description": "Filters the disputes in the response to those that have a dispute amount that is less than or equal to this amount."
        }
      },
      "x-publicDocsSchemaName": "filter"
    },
    "response-suggestion_response.json": {
      "type": "object",
      "title": "Dispute Search Suggestion Response",
      "description": "Arrays of auto-complete and DidYouMean values. Includes links that enable you to navigate through the response.",
      "x-visibility": {
        "extent": "INTERNAL"
      },
      "properties": {
        "suggestions": {
          "type": "array",
          "readOnly": true,
          "description": "An array of auto complete values for the given search_text if present.",
          "minItems": 1,
          "maxItems": 10,
          "items": {
            "type": "string",
            "description": "An auto complete value for the given search text.",
            "minLength": 1,
            "maxLength": 255
          }
        },
        "corrected_search_text": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "readOnly": true,
          "description": "The possible DidYouMean value if there are no suggestions for given search_text."
        },
        "links": {
          "type": "array",
          "description": "An array of request-related [HATEOAS links](/docs/api/hateoas-links/).",
          "minItems": 1,
          "maxItems": 10,
          "readOnly": true,
          "items": {
            "x-publicDocsSchemaName": "link_description",
            "readOnly": true,
            "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-link_description.json"
          }
        }
      },
      "x-links": [
        {
          "rel": "self",
          "href": "https://api.paypal.com/v1/customer/disputes/search-suggestions?search_text={search_text}&search_field={search_field}"
        }
      ]
    },
    "referred-eligibility_response.json": {
      "type": "object",
      "title": "Dispute Eligibility Response",
      "description": "The eligible and ineligible disputes with reasons. Disputes and refund information are returned, if applicable.",
      "x-visibility": {
        "extent": "LIMITED_RELEASE"
      },
      "properties": {
        "eligible": {
          "type": "boolean",
          "description": "Indicates whether the transaction can be disputed."
        },
        "allowable_life_cycle": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The details about the allowable life cycle stage and the reason why it is allowed.",
          "x-enum": [
            {
              "value": "INQUIRY",
              "description": "A customer and merchant interact in an attempt to resolve a dispute without escalation to PayPal. Occurs when a customer has not received goods or a service, the goods or service are not as described, or the customer needs additional details on a transaction, such as a copy of the transaction or a receipt"
            },
            {
              "value": "CHARGEBACK",
              "description": "This stage occurs when a customer or merchant escalates an inquiry to a claim. Claims give PayPal the authority to investigate the case and determine an outcome if the dispute channel is `INTERNAL`. This state is a PayPal dispute lifecycle stage and is not to be interpreted as a credit card or debit card charge back"
            }
          ]
        },
        "ineligibility_reason": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The reason that the dispute could not be created.",
          "x-enum": [
            {
              "value": "ITEM_CATEGORY_NOT_DISPUTABLE",
              "description": "The item category passed in is not disputable."
            },
            {
              "value": "TRANSACTION_TYPE_NOT_DISPUTABLE",
              "description": "Transaction Type is not disputable."
            },
            {
              "value": "COUNTERPARTY_NOT_DISPUTABLE",
              "description": "Counterparty transaction is not disputable"
            },
            {
              "value": "DISPUTE_ALREADY_EXISTS",
              "description": "Dispute already exists for a Transaction."
            },
            {
              "value": "INVALID_TRANSACTION_STATUS",
              "description": "Invalid Transaction Status."
            }
          ]
        },
        "existing_disputes": {
          "type": "array",
          "description": "An array of details about the disputes on the transaction.",
          "items": {
            "$ref": "#/definitions/referred-existing_dispute.json",
            "x-publicDocsSchemaName": "existing_dispute"
          }
        },
        "existing_refunds": {
          "type": "array",
          "description": "An array of details about the refunds on the disputed transaction, if applicable.",
          "items": {
            "$ref": "#/definitions/referred-refund_transaction.json",
            "x-publicDocsSchemaName": "refund_transaction"
          }
        }
      },
      "x-publicDocsSchemaName": "eligibility_response"
    },
    "referred-existing_dispute.json": {
      "type": "object",
      "title": "Paypal Dispute",
      "description": "The dispute details.",
      "x-visibility": {
        "extent": "LIMITED_RELEASE"
      },
      "properties": {
        "id": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "readOnly": true,
          "description": "The ID of the PayPal-side dispute."
        },
        "create_time": {
          "readOnly": true,
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-date_time.json",
          "description": "The date and time when the dispute was created, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *`yyyy`*-*`MM`*-*`dd`*`T`*`HH`*:*`mm`*:*`ss`*.*`SSS`*`Z`."
        },
        "update_time": {
          "readOnly": true,
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-date_time.json",
          "description": "The date and time when the dispute was updated, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *`yyyy`*-*`MM`*-*`dd`*`T`*`HH`*:*`mm`*:*`ss`*.*`SSS`*`Z`."
        },
        "reason": {
          "$ref": "#/definitions/referred-existing_reason.json",
          "description": "The reason of the dispute."
        },
        "status": {
          "$ref": "#/definitions/referred-status.json",
          "x-publicDocsSchemaName": "dispute_status",
          "description": "The status of the dispute."
        }
      },
      "x-publicDocsSchemaName": "existing_dispute"
    },
    "referred-existing_reason.json": {
      "type": "string",
      "minLength": 1,
      "maxLength": 255,
      "title": "Existing Reason",
      "description": "The reason for the dispute.",
      "x-visibility": {
        "extent": "LIMITED_RELEASE"
      },
      "x-enum": [
        {
          "value": "MERCHANDISE_OR_SERVICE_NOT_RECEIVED",
          "description": "The customer did not receive the merchandise or service."
        },
        {
          "value": "MERCHANDISE_OR_SERVICE_NOT_AS_DESCRIBED",
          "description": "The customer reports that the merchandise or service is not as described."
        },
        {
          "value": "UNAUTHORISED",
          "description": "The customer did not authorize purchase of the merchandise or service."
        },
        {
          "value": "CREDIT_NOT_PROCESSED",
          "description": "The refund or credit was not processed for the customer."
        },
        {
          "value": "DUPLICATE_TRANSACTION",
          "description": "The transaction was a duplicate."
        },
        {
          "value": "INCORRECT_AMOUNT",
          "description": "The customer was charged an incorrect amount."
        },
        {
          "value": "PAYMENT_BY_OTHER_MEANS",
          "description": "The customer paid for the transaction through other means."
        },
        {
          "value": "CANCELED_RECURRING_BILLING",
          "description": "The customer was being charged for a subscription or a recurring transaction that was canceled."
        },
        {
          "value": "PROBLEM_WITH_REMITTANCE",
          "description": "A problem occurred with the remittance."
        },
        {
          "value": "OTHER",
          "description": "This represents an internal PayPal dispute scenario. You need to contact PayPal for more information in this dispute."
        }
      ],
      "x-publicDocsSchemaName": "existing_reason",
      "properties": {}
    },
    "referred-status.json": {
      "type": "string",
      "minLength": 1,
      "maxLength": 255,
      "title": "Dispute Status",
      "description": "The dispute status.",
      "x-visibility": {
        "extent": "LIMITED_RELEASE"
      },
      "x-enum": [
        {
          "value": "OPEN",
          "description": "The dispute is open."
        },
        {
          "value": "CLOSED",
          "description": "The dispute is resolved."
        }
      ],
      "x-publicDocsSchemaName": "referred_status",
      "properties": {}
    },
    "referred-refund_transaction.json": {
      "type": "object",
      "title": "Refund Transaction",
      "description": "The refund transaction.",
      "x-visibility": {
        "extent": "LIMITED_RELEASE"
      },
      "properties": {
        "id": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The ID of the PayPal refund transaction."
        },
        "status": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The transaction status.",
          "x-enum": [
            {
              "value": "CREATED",
              "description": "Refund transaction is newly created."
            },
            {
              "value": "DENIED",
              "description": "The refund transaction was denied."
            },
            {
              "value": "FAILED",
              "description": "The refund transaction failed."
            },
            {
              "value": "HELD",
              "description": "The refund transaction is on hold."
            },
            {
              "value": "PENDING",
              "description": "The refund transaction is waiting to be processed."
            },
            {
              "value": "PROCESSING",
              "description": "The refund transaction is getting processed."
            },
            {
              "value": "PARTIALLY_REFUNDED",
              "description": "The payment for the transaction was partially refunded."
            },
            {
              "value": "REFUNDED",
              "description": "The payment for the transaction was successfully refunded."
            },
            {
              "value": "REVERSED",
              "description": "The payment for the refund transaction was reversed."
            },
            {
              "value": "CANCELED",
              "description": "The payment for the transaction was canceled."
            },
            {
              "value": "OTHER",
              "description": "The refund transaction is in some unknown status."
            }
          ]
        },
        "gross_amount": {
          "description": "The gross amount of the transaction.",
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-money.json"
        },
        "create_time": {
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-date_time.json",
          "description": "The date and time when the refund transaction was created, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *`yyyy`*-*`MM`*-*`dd`*`T`*`HH`*:*`mm`*:*`ss`*.*`SSS`*`Z`."
        }
      },
      "x-publicDocsSchemaName": "refund_transaction"
    },
    "referred-eligibility_request.json": {
      "type": "object",
      "title": "Eligibility Request",
      "description": "For a new third-party case, lists the eligible and ineligible dispute reasons. The customer can use the eligible reasons to create a dispute. To check the eligibility of case creation, specify the encrypted transaction ID.",
      "x-visibility": {
        "extent": "LIMITED_RELEASE"
      },
      "properties": {
        "transaction_id": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The encrypted transaction ID."
        },
        "disputed_items": {
          "type": "array",
          "description": "An array of the items in the disputed transaction.",
          "items": {
            "$ref": "#/definitions/referred-eligibility_request_item.json",
            "x-publicDocsSchemaName": "eligibility_request_item"
          }
        }
      },
      "required": [
        "transaction_id"
      ],
      "x-publicDocsSchemaName": "eligibility_request"
    },
    "referred-eligibility_request_item.json": {
      "type": "object",
      "title": "Eligibility Request Items",
      "description": "Information about the items in the transaction.",
      "x-visibility": {
        "extent": "LIMITED_RELEASE"
      },
      "properties": {
        "id": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The ID of the item."
        },
        "category": {
          "$ref": "#/definitions/referred-item_category.json",
          "x-publicDocsSchemaName": "category"
        }
      },
      "x-publicDocsSchemaName": "eligibility_request_item"
    },
    "referred-item_category.json": {
      "type": "string",
      "minLength": 1,
      "maxLength": 255,
      "title": "Item Category",
      "description": "The category of the item in dispute.",
      "x-visibility": {
        "extent": "LIMITED_RELEASE"
      },
      "x-enum": [
        {
          "value": "COMPUTERS",
          "description": "Computer or related accessories."
        },
        {
          "value": "HOME",
          "description": "Home appliances."
        },
        {
          "value": "JEWELRY",
          "description": "Decorative items, ornaments, and so on."
        },
        {
          "value": "ANTIQUES",
          "description": "Antiques and collectible items."
        },
        {
          "value": "ENTERTAINMENT",
          "description": "Entertainment goods, such as video games, DVDs, and so on."
        },
        {
          "value": "OTHER_TANGIBLES",
          "description": "Other material goods."
        },
        {
          "value": "TRAVEL",
          "description": "Travel items and travel needs."
        },
        {
          "value": "SERVICE",
          "description": "Services, such as installation, repair, and so on."
        },
        {
          "value": "VIRTUAL_GOODS",
          "description": "Non-physical objects, such as online games."
        },
        {
          "value": "OTHER_INTANGIBLES",
          "description": "Other intangible goods."
        },
        {
          "value": "TICKETS",
          "description": "Tickets for events, such as sports, concerts, and so on."
        }
      ],
      "x-publicDocsSchemaName": "category",
      "properties": {}
    },
    "referred-dispute_create_response.json": {
      "type": "object",
      "title": "Dispute Create Response",
      "description": "The create dispute response.",
      "x-visibility": {
        "extent": "LIMITED_RELEASE"
      },
      "properties": {
        "links": {
          "type": "array",
          "description": "An array of request-related [HATEOAS links](/docs/api/hateoas-links/).",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-link_description.json",
            "x-publicDocsSchemaName": "link_description"
          }
        }
      },
      "x-publicDocsSchemaName": "dispute_create_response"
    },
    "referred-dispute_create_request.json": {
      "type": "object",
      "title": "Dispute Create Request",
      "description": "The referred dispute details.",
      "x-visibility": {
        "extent": "LIMITED_RELEASE"
      },
      "properties": {
        "dispute_flow": {
          "$ref": "#/definitions/referred-dispute_flow.json"
        },
        "extensions": {
          "$ref": "#/definitions/referred-extensions.json",
          "x-publicDocsSchemaName": "referred_extensions",
          "x-visibility": {
            "extent": "LIMITED_RELEASE"
          }
        },
        "transaction": {
          "description": "The details about the transactions that are part of the referred dispute.",
          "$ref": "#/definitions/referred-transaction.json"
        },
        "reference_dispute": {
          "$ref": "#/definitions/referred-reference_dispute.json"
        },
        "evidences": {
          "type": "array",
          "description": "An array of partner-submitted evidence documents, such as tracking information.",
          "items": {
            "$ref": "#/definitions/referred-evidence.json",
            "x-publicDocsSchemaName": "evidence"
          }
        },
        "reason": {
          "$ref": "#/definitions/referred-reason.json"
        },
        "sub_reason": {
          "$ref": "#/definitions/referred-sub_reason.json"
        },
        "messages": {
          "type": "array",
          "description": "An array of customer- or merchant-posted messages.",
          "items": {
            "$ref": "#/definitions/referred-message.json",
            "x-publicDocsSchemaName": "referred_message"
          }
        }
      },
      "required": [
        "transaction",
        "reference_dispute"
      ],
      "x-publicDocsSchemaName": "dispute_create_request"
    },
    "referred-dispute_flow.json": {
      "type": "string",
      "minLength": 1,
      "maxLength": 255,
      "title": "Dispute Flow",
      "description": "The flow ID for the dispute being created.",
      "x-visibility": {
        "extent": "LIMITED_RELEASE"
      },
      "x-enum": [
        {
          "value": "THIRD_PARTY_CLAIM",
          "description": "Third-party claim information that the dispute requires custom handling."
        },
        {
          "value": "THIRD_PARTY_DISPUTE",
          "description": "Third-party claim information that the dispute does not require any special handling. Defaults to default procedures."
        }
      ],
      "x-publicDocsSchemaName": "dispute_flow",
      "properties": {}
    },
    "referred-extensions.json": {
      "type": "object",
      "title": "Referred Extensions",
      "description": "The extended properties for the dispute. Includes additional information for a dispute category, such as billing disputes, the original transaction ID, correct amount, and so on.",
      "x-visibility": {
        "extent": "LIMITED_RELEASE"
      },
      "properties": {
        "transaction_hold_info": {
          "type": "object",
          "title": "Transaction Hold Information",
          "description": "The transaction hold information.",
          "properties": {
            "hold_required": {
              "type": "boolean",
              "description": "Indicates whether a temporary hold must be placed on the transaction."
            },
            "id": {
              "type": "string",
              "minLength": 1,
              "maxLength": 255,
              "description": "The temporary hold ID."
            },
            "reason": {
              "type": "string",
              "minLength": 1,
              "maxLength": 2000,
              "description": "The reason for the temporary hold on the dispute."
            }
          }
        },
        "transaction_risk_info": {
          "type": "object",
          "title": "Transaction Risk Information",
          "description": "The transaction risk information.",
          "properties": {
            "high_risk": {
              "type": "boolean",
              "description": "Indicates whether the transaction is high risk and money must be recovered."
            },
            "id": {
              "type": "string",
              "minLength": 1,
              "maxLength": 255,
              "description": "The recoup ID."
            },
            "reason": {
              "type": "string",
              "minLength": 1,
              "maxLength": 2000,
              "description": "The reason for recoup for the dispute."
            }
          }
        }
      },
      "x-publicDocsSchemaName": "referred_extensions"
    },
    "referred-transaction.json": {
      "type": "object",
      "title": "Referred Transaction",
      "description": "The transaction for which to create a case.",
      "x-visibility": {
        "extent": "LIMITED_RELEASE"
      },
      "properties": {
        "id": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The ID of the PayPal transaction."
        },
        "items": {
          "type": "array",
          "description": "An array of items in the transaction in the dispute.",
          "items": {
            "$ref": "#/definitions/referred-item_info.json",
            "x-publicDocsSchemaName": "referred_item_info"
          }
        },
        "status": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The transaction status.",
          "x-enum": [
            {
              "value": "COMPLETED",
              "description": "The transaction processing is complete."
            },
            {
              "value": "UNCLAIMED",
              "description": "The items in the transaction are unclaimed. If they are not claimed within 30 days, the funds are returned to the sender."
            },
            {
              "value": "DENIED",
              "description": "The transaction was denied."
            },
            {
              "value": "FAILED",
              "description": "The transaction failed."
            },
            {
              "value": "HELD",
              "description": "The transaction is on hold."
            },
            {
              "value": "PENDING",
              "description": "The transaction is waiting to be processed."
            },
            {
              "value": "PARTIALLY_REFUNDED",
              "description": "The payment for the transaction was partially refunded."
            },
            {
              "value": "REFUNDED",
              "description": "The payment for the transaction was successfully refunded."
            },
            {
              "value": "REVERSED",
              "description": "The payment for the transaction was reversed due to a chargeback or another type of reversal."
            },
            {
              "value": "CANCELED",
              "description": "The payment for the transaction was canceled."
            }
          ]
        },
        "gross_amount": {
          "description": "The gross amount of the transaction.",
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-money.json"
        },
        "create_time": {
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-date_time.json",
          "description": "The date and time when the transaction was created, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *`yyyy`*-*`MM`*-*`dd`*`T`*`HH`*:*`mm`*:*`ss`*.*`SSS`*`Z`."
        }
      },
      "x-publicDocsSchemaName": "transaction"
    },
    "referred-item_info.json": {
      "type": "object",
      "title": "Item Information",
      "description": "The information for a purchased item in a disputed transaction.",
      "x-visibility": {
        "extent": "LIMITED_RELEASE"
      },
      "properties": {
        "id": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The ID of the item."
        },
        "category": {
          "$ref": "#/definitions/referred-item_category.json",
          "x-publicDocsSchemaName": "category"
        },
        "description": {
          "type": "string",
          "minLength": 1,
          "maxLength": 2000,
          "description": "The description of the item."
        },
        "partner_transaction_id": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The ID of the transaction in the partner system. The partner transaction ID is returned at an item level because the partner might show different transactions for different items in the cart."
        },
        "reason": {
          "$ref": "#/definitions/referred-reason.json"
        },
        "sub_reason": {
          "$ref": "#/definitions/referred-sub_reason.json"
        },
        "amount": {
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-money.json",
          "description": "The amount of the item in the dispute."
        },
        "note": {
          "type": "string",
          "minLength": 1,
          "maxLength": 2000,
          "description": "Any notes provided with the item."
        }
      },
      "x-publicDocsSchemaName": "referred_item_info"
    },
    "referred-reason.json": {
      "type": "string",
      "minLength": 1,
      "maxLength": 255,
      "title": "Dispute Reason",
      "description": "The reason for the item-level dispute. For information about the required information for each dispute reason and associated evidence type, see <a href=\"/docs/integration/direct/customer-disputes/integration-guide/#dispute-reasons\">dispute reasons</a>.",
      "x-visibility": {
        "extent": "LIMITED_RELEASE"
      },
      "x-enum": [
        {
          "value": "MERCHANDISE_OR_SERVICE_NOT_RECEIVED",
          "description": "The customer did not receive the merchandise or service."
        },
        {
          "value": "MERCHANDISE_OR_SERVICE_NOT_AS_DESCRIBED",
          "description": "The customer reports that the merchandise or service is not as described."
        }
      ],
      "x-publicDocsSchemaName": "dispute_reason",
      "properties": {}
    },
    "referred-sub_reason.json": {
      "type": "string",
      "minLength": 1,
      "maxLength": 255,
      "title": "Dispute Sub-Reason",
      "description": "The dispute sub-reason.",
      "x-visibility": {
        "extent": "LIMITED_RELEASE"
      },
      "x-enum": [
        {
          "value": "INCOMPLETE_ORDER",
          "description": "The order is incomplete. It has missing parts or an incorrect quantity."
        },
        {
          "value": "DAMAGED",
          "description": "The goods are damaged."
        },
        {
          "value": "FAKE",
          "description": "The item is fake."
        },
        {
          "value": "MATERIALLY_DIFFERENT",
          "description": "The item is materially different. It is a different item, the wrong size or model,the wrong color, or used instead of new."
        },
        {
          "value": "UNUSABLE",
          "description": "The item is unusable or ruined."
        },
        {
          "value": "EXCESSIVE_SURCHARGE",
          "description": "The surcharge is incorrect."
        }
      ],
      "x-publicDocsSchemaName": "sub_reason",
      "properties": {}
    },
    "referred-reference_dispute.json": {
      "type": "object",
      "title": "Reference Dispute",
      "description": "The details about the partner dispute.",
      "x-visibility": {
        "extent": "LIMITED_RELEASE"
      },
      "properties": {
        "id": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The dispute ID of the partner dispute for which a PayPal dispute is created."
        },
        "create_time": {
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-date_time.json",
          "description": "The date and time when the dispute was created at the partner site, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *`yyyy`*-*`MM`*-*`dd`*`T`*`HH`*:*`mm`*:*`ss`*.*`SSS`*`Z`."
        }
      },
      "x-publicDocsSchemaName": "reference_dispute"
    },
    "referred-evidence.json": {
      "type": "object",
      "title": "Evidence",
      "description": "A merchant- or customer-submitted evidence document.",
      "x-visibility": {
        "extent": "LIMITED_RELEASE"
      },
      "properties": {
        "evidence_info": {
          "$ref": "#/definitions/referred-evidence_info.json",
          "x-publicDocsSchemaName": "referred_evidence_info"
        },
        "documents": {
          "type": "array",
          "description": "An array of evidence documents.",
          "items": {
            "$ref": "#/definitions/referred-document.json",
            "x-publicDocsSchemaName": "referred_document"
          }
        },
        "notes": {
          "type": "string",
          "minLength": 1,
          "maxLength": 2000,
          "description": "Any notes about the evidence."
        }
      },
      "x-publicDocsSchemaName": "referred_evidence"
    },
    "referred-evidence_info.json": {
      "type": "object",
      "title": "Evidence Information",
      "description": "The evidence-related information.",
      "properties": {
        "tracking_info": {
          "type": "array",
          "description": "An array of relevant tracking information for the transaction involved in this dispute.",
          "items": {
            "$ref": "#/definitions/referred-tracking_info_item.json",
            "x-publicDocsSchemaName": "tracking_info_item"
          }
        }
      },
      "x-publicDocsSchemaName": "referred_evidence_info"
    },
    "referred-tracking_info_item.json": {
      "type": "object",
      "title": "Tracking Info Item",
      "description": "The tracking information item.",
      "x-visibility": {
        "extent": "LIMITED_RELEASE"
      },
      "properties": {
        "carrier_name": {
          "type": "string",
          "minLength": 1,
          "maxLength": 2000,
          "description": "The name of the carrier for the shipment of the transaction for this dispute."
        },
        "tracking_url": {
          "type": "string",
          "minLength": 1,
          "maxLength": 2000,
          "format": "uri",
          "description": "The URL to track the item shipment."
        },
        "tracking_number": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The tracking number for the dispute-related transaction shipment."
        },
        "tracking_status": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "Each Tracking info sent to PP should be mapped to tracking status.",
          "x-enum": [
            {
              "value": "INVALID",
              "description": "The tracking information is invalid."
            },
            {
              "value": "NO_TRACKING",
              "description": "The tracking information is not available."
            },
            {
              "value": "IN_TRANSIT",
              "description": "The disputed item is in transit."
            },
            {
              "value": "LOST",
              "description": "The disputed item is lost."
            },
            {
              "value": "DELIVERED",
              "description": "The disputed item was delivered to the customer."
            }
          ]
        },
        "note": {
          "type": "string",
          "minLength": 1,
          "maxLength": 2000,
          "description": "Any notes about the tracking information."
        },
        "posted_time": {
          "readOnly": true,
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-date_time.json",
          "description": "The date and time when the message was posted, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6)."
        }
      },
      "x-publicDocsSchemaName": "tracking_info_item"
    },
    "referred-document.json": {
      "type": "object",
      "title": "Document",
      "description": "The tracking document details.",
      "x-visibility": {
        "extent": "LIMITED_RELEASE"
      },
      "properties": {
        "id": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The tracking document ID."
        },
        "name": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The tracking document name."
        },
        "description": {
          "type": "string",
          "minLength": 1,
          "maxLength": 2000,
          "description": "The tracking document description."
        },
        "url": {
          "type": "string",
          "minLength": 1,
          "maxLength": 2000,
          "format": "uri",
          "readOnly": true,
          "description": "The tracking document URI."
        }
      },
      "x-publicDocsSchemaName": "referred_document"
    },
    "referred-message.json": {
      "type": "object",
      "title": "Message",
      "description": "The customer- or merchant-provided messages about the dispute.",
      "x-visibility": {
        "extent": "LIMITED_RELEASE"
      },
      "properties": {
        "posted_by": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The customer or merchant who posted the message.",
          "readOnly": true,
          "x-enum": [
            {
              "value": "BUYER",
              "description": "The customer posted the message."
            },
            {
              "value": "SELLER",
              "description": "The merchant posted the message."
            }
          ]
        },
        "posted_time": {
          "readOnly": true,
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-date_time.json",
          "description": "The date and time when the message was posted, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6)."
        },
        "content": {
          "type": "string",
          "description": "The customer- or merchant-posted content.",
          "maxLength": 2000,
          "minLength": 0
        }
      },
      "required": [
        "posted_by",
        "content"
      ],
      "x-publicDocsSchemaName": "referred_message"
    },
    "referred-referred_disputes.json": {
      "type": "object",
      "title": "Referred Dispute Search Response",
      "description": "An array of disputes. Includes links that enable you to navigate through the response.",
      "x-visibility": {
        "extent": "LIMITED_RELEASE"
      },
      "properties": {
        "items": {
          "type": "array",
          "description": "An array of disputes that match the filter criteria. Sorted in latest to earliest creation time order.",
          "x-publicDocsSchemaName": "disputes",
          "items": {
            "x-publicDocsSchemaName": "dispute_summary",
            "$ref": "#/definitions/referred-referred_dispute_summary.json"
          }
        },
        "total_items": {
          "type": "integer",
          "readOnly": true,
          "description": "The total number of items/Disputes available for the given search criteria.",
          "minimum": 0,
          "maximum": 500000
        },
        "total_pages": {
          "type": "integer",
          "readOnly": true,
          "description": "The total number of pages in the response.",
          "minimum": 0,
          "maximum": 500000
        },
        "links": {
          "type": "array",
          "description": "An array of request-related [HATEOAS links](/docs/api/hateoas-links/).",
          "readOnly": true,
          "items": {
            "x-publicDocsSchemaName": "link_description",
            "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-link_description.json",
            "readOnly": true
          }
        }
      },
      "x-links": [
        {
          "rel": "prev",
          "href": "https://api.paypal.com/v1/customer/disputes?page_size={page_size}&create_time_before={create_time_before}&create_time_after={create_time_after}&page_token={page_token}"
        },
        {
          "rel": "self",
          "href": "https://api.paypal.com/v1/customer/disputes?page_size={page_size}&create_time_before={create_time_before}&create_time_after={create_time_after}&page_token={page_token}"
        },
        {
          "rel": "next",
          "href": "https://api.paypal.com/v1/customer/disputes?page_size={page_size}&create_time_before={create_time_before}&create_time_after={create_time_after}&page_token={page_token}"
        },
        {
          "rel": "first",
          "href": "https://api.paypal.com/v1/customer/disputes?page_size={page_size}&create_time_before={create_time_before}&create_time_after={create_time_after}"
        }
      ]
    },
    "referred-referred_dispute_summary.json": {
      "type": "object",
      "title": "Referred Dispute",
      "description": "The dispute details.",
      "x-visibility": {
        "extent": "LIMITED_RELEASE"
      },
      "properties": {
        "dispute_id": {
          "type": "string",
          "readOnly": true,
          "minLength": 6,
          "maxLength": 20,
          "description": "The ID of the PayPal-side dispute."
        },
        "create_time": {
          "readOnly": true,
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-date_time.json",
          "description": "The date and time when the dispute was created, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *`yyyy`*-*`MM`*-*`dd`*`T`*`HH`*:*`mm`*:*`ss`*.*`SSS`*`Z`."
        },
        "update_time": {
          "readOnly": true,
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-date_time.json",
          "description": "The date and time when the dispute was last updated, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *`yyyy`*-*`MM`*-*`dd`*`T`*`HH`*:*`mm`*:*`ss`*.*`SSS`*`Z`."
        },
        "reference_disputes": {
          "type": "array",
          "description": "The details about the partner disputes.",
          "items": {
            "$ref": "#/definitions/referred-reference_dispute.json"
          }
        },
        "dispute_amount": {
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-money.json",
          "description": "The amount in the transaction that the customer originally disputed. Because customers can sometimes dispute only part of the payment, the disputed amount might be different from the total gross or net amount of the original transaction."
        },
        "reason": {
          "$ref": "#/definitions/referred-reason.json",
          "x-publicDocsSchemaName": "reason"
        },
        "status": {
          "$ref": "#/definitions/referred-status.json",
          "description": "The status of the dispute.",
          "x-publicDocsSchemaName": "referred_status",
          "x-visibility": {
            "extent": "INTERNAL"
          }
        },
        "dispute_flow": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "readOnly": true,
          "description": "The dispute flow name.",
          "x-enum": [
            {
              "value": "THIRD_PARTY_CLAIM",
              "description": "A third-party claim. The dispute requires custom handling."
            },
            {
              "value": "THIRD_PARTY_DISPUTE",
              "description": "A third-party dispute. The dispute does not require any special handling. Defaults to default procedures."
            }
          ]
        },
        "links": {
          "type": "array",
          "description": "An array of request-related [HATEOAS links](/docs/api/hateoas-links/).",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-link_description.json",
            "x-publicDocsSchemaName": "link_description",
            "readOnly": true
          }
        }
      },
      "x-links": [
        {
          "href": "https://api.paypal.com/v1/customer/referred-disputes/{dispute_id}",
          "rel": "self",
          "method": "GET"
        }
      ],
      "x-publicDocsSchemaName": "dispute_summary"
    },
    "referred-dispute.json": {
      "type": "object",
      "title": "Referred Dispute Details",
      "description": "The dispute details.",
      "x-visibility": {
        "extent": "LIMITED_RELEASE"
      },
      "properties": {
        "id": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "readOnly": true,
          "description": "The ID of the PayPal-side dispute."
        },
        "create_time": {
          "readOnly": true,
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-date_time.json",
          "description": "The date and time when the dispute was created, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *`yyyy`*-*`MM`*-*`dd`*`T`*`HH`*:*`mm`*:*`ss`*.*`SSS`*`Z`."
        },
        "update_time": {
          "readOnly": true,
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-date_time.json",
          "description": "The date and time when the dispute was last updated, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *`yyyy`*-*`MM`*-*`dd`*`T`*`HH`*:*`mm`*:*`ss`*.*`SSS`*`Z`."
        },
        "dispute_flow": {
          "$ref": "#/definitions/referred-dispute_flow.json",
          "description": "The flow ID for the dispute being created."
        },
        "reference_disputes": {
          "type": "array",
          "description": "The details about the partner disputes.",
          "items": {
            "$ref": "#/definitions/referred-reference_dispute.json"
          }
        },
        "transaction": {
          "description": "The details about the transactions in the referred dispute.",
          "$ref": "#/definitions/referred-transaction.json"
        },
        "extensions": {
          "$ref": "#/definitions/referred-extensions.json",
          "x-publicDocsSchemaName": "referred_extensions",
          "x-visibility": {
            "extent": "LIMITED_RELEASE"
          }
        },
        "reason": {
          "$ref": "#/definitions/referred-reason.json"
        },
        "sub_reason": {
          "$ref": "#/definitions/referred-sub_reason.json"
        },
        "status": {
          "$ref": "#/definitions/referred-status.json",
          "x-publicDocsSchemaName": "referred_status",
          "description": "The status of the dispute."
        },
        "evidences": {
          "type": "array",
          "description": "The partner-submitted evidence documents, such as tracking information.",
          "items": {
            "$ref": "#/definitions/referred-evidence.json",
            "x-publicDocsSchemaName": "referred_evidence"
          }
        },
        "refund_info": {
          "$ref": "#/definitions/referred-refund_info.json"
        },
        "outcome": {
          "description": "The outcome of the case.",
          "$ref": "#/definitions/referred-outcome.json"
        },
        "messages": {
          "type": "array",
          "description": "An array of customer- or merchant-posted messages.",
          "items": {
            "$ref": "#/definitions/referred-message.json",
            "x-publicDocsSchemaName": "referred_message"
          }
        },
        "links": {
          "type": "array",
          "description": "An array of request-related [HATEOAS links](/docs/api/hateoas-links/).",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-link_description.json",
            "x-publicDocsSchemaName": "link_description",
            "readOnly": true
          }
        }
      },
      "x-links": [
        {
          "href": "https://api.paypal.com/v1/customer/referred-disputes/{dispute_id}",
          "rel": "self"
        },
        {
          "href": "https://api.paypal.com/v1/customer/referred-disputes/{dispute_id}/process-refund-event",
          "rel": "process-refund-event",
          "method": "POST"
        },
        {
          "href": "https://api.paypal.com/v1/customer/referred-disputes/{dispute_id}/process-adjudication-event",
          "rel": "process-adjudication-event",
          "method": "POST"
        }
      ],
      "x-publicDocsSchemaName": "referred_dispute"
    },
    "referred-refund_info.json": {
      "type": "object",
      "title": "Refund Information",
      "description": "The payout details for the referred dispute.",
      "x-visibility": {
        "extent": "LIMITED_RELEASE"
      },
      "properties": {
        "recipient": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The payout recipient information.",
          "x-enum": [
            {
              "value": "BUYER",
              "description": "The customer received the refund."
            },
            {
              "value": "SELLER",
              "description": "The merchant received the refund."
            }
          ]
        },
        "amount": {
          "description": "The amount of the payout for the dispute.",
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-money.json"
        },
        "create_time": {
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-date_time.json",
          "description": "The date and time when the payout is made, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *`yyyy`*-*`MM`*-*`dd`*`T`*`HH`*:*`mm`*:*`ss`*.*`SSS`*`Z`."
        },
        "transaction_id": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The encrypted transaction ID, if available."
        },
        "payout_type": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The type of payout.",
          "x-enum": [
            {
              "value": "REVERSAL",
              "description": "The payout was made with the reversal of the original transaction, from the merchant to the customer."
            },
            {
              "value": "COURTESY_CREDIT",
              "description": "The payout was made through a courtesy credit."
            },
            {
              "value": "SELLER_PROTECTION_COVERAGE",
              "description": "The payout was made through Seller Protection coverage."
            }
          ]
        },
        "seller_protection_eligible": {
          "type": "boolean",
          "description": "Indicates whether the merchant is eligible for protection on the disputed transaction."
        },
        "transaction_source": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The site where the transaction occurred.",
          "x-enum": [
            {
              "value": "PAYPAL",
              "description": "The transaction occurred on PayPal."
            },
            {
              "value": "OTHER",
              "description": "The transaction occurred on a third-party site other than PayPal."
            }
          ]
        }
      },
      "required": [
        "recipient",
        "amount",
        "create_time",
        "payout_type",
        "seller_protection_eligible",
        "transaction_source"
      ],
      "x-publicDocsSchemaName": "refund_info"
    },
    "referred-outcome.json": {
      "type": "object",
      "title": "Case Outcome",
      "description": "The outcome of the dispute case.",
      "x-visibility": {
        "extent": "LIMITED_RELEASE"
      },
      "properties": {
        "faulty_party": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "The party that was at fault.",
          "x-enum": [
            {
              "value": "BUYER",
              "description": "The customer is at fault."
            },
            {
              "value": "SELLER",
              "description": "The merchant is at fault."
            },
            {
              "value": "PARTNER",
              "description": "The partner is at fault."
            },
            {
              "value": "NONE",
              "description": "No specific party is at fault."
            }
          ]
        },
        "adjudication_reason": {
          "type": "string",
          "minLength": 1,
          "maxLength": 2000,
          "description": "The reason for the decision."
        },
        "resolution_date": {
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-date_time.json",
          "description": "The date and time when the case was closed, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *`yyyy`*-*`MM`*-*`dd`*`T`*`HH`*:*`mm`*:*`ss`*.*`SSS`*`Z`."
        }
      },
      "required": [
        "faulty_party",
        "adjudication_reason"
      ],
      "x-publicDocsSchemaName": "outcome"
    },
    "referred-subsequent_action.json": {
      "type": "object",
      "title": "Subsequent Actions",
      "description": "A list of subsequent actions.",
      "x-visibility": {
        "extent": "LIMITED_RELEASE"
      },
      "properties": {
        "links": {
          "type": "array",
          "description": "An array of request-related [HATEOAS links](/docs/api/hateoas-links/).",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-link_description.json",
            "x-publicDocsSchemaName": "link_description",
            "readOnly": true
          }
        }
      },
      "x-publicDocsSchemaName": "referred_subsequent_actions"
    },
    "referred-adjudication_info.json": {
      "type": "object",
      "title": "Adjudication Details",
      "description": "The partner-provided details that were used for adjudication on the partner's side.",
      "x-visibility": {
        "extent": "LIMITED_RELEASE"
      },
      "properties": {
        "dispute_amount": {
          "description": "The actual amount that was disputed on the third-party site.",
          "$ref": "#/definitions/common_components-v3-schema-json-openapi-2.0-money.json"
        },
        "items": {
          "type": "array",
          "description": "An array of items in the transaction that is in dispute.",
          "items": {
            "$ref": "#/definitions/referred-item_info.json",
            "x-publicDocsSchemaName": "referred_item_info"
          }
        },
        "outcome": {
          "description": "The outcome of the case.",
          "$ref": "#/definitions/referred-outcome.json"
        },
        "extensions": {
          "$ref": "#/definitions/referred-extensions.json",
          "x-publicDocsSchemaName": "referred_extensions",
          "x-visibility": {
            "extent": "LIMITED_RELEASE"
          }
        },
        "evidences": {
          "type": "array",
          "description": "An array of partner-submitted evidences, such as tracking information.",
          "items": {
            "$ref": "#/definitions/referred-evidence.json",
            "x-publicDocsSchemaName": "referred_evidence"
          }
        },
        "dispute_reason": {
          "description": "The reason for the dispute, if the reason has changed during the dispute lifecycle.",
          "$ref": "#/definitions/referred-reason.json"
        },
        "closure_reason": {
          "type": "string",
          "minLength": 1,
          "maxLength": 2000,
          "description": "The reason that the dispute was closed."
        },
        "messages": {
          "type": "array",
          "description": "An array of customer- or merchant-posted messages.",
          "items": {
            "$ref": "#/definitions/referred-message.json",
            "x-publicDocsSchemaName": "referred_message"
          }
        }
      },
      "x-publicDocsSchemaName": "adjudication_info"
    }
  },
  "x-errors": [
    {
      "name": "ACTION_NOT_ALLOWED_IN_CURRENT_DISPUTE_STATE",
      "message": "This action is not allowed for this dispute ID. For the allowed actions, see the HATEOAS link in [show dispute details](/docs/api/customer-disputes/v1/#disputes_get).",
      "description": "You cannot complete this action for this dispute ID."
    },
    {
      "name": "AMOUNT_SHOULD_NOT_BE_PASSED",
      "message": "For `MERCHANDISE_OR_SERVICE_NOT_RECEIVED` dsiputes, refund amount cannot be specified in accept claim as this feature is not yet supported in PayPal Dispute system.",
      "description": "You cannot specify the refund amount in an accept claim call."
    },
    {
      "name": "AUTHORIZATION_ERROR",
      "message": "Authorization error occurred.",
      "description": "An authorization error occurred. Check your credentials."
    },
    {
      "name": "DATE_CAN_NOT_BE_IN_FUTURE",
      "message": "The `start_time` is incorrect. The `start_time` must be earlier than the current date and time stamp.",
      "description": "The specified start time is in the future."
    },
    {
      "name": "DISPUTE_REASON_NOT_ELIGIBLE",
      "message": "This dispute reason is not allowed for this transaction. To review the allowed reasons for this transaction, call validate transaction eligibility. Then, retry with one of the allowed reasons.",
      "description": "The specified dispute reason is not valid."
    },
    {
      "name": "INSUFFICIENT_FUNDS",
      "message": "You have insufficient funds in your account to accept a claim for this dispute. Add the appropriate balance to your PayPal account before you accept a claim for this case.",
      "description": "Your account has insufficient funds for this claim."
    },
    {
      "name": "INTANGIBLE_ITEM_CANNOT_BE_RETURNED",
      "message": "Return shipping address cannot be specified in accept claim for intangible item related disputes as this applies only for tangible item related transactions.",
      "description": "You cannot specify the shipping address in an accept claim call for intangible item-related disputes."
    },
    {
      "name": "INTERNAL_SERVICE_ERROR",
      "message": "An internal service error has occurred.",
      "description": "Resend the request at another time."
    },
    {
      "name": "INVALID_EVIDENCE_FILE",
      "message": "The evidence file is not valid. The user can upload up to 10 MB of files for a case. Individual files must be smaller than 5 MB. The supported file formats are JPG, GIF, PNG, and PDF. Correct and retry the request.",
      "description": "The evidence file is not valid."
    },
    {
      "name": "INVALID_EVIDENCE_TYPE_PROOF_OF_FULFILLMENT",
      "message": "The `PROOF_OF_FULFILLMENT` evidence type is not a valid evidence type for this dispute reason and status. Retry the request with a different evidence type.",
      "description": "This evidence type is not valid for this dispute reason and status."
    },
    {
      "name": "INVALID_PAGE_SIZE",
      "message": "The `page_size` is outside the allowed range. A valid `page_size` is from 1 to 50. Retry the request.",
      "description": "The page size is outside the allowed range."
    },
    {
      "name": "INVALID_RETURN_SHIPPING_ADDRESS_FORMAT",
      "message": "The format specified for the return shipping address is not valid. Correct the format and retry. See [accept claim](/docs/api/customer-disputes/#disputes-actions_accept-claim).",
      "description": "The shipping address format is not valid."
    },
    {
      "name": "INVALID_START_TIME_FORMAT",
      "message": "The `start_time` is not in the correct date and time format. The `start_time` must be in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, <em><code>yyyy</code></em>-<em><code>MM</code></em>-<em><code>dd</code></em><code>T</code><em><code>HH</code></em>:<em><code>mm</code></em>:<em><code>ss</code></em>.<em><code>SSS</code></em><code>Z</code>. Retry the request with the correct date and time format.",
      "description": "The start time is not in the correct date and time format."
    },
    {
      "name": "INVALID_START_TIME_RANGE",
      "message": "The `start_time` is outside the allowed range. The `start_time` must be within the last 180 days. Retry the request with a valid `start_time`.",
      "description": "The start time is outside the allowed range."
    },
    {
      "name": "ITEM_ID_IS_MANDATORY_FOR_MULTIPLE_EVIDENCES",
      "message": "An item ID is required for this dispute. Provide an item ID for each evidence document. For details, see [provide evidence](/docs/api/customer-disputes/#disputes-actions_provide-evidence).",
      "description": "An item ID is required."
    },
    {
      "name": "MANDATORY_PARAMETER_MISSING",
      "message": "When you create a dispute, a `buyer_transaction_id` is required but it is missing. Retry with a valid `buyer_transaction_id`.",
      "description": "The customer transaction ID, or <code>buyer_transaction_id</code>, is missing."
    },
    {
      "name": "MISSING_EVIDENCE_INFO",
      "message": "The evidence information is required but it is missing for this dispute. Retry the request with valid evidence information. For details, see [provide evidence](/docs/api/customer-disputes/#disputes-actions_provide-evidence).",
      "description": "The evidence information is missing."
    },
    {
      "name": "MISSING_EVIDENCE_TYPE",
      "message": "The evidence type is required but it is missing for this dispute. Retry the request with a valid evidence type. For details, see [provide evidence](/docs/api/customer-disputes/#disputes-actions_provide-evidence).",
      "description": "The evidence type is missing."
    },
    {
      "name": "MISSING_REFUND_ID",
      "message": "For `PROOF_OF_REFUND`, at least one refund ID is required but it is missing. Retry the request with a valid refund ID. For information, For details, see [provide evidence](/docs/api/customer-disputes/#disputes-actions_provide-evidence).",
      "description": "A refund ID is missing. You specify <code>PROOF_OF_REFUND</code> in the <code>evidence_type</code> parameter of a <a href=\"/docs/api/customer-disputes/#disputes-actions_provide-evidence\">provide evidence</a> call."
    },
    {
      "name": "MISSING_REASON_CODE",
      "message": "To add or update a reason code, you must provide a reason code but it is missing. Retry the request with a valid reason code.",
      "description": "A reason code is missing."
    },
    {
      "name": "MISSING_RETURN_SHIPPING_ADDRESS",
      "message": "For `MERCHANDISE_OR_SERVICE_NOT_RECEIVED` cases, return shipping address cannot be specified in accept claim as this applies only for `MERCHANDISE_OR_SERVICE_NOT_AS_DESCRIBED` disputes.",
      "description": "You cannot specify the return shipping address in an accept claim call because the shipping address applies to only `MERCHANDISE_OR_SERVICE_NOT_AS_DESCRIBED` disputes."
    },
    {
      "name": "MISSING_TRACKING_INFO",
      "message": "For `PROOF_OF_FULFILLMENT`, the tracking number and carrier name are required but they are missing. Retry the request. For information, see [`response_tracking_info`](/docs/api/customer-disputes/v1/#definition-response_tracking_info).",
      "description": "The tracking number and carrier name are missing. You specify <code>PROOF_OF_FULFILLMENT</code> in the <code>evidence_type</code> parameter of a <a href=\"/docs/api/customer-disputes/#disputes-actions_provide-evidence\">provide evidence</a> call."
    },
    {
      "name": "PERMISSION_DENIED",
      "message": "You do not have the correct permission for the requested operation.",
      "description": "You do not have the correct permissions to make this request."
    },
    {
      "name": "RESOURCE_NOT_FOUND_ERROR",
      "message": "Resource not found.",
      "description": "The requested resource is not found in the system."
    },
    {
      "name": "SHIPPING_ADDRESS_SHOULD_NOT_BE_PASSED",
      "message": "If seller proposed offer is less than buyer requested refund amount, shipping address must be specified for `MERCHANDISE_OR_SERVICE_NOT_AS_DESCRIBED` disputes. PayPal may use this in case buyer denies the offer and requests buyer to return the item to resolve the dispute.",
      "description": "You must specify the shipping address for `MERCHANDISE_OR_SERVICE_NOT_AS_DESCRIBED` disputes."
    },
    {
      "name": "UNKNOWN_ERROR",
      "message": "Unknown exception occurred.",
      "description": "An unknown error occurred."
    },
    {
      "name": "VALIDATION_ERROR",
      "message": "Invalid request - see details.",
      "description": "One or more validation errors occurred. See the details for specific validation errors."
    }
  ],
  "x-requestValidationIssues": [
    {
      "name": "InvalidAccountActivityId",
      "message": "Not a valid account activity ID.",
      "details": "Provide a valid account activity ID. The activity ID passed does not exist."
    },
    {
      "name": "InvalidDateTimeFormat",
      "message": "Must be a date_time string of form yyyy-mm-ddThh:mm:ss(.sss)?Z.",
      "details": "Provide a properly formatted `date_time`."
    },
    {
      "name": "InvalidDisputeReason",
      "message": "Not a valid dispute reason.",
      "details": "Ensure that the dispute reason is one of the following: MERCHANDISE_OR_SERVICE_NOT_RECEIVED, MERCHANDISE_OR_SERVICE_NOT_AS_DESCRIBED, UNAUTHORISED, CREDIT_NOT_PROCESSED, DUPLICATE_TRANSACTION, INCORRECT_AMOUNT, PAYMENT_BY_OTHER_MEANS, CANCELLED_RECURRING_BILLING."
    },
    {
      "name": "InvalidDisputeStatus",
      "message": "Not a valid dispute status.",
      "details": "Ensure that the dispute status is one of the following: OPEN, WAITING_FOR_BUYER_RESPONSE, WAITING_FOR_SELLER_RESPONSE, UNDER_REVIEW, RESOLVED."
    },
    {
      "name": "InvalidTransactionId",
      "message": "Not a valid transaction ID.",
      "details": "Provide a valid transaction ID. The transaction ID passed does not exist."
    },
    {
      "name": "MustNotBeBlank",
      "message": "Must not be blank.",
      "details": "Ensure that fields send in the request are not empty."
    },
    {
      "name": "ReadonlyField",
      "message": "Not valid to specify this field in a request.",
      "details": "This field is only provided as part of a response and cannot be included in a request."
    },
    {
      "name": "RequiredFieldMissing",
      "message": "Required field missing/",
      "details": "Ensure that all required fields are present and resend the request."
    }
  ]
}